{
	"info": {
		"_postman_id": "804f0994-fcec-47e9-a93a-a6cb8f7d89b0",
		"name": "ProyectoIntegradorGrupo2",
		"description": "Esta colección contiene los test pertinentes de realizar para probar el funcionamiento de las APIs del proyecto integrador.\n\nLa colección contiene subcarpetas que corresponden al testing de cada API de la aplicación. Y dentro de cada subcarpeta se encuentran los test de los métodos del endpoint.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18041092"
	},
	"item": [
		{
			"name": "Categorias Testing",
			"item": [
				{
					"name": "Post - Agregar categoria",
					"item": [
						{
							"name": "Agregar categoria",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Setear el ID de la categoria posteada\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"   pm.collectionVariables.set(\"IDPOST2_CATEGORIA\", jsonData);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"titulo\": \"{{POST_HOTELES_CATEGORIA}}\",\r\n        \"descripcion\": \"{{POST_DESCRIPCION}}\",\r\n        \"url_imagen\": \"https://images.unsplash.com/photo-1591088398332-8a7791972843?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1374\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_CATEGORIAS}}/agregar",
									"host": [
										"{{URL_CATEGORIAS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar categoria script tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"console.log(jsonData)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header es application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Testear que el tipo de respuesta sea un number\", () => {\r",
											"    \r",
											"    pm.expect(jsonData).to.be.a(\"number\");\r",
											"  \r",
											"});\r",
											"\r",
											"pm.test(\"La respuesta es un status OK\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Setear el ID de la categoria posteada\", () => {\r",
											"    \r",
											"   pm.collectionVariables.set(\"IDPOST_CATEGORIA\", jsonData);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n        \"titulo\": \"{{POST_HOTELES_CATEGORIA}}\",\r\n        \"descripcion\": \"{{POST_DESCRIPCION}}\",\r\n        \"url_imagen\": \"https://images.unsplash.com/photo-1591088398332-8a7791972843?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1374\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_CATEGORIAS}}/agregar",
									"host": [
										"{{URL_CATEGORIAS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar categoria exception script tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"El código de status es 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header es application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Length header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
											"  pm.response.to.have.body(\"No se puede agregar una categoria con campos nulos o vacíos\");\r",
											"});\r",
											"\r",
											"pm.test(\"La respuesta es un status Bad Request\", () => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"titulo\": \"{{POST_HOTELES_CATEGORIA}}\",\r\n        \"descripcion\": \"{{POST_DESCRIPCION}}\",\r\n        \"url_imagen\": \"\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_CATEGORIAS}}/agregar",
									"host": [
										"{{URL_CATEGORIAS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get - Obtener categorias",
					"item": [
						{
							"name": "Obtener todas las categorias",
							"item": [
								{
									"name": "Peticion Get todas",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_CATEGORIAS}}/todas",
											"host": [
												"{{URL_CATEGORIAS}}"
											],
											"path": [
												"todas"
											]
										}
									},
									"response": []
								},
								{
									"name": "Peticion Get todas script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo id\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo titulo\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"titulo\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo descripcion\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"descripcion\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo url_imagen\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"url_imagen\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar categoria Hoteles\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Hoteles\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar categoria Hostels\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Hostels\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar categoria Departamentos\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Departamentos\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Validar categoria Bed & Breakfast\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Bed & Breakfast\");\r",
													"});\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo titulo\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].titulo).to.be.a('string');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"  \r",
													"    pm.test(\"Validar atributo titulo como una de las cuatro categorias solicitadas\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].titulo).to.be.oneOf([\"Departamentos\", \"Hostels\", \"Hoteles\", \"Bed & Breakfast\"]);\r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo descripcion\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].descripcion).to.be.a('string');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo id\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].id).to.be.a('number');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"La url de la imagen es un string\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].url_imagen).to.be.a('string');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Se espera que los elementos dentro de la respuesta sean objetos\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration]).to.be.an('object');\r",
													"});\r",
													"}\r",
													"\r",
													"pm.test(\"Se espera que la respuesta sea un array\", () => {\r",
													"   \r",
													"  pm.expect(responseJson).to.be.an(\"array\");\r",
													"   \r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status OK\", () => {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_CATEGORIAS}}/todas",
											"host": [
												"{{URL_CATEGORIAS}}"
											],
											"path": [
												"todas"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Obtener categoria por id",
							"item": [
								{
									"name": "Obtener categoria por id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
													"});\r",
													"\r",
													"pm.test(\"El id está presente y es un numero\", () => {\r",
													"   \r",
													"    pm.expect(responseJson.id).to.be.a('number');\r",
													"        \r",
													"});\r",
													"\r",
													"pm.test(\"El ID es el mismo que el obtenido al hacer el post de la categoria previamente\", () => {\r",
													"  pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get(\"IDPOST_CATEGORIA\")));\r",
													"});\r",
													"\r",
													"pm.test(\"La url de la imagen es un string\", () => {\r",
													"    \r",
													"    pm.expect(responseJson.url_imagen).to.be.a('string');\r",
													"    \r",
													"});\r",
													"\r",
													"pm.test(\"El titulo es uno de los asignados para categorizar\", () => {\r",
													"   \r",
													"    pm.expect(responseJson.titulo).to.be.oneOf([\"Departamentos\", \"Hostels\", \"Hoteles\", \"Bed & Breakfast\"]);\r",
													"     \r",
													"});\r",
													"\r",
													"pm.test(\"El titulo es el mismo que el enviado al hacer el post de la categoria previamente\", () => {\r",
													"  pm.expect(responseJson.titulo).to.eql(pm.collectionVariables.get(\"POST_HOTELES_CATEGORIA\"));\r",
													"});\r",
													"\r",
													"pm.test(\"La descripcion es un string\", () => {\r",
													"      pm.expect(responseJson.descripcion).to.be.a('string');\r",
													"       \r",
													"});\r",
													"\r",
													"pm.test(\"La descripción es el mismo que el enviado al hacer el post de la categoria previamente\", () => {\r",
													"  pm.expect(responseJson.descripcion).to.eql(pm.collectionVariables.get(\"POST_DESCRIPCION\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_CATEGORIAS}}/{{IDPOST_CATEGORIA}}",
											"host": [
												"{{URL_CATEGORIAS}}"
											],
											"path": [
												"{{IDPOST_CATEGORIA}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Obtener categoria por id exception",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se pudo encontrar la categoria con el id indicado\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_CATEGORIAS}}/{{IDFOREXCEPTION}}",
											"host": [
												"{{URL_CATEGORIAS}}"
											],
											"path": [
												"{{IDFOREXCEPTION}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Put - Modificar categoria",
					"item": [
						{
							"name": "Modificar categoria OK",
							"item": [
								{
									"name": "Modificar categoria",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"id\": {{IDPOST_CATEGORIA}},\r\n        \"titulo\": \"Hoteles\",\r\n        \"descripcion\": \"{{PUT_DESCRIPCION}}\",\r\n        \"url_imagen\": \"https://images.unsplash.com/photo-1591088398332-8a7791972843?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1374\"\r\n     \r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_CATEGORIAS}}/editar",
											"host": [
												"{{URL_CATEGORIAS}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modificar categoria script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto que indica que fue actualizada la categoria\", function () {\r",
													"  pm.response.to.have.body(\"UPDATED\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status OK\", () => {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"id\": {{IDPOST2_CATEGORIA}},\r\n        \"titulo\": \"Hoteles\",\r\n        \"descripcion\": \"{{PUT_DESCRIPCION}}\",\r\n        \"url_imagen\": \"https://images.unsplash.com/photo-1591088398332-8a7791972843?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1374\" \r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_CATEGORIAS}}/editar",
											"host": [
												"{{URL_CATEGORIAS}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Modificar categoria exception",
							"item": [
								{
									"name": "Modificar categoria exception",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"id\": {{IDFOREXCEPTION}},\r\n        \"titulo\": \"Hoteles\",\r\n        \"descripcion\": \"Habitaciones con baño privado, Recepción 24 Hs, Servicio de Room Service, Lavandería y Valet Parking\",\r\n        \"url_imagen\": \"https://images.unsplash.com/photo-1591088398332-8a7791972843?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1374\" \r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_CATEGORIAS}}/editar",
											"host": [
												"{{URL_CATEGORIAS}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modificar categoria exception script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se pudo encontrar la categoria para editar\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"   pm.response.to.have.status(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"id\": {{IDFOREXCEPTION}},\r\n        \"titulo\": \"Hoteles\",\r\n        \"descripcion\": \"Habitaciones con baño privado, Recepción 24 Hs, Servicio de Room Service, Lavandería y Valet Parking\",\r\n        \"url_imagen\": \"https://images.unsplash.com/photo-1591088398332-8a7791972843?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1374\" \r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_CATEGORIAS}}/editar",
											"host": [
												"{{URL_CATEGORIAS}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Delete - Eliminar categoria",
					"item": [
						{
							"name": "Eliminar categoria OK",
							"item": [
								{
									"name": "Eliminar categoria",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_CATEGORIAS}}/{{IDPOST_CATEGORIA}}",
											"host": [
												"{{URL_CATEGORIAS}}"
											],
											"path": [
												"{{IDPOST_CATEGORIA}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Eliminar categoria script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto que indica que fue borrada la categoria\", function () {\r",
													"  pm.response.to.have.body(\"DELETED\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_CATEGORIAS}}/{{IDPOST2_CATEGORIA}}",
											"host": [
												"{{URL_CATEGORIAS}}"
											],
											"path": [
												"{{IDPOST2_CATEGORIA}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Eliminar categoria exception",
							"item": [
								{
									"name": "Eliminar categoria exception",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_CATEGORIAS}}/{{IDFOREXCEPTION}}",
											"host": [
												"{{URL_CATEGORIAS}}"
											],
											"path": [
												"{{IDFOREXCEPTION}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Eliminar categoria exception script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se pudo encontrar la categoria a eliminar\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_CATEGORIAS}}/{{IDFOREXCEPTION}}",
											"host": [
												"{{URL_CATEGORIAS}}"
											],
											"path": [
												"{{IDFOREXCEPTION}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Productos Testing copy",
			"item": [
				{
					"name": "Aux",
					"item": [
						{
							"name": "Agregar usuario 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Setear el ID del usuario posteado\", () => {",
											"    const jsonData = pm.response.json();",
											"   pm.collectionVariables.set(\"ID_POST_USUARIO_PRODUCTO\", jsonData.id);",
											"   pm.collectionVariables.set(\"TOKEN_POST_USUARIO_PRODUCTO\", jsonData.token_acceso_registro);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nombre\": \"usuarioprod1\",\n    \"apellido\": \"testingproducto1\",\n    \"email\": \"usuarioprod1@mail.com\",\n    \"password\": \"123456H\",\n    \"ciudad\": null,\n    \"activo\": 0,\n    \"nombre_rol\": \"ROLE_USER\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_USUARIOS}}/agregar",
									"host": [
										"{{URL_USUARIOS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar usuario 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Setear el ID del usuario posteado\", () => {",
											"    const jsonData = pm.response.json();",
											"   pm.collectionVariables.set(\"ID_POST2_USUARIO_PRODUCTO\", jsonData.id);",
											"    pm.collectionVariables.set(\"TOKEN_POST_USUARIO2_PRODUCTO\", jsonData.token_acceso_registro);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nombre\": \"usuarioprod2\",\n    \"apellido\": \"testingproducto2\",\n    \"email\": \"usuarioprod2@mail.com\",\n    \"password\": \"123456H\",\n    \"ciudad\": null,\n    \"activo\": 0,\n    \"nombre_rol\": \"ROLE_USER\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_USUARIOS}}/agregar",
									"host": [
										"{{URL_USUARIOS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar producto 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Setear el ID del producto posteado\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"   pm.collectionVariables.set(\"IDPOST3_PRODUCTO\", jsonData);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"titulo\": \"Casona\",\r\n        \"titulo_descripcion\": \"{{POST_DESCRIPCION}}\",\r\n        \"descripcion\": \"Casona\",\r\n        \"direccion\":\"Calle Imaginaria 123\",\r\n        \"latitud\":-8.5,\r\n        \"longitud\":-8.5,\r\n        \"politicaListDTO\": [\r\n            {\"descripcion\": \"No fumar\",\r\n            \"tipo_politica_id\":1},\r\n            {\"descripcion\": \"Con 10 días de anticipacion\",\r\n            \"tipo_politica_id\":2},\r\n            {\"descripcion\": \"Usar barbijo\",\r\n            \"tipo_politica_id\":3}\r\n        ],\r\n        \"categoria_id\":4,\r\n        \"ciudad_id\":3,\r\n        \"imagenDTOList\": [\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista interior\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista cocina\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"}\r\n        ],\r\n        \"caracteristicasDTOList\": [\r\n            {\"titulo\": \"WiFi\",\r\n            \"nombre_icono\":\"WiFi\"},\r\n            {\"titulo\": \"Cocina\",\r\n            \"nombre_icono\":\"Cocina\"},\r\n            {\"titulo\": \"Aire acondicionado\",\r\n            \"nombre_icono\":\"airConditioner\"}\r\n        ]\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_PRODUCTOS}}/agregar",
									"host": [
										"{{URL_PRODUCTOS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar producto 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Setear el ID del producto posteado\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"   pm.collectionVariables.set(\"IDPOST4_PRODUCTO\", jsonData);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"titulo\": \"Casona\",\r\n        \"titulo_descripcion\": \"{{POST_DESCRIPCION}}\",\r\n        \"descripcion\": \"Casona\",\r\n        \"direccion\":\"Calle Imaginaria 123\",\r\n        \"latitud\":-8.5,\r\n        \"longitud\":-8.5,\r\n        \"politicaListDTO\": [\r\n            {\"descripcion\": \"No fumar\",\r\n            \"tipo_politica_id\":1},\r\n            {\"descripcion\": \"Con 10 días de anticipacion\",\r\n            \"tipo_politica_id\":2},\r\n            {\"descripcion\": \"Usar barbijo\",\r\n            \"tipo_politica_id\":3}\r\n        ],\r\n        \"categoria_id\":4,\r\n        \"ciudad_id\":3,\r\n        \"imagenDTOList\": [\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista interior\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista cocina\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"}\r\n        ],\r\n        \"caracteristicasDTOList\": [\r\n            {\"titulo\": \"WiFi\",\r\n            \"nombre_icono\":\"WiFi\"},\r\n            {\"titulo\": \"Cocina\",\r\n            \"nombre_icono\":\"Cocina\"},\r\n            {\"titulo\": \"Aire acondicionado\",\r\n            \"nombre_icono\":\"airConditioner\"}\r\n        ]\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_PRODUCTOS}}/agregar",
									"host": [
										"{{URL_PRODUCTOS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar reservas",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{TOKEN_POST_USUARIO_PRODUCTO}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fechaInicioReserva\": \"2022-06-25\",\n  \"fechaFinReserva\": \"2022-06-29\",\n  \"fechaEnLaQueSeHaceLaReserva\": \"2022-06-21\" ,\n   \"mensajeUsuario\": \"Hola, por favor quiero una habitación para no fumadores. Gracias!\",\n   \"vacunadoCovid\": true,\n   \"usuario_id\": {{ID_POST_USUARIO_PRODUCTO}},\n   \"producto_id\": {{IDPOST3_PRODUCTO}}\n \n  \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_RESERVAS}}/agregar",
									"host": [
										"{{URL_RESERVAS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar reservas 2",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{TOKEN_POST_USUARIO2_PRODUCTO}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fechaInicioReserva\": \"2022-07-03\",\n  \"fechaFinReserva\": \"2022-07-12\",\n  \"fechaEnLaQueSeHaceLaReserva\": \"2022-06-21\" ,\n   \"mensajeUsuario\": \"Hola, por favor quiero una habitación para no fumadores. Gracias!\",\n   \"vacunadoCovid\": true,\n   \"usuario_id\": {{ID_POST2_USUARIO_PRODUCTO}},\n   \"producto_id\": {{IDPOST4_PRODUCTO}}\n \n  \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_RESERVAS}}/agregar",
									"host": [
										"{{URL_RESERVAS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar reacción 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Setear el ID de la reaccion posteada\", () => {",
											"    const jsonData = pm.response.json();",
											"   pm.collectionVariables.set(\"ID_POST2_REACCION\", jsonData);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"favorito\": true,\n    \"producto_id\": {{IDPOST3_PRODUCTO}},\n    \"usuario_id\": {{ID_POST_USUARIO_PRODUCTO}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{LOCAL_URL_REACCIONES}}/agregar",
									"host": [
										"{{LOCAL_URL_REACCIONES}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Post - Agregar producto",
					"item": [
						{
							"name": "Agregar producto OK",
							"item": [
								{
									"name": "Agregar producto",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Setear el ID del producto posteado\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"   pm.collectionVariables.set(\"IDPOST_PRODUCTO\", jsonData);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"titulo\": \"Casona\",\r\n        \"titulo_descripcion\": \"{{POST_DESCRIPCION}}\",\r\n        \"descripcion\": \"Casona\",\r\n        \"direccion\":\"Calle Imaginaria 123\",\r\n        \"latitud\":-8.5,\r\n        \"longitud\":-8.5,\r\n        \"politicaListDTO\": [\r\n            {\"descripcion\": \"No fumar\",\r\n            \"tipo_politica_id\":1},\r\n            {\"descripcion\": \"Con 10 días de anticipacion\",\r\n            \"tipo_politica_id\":2},\r\n            {\"descripcion\": \"Usar barbijo\",\r\n            \"tipo_politica_id\":3}\r\n        ],\r\n        \"categoria_id\":4,\r\n        \"ciudad_id\":3,\r\n        \"imagenDTOList\": [\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista interior\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista cocina\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"}\r\n        ],\r\n        \"caracteristicasDTOList\": [\r\n            {\"titulo\": \"WiFi\",\r\n            \"nombre_icono\":\"WiFi\"},\r\n            {\"titulo\": \"Cocina\",\r\n            \"nombre_icono\":\"Cocina\"},\r\n            {\"titulo\": \"Aire acondicionado\",\r\n            \"nombre_icono\":\"airConditioner\"}\r\n        ]\r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_PRODUCTOS}}/agregar",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"agregar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Agregar producto script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();\r",
													"console.log(jsonData)\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
													"});\r",
													"\r",
													"pm.test(\"Testear que el tipo de respuesta sea un number\", () => {\r",
													"    \r",
													"    pm.expect(jsonData).to.be.a(\"number\");\r",
													"  \r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status OK\", () => {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Setear el ID del producto posteado\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"   pm.collectionVariables.set(\"IDPOST2_PRODUCTO\", jsonData);\r",
													"});\r",
													"\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"number\"\r",
													"};\r",
													"pm.test(\"Validate schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"titulo\": \"Hotel Bariloche\",\r\n        \"titulo_descripcion\": \"{{POST_DESCRIPCION}}\",\r\n        \"descripcion\": \"El hotel mejor ubicado en Bariloche\",\r\n        \"direccion\":\"Calle Imaginaria 123\",\r\n        \"latitud\":-8.5,\r\n        \"longitud\":-8.5,\r\n        \"politicaListDTO\": [\r\n            {\"descripcion\": \"No fumar\",\r\n            \"tipo_politica_id\":1},\r\n            {\"descripcion\": \"Con 10 días de anticipacion\",\r\n            \"tipo_politica_id\":2},\r\n            {\"descripcion\": \"Usar barbijo\",\r\n            \"tipo_politica_id\":3}\r\n        ],\r\n        \"categoria_id\":4,\r\n        \"ciudad_id\":3,\r\n        \"imagenDTOList\": [\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista interior\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista cocina\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"}\r\n        ],\r\n        \"caracteristicasDTOList\": [\r\n            {\"titulo\": \"WiFi\",\r\n            \"nombre_icono\":\"WiFi\"},\r\n            {\"titulo\": \"Cocina\",\r\n            \"nombre_icono\":\"Cocina\"},\r\n            {\"titulo\": \"Aire acondicionado\",\r\n            \"nombre_icono\":\"airConditioner\"}\r\n        ]\r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_PRODUCTOS}}/agregar",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"agregar"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Agregar producto exception",
							"item": [
								{
									"name": "Agregar producto exception 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se puede guardar un producto sin asignarle una ciudad y/o categoria\");\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"La respuesta es un status Bad Request\", () => {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"titulo\": \"Hotel Bariloche\",\r\n        \"titulo_descripcion\": \"{{POST_DESCRIPCION}}\",\r\n        \"descripcion\": \"El hotel mejor ubicado en Bariloche\",\r\n        \"direccion\":\"Calle Imaginaria 123\",\r\n        \"latitud\":-8.5,\r\n        \"longitud\":-8.5,\r\n        \"politicaListDTO\": [\r\n            {\"descripcion\": \"No fumar\",\r\n            \"tipo_politica_id\":1},\r\n            {\"descripcion\": \"Con 10 días de anticipacion\",\r\n            \"tipo_politica_id\":2},\r\n            {\"descripcion\": \"Usar barbijo\",\r\n            \"tipo_politica_id\":3}\r\n        ],\r\n        \"categoria_id\":null,\r\n        \"ciudad_id\":3,\r\n        \"imagenDTOList\": [\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista interior\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista cocina\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"}\r\n        ],\r\n        \"caracteristicasDTOList\": [\r\n            {\"titulo\": \"WiFi\",\r\n            \"nombre_icono\":\"WiFi\"},\r\n            {\"titulo\": \"Cocina\",\r\n            \"nombre_icono\":\"Cocina\"},\r\n            {\"titulo\": \"Aire acondicionado\",\r\n            \"nombre_icono\":\"airConditioner\"}\r\n        ]\r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_PRODUCTOS}}/agregar",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"agregar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Agregar producto exception 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se puede guardar un producto sin asignarle una ciudad y/o categoria\");\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"La respuesta es un status Bad Request\", () => {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"titulo\": \"Hotel Bariloche\",\r\n        \"titulo_descripcion\": \"{{POST_DESCRIPCION}}\",\r\n        \"descripcion\": \"El hotel mejor ubicado en Bariloche\",\r\n        \"direccion\":\"Calle Imaginaria 123\",\r\n        \"latitud\":-8.5,\r\n        \"longitud\":-8.5,\r\n        \"politicaListDTO\": [\r\n            {\"descripcion\": \"No fumar\",\r\n            \"tipo_politica_id\":1},\r\n            {\"descripcion\": \"Con 10 días de anticipacion\",\r\n            \"tipo_politica_id\":2},\r\n            {\"descripcion\": \"Usar barbijo\",\r\n            \"tipo_politica_id\":3}\r\n        ],\r\n        \"categoria_id\":2,\r\n        \"ciudad_id\":null,\r\n        \"imagenDTOList\": [\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista interior\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista cocina\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"}\r\n        ],\r\n        \"caracteristicasDTOList\": [\r\n            {\"titulo\": \"WiFi\",\r\n            \"nombre_icono\":\"WiFi\"},\r\n            {\"titulo\": \"Cocina\",\r\n            \"nombre_icono\":\"Cocina\"},\r\n            {\"titulo\": \"Aire acondicionado\",\r\n            \"nombre_icono\":\"airConditioner\"}\r\n        ]\r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_PRODUCTOS}}/agregar",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"agregar"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Get - Obtener producto",
					"item": [
						{
							"name": "Obtener todos los productos",
							"item": [
								{
									"name": "Obtener todos los productos OK",
									"item": []
								},
								{
									"name": "Obtener todos los productos",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_PRODUCTOS}}/todos",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"todos"
											]
										}
									},
									"response": []
								},
								{
									"name": "Obtener todos los productos script tests con schema",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status OK\", () => {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
													"});\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   pm.test(\"Validar atributo id\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"id\");\r",
													"\r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"pm.test(\"Validar atributo titulo\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"titulo\");\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"pm.test(\"Validar atributo descripcion\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"descripcion\");\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"pm.test(\"Validar atributo titulo_descripcion\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"titulo_descripcion\");\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"pm.test(\"Validar atributo direccion\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"direccion\");\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"pm.test(\"Validar atributo latitud\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"latitud\");\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"pm.test(\"Validar atributo longitud\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"longitud\");\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"pm.test(\"Validar atributo categoria_id\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"categoria_id\");\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"pm.test(\"Validar atributo ciudad_id\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"ciudad_id\");\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"pm.test(\"Validar atributo imagenDTOList\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"imagenDTOList\");\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"pm.test(\"Validar atributo caracteristicasDTOList\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"caracteristicasDTOList\");\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"number\" },\r",
													"        \"titulo\": { \"type\": \"string\" },\r",
													"        \"titulo_descripcion\": { \"type\": \"string\" },\r",
													"        \"direccion\": { \"type\": \"string\" },\r",
													"        \"latitud\": { \"type\": \"number\" },\r",
													"        \"longitud\": { \"type\": \"number\" },\r",
													"        \"categoria_id\": { \"type\": \"number\" },\r",
													"        \"ciudad_id\": { \"type\": \"number\" },\r",
													"        \"imagenDTOList\": { \"type\": \"array\",\r",
													"                           \"items\": [{\r",
													"                             \"type\": \"object\",\r",
													"                             \"properties\": {\r",
													"                                \"id\": { \"type\": \"number\" },\r",
													"                                \"url_img_producto\": { \"type\": \"string\" },\r",
													"                                \"titulo_img_producto\": { \"type\": \"string\" },\r",
													"                            }\r",
													"                                    }] \r",
													"                        },\r",
													"        \"caracteristicasDTOList\":{ \"type\": \"array\",\r",
													"                           \"items\": [{\r",
													"                             \"type\": \"object\",\r",
													"                             \"properties\": {\r",
													"                                    \"id\": { \"type\": \"number\" },\r",
													"                                    \"titulo\": { \"type\": \"string\" },\r",
													"                                     \"nombre_icono\": { \"type\": \"string\" },\r",
													"                                   }\r",
													"                                    }] \r",
													"                        },\r",
													"    }\r",
													"};\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validate schema\", () => {\r",
													"    pm.expect(responseJson[pm.info.iteration]).to.have.jsonSchema(schema);\r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"  \r",
													"    pm.test(\"Validar atributo categoria_id como una de las cuatro categorias solicitadas\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].categoria_id).to.be.oneOf([1, 2, 3, 4]);\r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo imagenDTOList como lista no vacia\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].imagenDTOList).to.be.an('array');\r",
													"    pm.expect(responseJson[pm.info.iteration].imagenDTOList.length).to.not.equal(0);\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo caracteristicasDTOList como lista no vacia\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].caracteristicasDTOList).to.be.an('array');\r",
													"    pm.expect(responseJson[pm.info.iteration].caracteristicasDTOList.length).to.not.equal(0);\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Se espera que los elementos dentro de la respuesta sean objetos\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration]).to.be.an('object');\r",
													"});\r",
													"}\r",
													"\r",
													"pm.test(\"Se espera que la respuesta sea un array\", () => {\r",
													"   \r",
													"  pm.expect(responseJson).to.be.an(\"array\");\r",
													"   \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_PRODUCTOS}}/todos",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"todos"
											]
										}
									},
									"response": []
								},
								{
									"name": "Obtener todos los productos ordenados",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"La respuesta es un status OK\", () => {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"pm.test(\"Content-Type header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type header es application/json\", () => {",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"});",
													"",
													"for (let i = 0; i < responseJson.length; i++) {",
													"   pm.test(\"Validar atributo id\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"id\");",
													"",
													"});",
													"}",
													"",
													"for (let i = 0; i < responseJson.length; i++) {",
													"   ",
													"pm.test(\"Validar atributo titulo\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"titulo\");",
													"});",
													"",
													"}",
													"",
													"for (let i = 0; i < responseJson.length; i++) {",
													"   ",
													"pm.test(\"Validar atributo descripcion\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"descripcion\");",
													"});",
													"",
													"}",
													"",
													"for (let i = 0; i < responseJson.length; i++) {",
													"   ",
													"pm.test(\"Validar atributo titulo_descripcion\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"titulo_descripcion\");",
													"});",
													"",
													"}",
													"",
													"for (let i = 0; i < responseJson.length; i++) {",
													"   ",
													"pm.test(\"Validar atributo direccion\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"direccion\");",
													"});",
													"",
													"}",
													"",
													"for (let i = 0; i < responseJson.length; i++) {",
													"   ",
													"pm.test(\"Validar atributo latitud\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"latitud\");",
													"});",
													"",
													"}",
													"",
													"for (let i = 0; i < responseJson.length; i++) {",
													"   ",
													"pm.test(\"Validar atributo longitud\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longitud\");",
													"});",
													"",
													"}",
													"",
													"for (let i = 0; i < responseJson.length; i++) {",
													"   ",
													"pm.test(\"Validar atributo categoria_id\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"categoria_id\");",
													"});",
													"",
													"}",
													"",
													"for (let i = 0; i < responseJson.length; i++) {",
													"   ",
													"pm.test(\"Validar atributo ciudad_id\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"ciudad_id\");",
													"});",
													"",
													"}",
													"",
													"for (let i = 0; i < responseJson.length; i++) {",
													"   ",
													"pm.test(\"Validar atributo imagenDTOList\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"imagenDTOList\");",
													"});",
													"",
													"}",
													"",
													"for (let i = 0; i < responseJson.length; i++) {",
													"   ",
													"pm.test(\"Validar atributo caracteristicasDTOList\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"caracteristicasDTOList\");",
													"});",
													"",
													"}",
													"",
													"",
													"const schema = {",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"        \"id\": { \"type\": \"number\" },",
													"        \"titulo\": { \"type\": \"string\" },",
													"        \"titulo_descripcion\": { \"type\": \"string\" },",
													"        \"direccion\": { \"type\": \"string\" },",
													"        \"latitud\": { \"type\": \"number\" },",
													"        \"longitud\": { \"type\": \"number\" },",
													"        \"categoria_id\": { \"type\": \"number\" },",
													"        \"ciudad_id\": { \"type\": \"number\" },",
													"        \"imagenDTOList\": { \"type\": \"array\",",
													"                           \"items\": [{",
													"                             \"type\": \"object\",",
													"                             \"properties\": {",
													"                                \"id\": { \"type\": \"number\" },",
													"                                \"url_img_producto\": { \"type\": \"string\" },",
													"                                \"titulo_img_producto\": { \"type\": \"string\" },",
													"                            }",
													"                                    }] ",
													"                        },",
													"        \"caracteristicasDTOList\":{ \"type\": \"array\",",
													"                           \"items\": [{",
													"                             \"type\": \"object\",",
													"                             \"properties\": {",
													"                                    \"id\": { \"type\": \"number\" },",
													"                                    \"titulo\": { \"type\": \"string\" },",
													"                                     \"nombre_icono\": { \"type\": \"string\" },",
													"                                   }",
													"                                    }] ",
													"                        },",
													"    }",
													"};",
													"",
													"for (let i = 0; i < responseJson.length; i++) {",
													"    pm.test(\"Validate schema\", () => {",
													"    pm.expect(responseJson[pm.info.iteration]).to.have.jsonSchema(schema);",
													"});",
													"}",
													"",
													"for (let i = 0; i < responseJson.length; i++) {",
													"  ",
													"    pm.test(\"Validar atributo categoria_id como una de las cuatro categorias solicitadas\", function () {",
													"    ",
													"    pm.expect(responseJson[pm.info.iteration].categoria_id).to.be.oneOf([1, 2, 3, 4]);",
													"});",
													"}",
													"",
													"",
													"for (let i = 0; i < responseJson.length; i++) {",
													"    pm.test(\"Validar atributo imagenDTOList como lista no vacia\", function () {",
													"    ",
													"    pm.expect(responseJson[pm.info.iteration].imagenDTOList).to.be.an('array');",
													"    pm.expect(responseJson[pm.info.iteration].imagenDTOList.length).to.not.equal(0);",
													"  ",
													"});",
													"}",
													"",
													"for (let i = 0; i < responseJson.length; i++) {",
													"    pm.test(\"Validar atributo caracteristicasDTOList como lista no vacia\", function () {",
													"    ",
													"    pm.expect(responseJson[pm.info.iteration].caracteristicasDTOList).to.be.an('array');",
													"    pm.expect(responseJson[pm.info.iteration].caracteristicasDTOList.length).to.not.equal(0);",
													"  ",
													"});",
													"}",
													"",
													"for (let i = 0; i < responseJson.length; i++) {",
													"    pm.test(\"Se espera que los elementos dentro de la respuesta sean objetos\", function () {",
													"    ",
													"    pm.expect(responseJson[pm.info.iteration]).to.be.an('object');",
													"});",
													"}",
													"",
													"pm.test(\"Se espera que la respuesta sea un array\", () => {",
													"   ",
													"  pm.expect(responseJson).to.be.an(\"array\");",
													"   ",
													"});",
													"",
													"pm.test(\"Validar que los resultados estén ordenados por ID de menor a mayor\", () => {",
													"    const ascendente = responseJson.map(item => item.id).every((current, index, ids) => index === 0 || current >= ids[index-1]);",
													"    ",
													"    pm.expect(ascendente).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_PRODUCTOS}}/todos/ordenados",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"todos",
												"ordenados"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Obtener producto por id",
							"item": [
								{
									"name": "Obtener producto por id OK",
									"item": [
										{
											"name": "Obtener producto por id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"La respuesta es un status OK\", () => {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type header está presente\", () => {\r",
															"  pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type header es application/json\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
															"});\r",
															"\r",
															"   pm.test(\"Validar atributo id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"id\");\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Validar atributo titulo\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"titulo\");\r",
															"});\r",
															"\r",
															"pm.test(\"Validar atributo descripcion\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"descripcion\");\r",
															"});\r",
															"\r",
															"pm.test(\"Validar atributo titulo_descripcion\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"titulo_descripcion\");\r",
															"});\r",
															"\r",
															"pm.test(\"Validar atributo direccion\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"direccion\");\r",
															"});\r",
															"\r",
															"pm.test(\"Validar atributo latitud\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"latitud\");\r",
															"});\r",
															"\r",
															"pm.test(\"Validar atributo longitud\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"longitud\");\r",
															"});\r",
															"\r",
															"pm.test(\"Validar atributo politicaListDTO\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"politicaListDTO\");\r",
															"});\r",
															"\r",
															"pm.test(\"Validar atributo categoria_id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"categoria_id\");\r",
															"});\r",
															"\r",
															"pm.test(\"Validar atributo ciudad_id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"ciudad_id\");\r",
															"});\r",
															"\r",
															"\r",
															"const schema = {\r",
															"    \"type\": \"object\",\r",
															"    \"properties\": {\r",
															"        \"id\": { \"type\": \"number\" },\r",
															"        \"titulo\": { \"type\": \"string\" },\r",
															"        \"titulo_descripcion\": { \"type\": \"string\" },\r",
															"        \"direccion\": { \"type\": \"string\" },\r",
															"        \"latitud\": { \"type\": \"number\" },\r",
															"        \"longitud\": { \"type\": \"number\" },\r",
															"        \"categoria_id\": { \"type\": \"number\" },\r",
															"        \"ciudad_id\": { \"type\": \"number\" },\r",
															"        \"politicaListDTO\":{ \"type\": \"array\",\r",
															"                           \"items\": [{\r",
															"                             \"type\": \"object\",\r",
															"                             \"properties\": {\r",
															"                                    \"id\": { \"type\": \"number\" },\r",
															"                                    \"descripcion\": { \"type\": \"string\" },\r",
															"                                     \"tipo_politica_id\": { \"type\": \"number\" },\r",
															"                                   }\r",
															"                                    }] \r",
															"                        },\r",
															"        \"imagenDTOList\": { \"type\": \"array\",\r",
															"                           \"items\": [{\r",
															"                             \"type\": \"object\",\r",
															"                             \"properties\": {\r",
															"                                \"id\": { \"type\": \"number\" },\r",
															"                                \"url_img_producto\": { \"type\": \"string\" },\r",
															"                                \"titulo_img_producto\": { \"type\": \"string\" },\r",
															"                            }\r",
															"                                    }] \r",
															"                        },\r",
															"        \"caracteristicasDTOList\":{ \"type\": \"array\",\r",
															"                           \"items\": [{\r",
															"                             \"type\": \"object\",\r",
															"                             \"properties\": {\r",
															"                                    \"id\": { \"type\": \"number\" },\r",
															"                                    \"titulo\": { \"type\": \"string\" },\r",
															"                                     \"nombre_icono\": { \"type\": \"string\" },\r",
															"                                   }\r",
															"                                    }] \r",
															"                        }\r",
															"    }\r",
															"};\r",
															"\r",
															"pm.test(\"Validate schema\", () => {\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Validar atributo categoria_id como una de las cuatro categorias\", function () {\r",
															"    \r",
															"pm.expect(responseJson.categoria_id).to.be.oneOf([1, 2, 3, 4]);\r",
															"});\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"   \r",
															"    for (let i = 0; i < responseJson[pm.info.iteration].politicaListDTO.length; i++) {\r",
															"        pm.test(\"Validar atributo id\", function () {\r",
															"    \r",
															"        pm.expect(responseJson[pm.info.iteration].politicaListDTO[pm.info.iteration].tipo_politica_id).to.be.oneOf([1, 2, 3]);\r",
															"  \r",
															"        });\r",
															"    }\r",
															"\r",
															"}\r",
															"\r",
															"pm.test(\"El ID es el mismo que el obtenido al hacer el post del producto previamente\", () => {\r",
															"  pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get(\"IDPOST_PRODUCTO\")));\r",
															"});\r",
															"\r",
															"pm.test(\"Validar atributo politicaListDTO como lista no vacía\", function () {\r",
															"    \r",
															"    pm.expect(responseJson.politicaListDTO).to.be.an('array');\r",
															"    pm.expect(responseJson.politicaListDTO.length).to.not.equal(0);\r",
															"\r",
															"});\r",
															"\r",
															" pm.test(\"Validar atributo imagenDTOList como lista no vacia\", function () {\r",
															"    \r",
															"    pm.expect(responseJson.imagenDTOList).to.be.an('array');\r",
															"    pm.expect(responseJson.imagenDTOList.length).to.not.equal(0);\r",
															"  \r",
															"});\r",
															"\r",
															"pm.test(\"Validar atributo caracteristicasDTOList como lista no vacia\", function () {\r",
															"    \r",
															"    pm.expect(responseJson.caracteristicasDTOList).to.be.an('array');\r",
															"    pm.expect(responseJson.caracteristicasDTOList.length).to.not.equal(0);\r",
															"  \r",
															"});\r",
															"\r",
															"pm.test(\"Se espera que el elemento de respuesta sea un objeto\", function () {\r",
															"    \r",
															"    pm.expect(responseJson).to.be.an('object');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{URL_PRODUCTOS}}/{{IDPOST_PRODUCTO}}",
													"host": [
														"{{URL_PRODUCTOS}}"
													],
													"path": [
														"{{IDPOST_PRODUCTO}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Obtener producto por id exception",
									"item": [
										{
											"name": "Obtener producto por id exception",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"El código de status es 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type header está presente\", () => {\r",
															"  pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type header es application/json\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Length header está presente\", () => {\r",
															"  pm.response.to.have.header(\"Content-Length\");\r",
															"});\r",
															"\r",
															"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
															"  pm.response.to.have.body(\"No se ha encontrado el producto con el id indicado\");\r",
															"});\r",
															"\r",
															"pm.test(\"La respuesta es un status Not Found\", () => {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{URL_PRODUCTOS}}/{{IDFOREXCEPTION}}",
													"host": [
														"{{URL_PRODUCTOS}}"
													],
													"path": [
														"{{IDFOREXCEPTION}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Obtener productos por id ciudad",
							"item": [
								{
									"name": "Obtener productos por id ciudad OK",
									"item": [
										{
											"name": "Peticion Get productos por Ciudad",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"La respuesta es un status OK\", () => {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type header está presente\", () => {\r",
															"  pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type header es application/json\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
															"});\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"   \r",
															"pm.test(\"El ID de la ciudad en cada producto es el mismo que el solicitado en la petición\", () => {\r",
															"  pm.expect(responseJson[pm.info.iteration].ciudad_id).to.eql(parseInt(pm.collectionVariables.get(\"IDCIUDAD_GETPRODUCTOS\")));\r",
															"});\r",
															"\r",
															"}\r",
															"\r",
															"pm.test(\"Se espera que la respuesta sea un array\", () => {\r",
															"   \r",
															"  pm.expect(responseJson).to.be.an(\"array\");\r",
															"   \r",
															"});\r",
															"\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"   pm.test(\"Validar atributo id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"id\");\r",
															"\r",
															"});\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"   \r",
															"pm.test(\"Validar atributo titulo\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"titulo\");\r",
															"});\r",
															"\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"   \r",
															"pm.test(\"Validar atributo descripcion\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"descripcion\");\r",
															"});\r",
															"\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"   \r",
															"pm.test(\"Validar atributo titulo_descripcion\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"titulo_descripcion\");\r",
															"});\r",
															"\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"   \r",
															"pm.test(\"Validar atributo direccion\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"direccion\");\r",
															"});\r",
															"\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"   \r",
															"pm.test(\"Validar atributo latitud\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"latitud\");\r",
															"});\r",
															"\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"   \r",
															"pm.test(\"Validar atributo longitud\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"longitud\");\r",
															"});\r",
															"\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"   \r",
															"pm.test(\"Validar atributo categoria_id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"categoria_id\");\r",
															"});\r",
															"\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"   \r",
															"pm.test(\"Validar atributo ciudad_id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"ciudad_id\");\r",
															"});\r",
															"\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"   \r",
															"pm.test(\"Validar atributo imagenDTOList\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"imagenDTOList\");\r",
															"});\r",
															"\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"   \r",
															"pm.test(\"Validar atributo caracteristicasDTOList\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"caracteristicasDTOList\");\r",
															"});\r",
															"\r",
															"}\r",
															"\r",
															"const schema = {\r",
															"    \"type\": \"object\",\r",
															"    \"properties\": {\r",
															"        \"id\": { \"type\": \"number\" },\r",
															"        \"titulo\": { \"type\": \"string\" },\r",
															"        \"titulo_descripcion\": { \"type\": \"string\" },\r",
															"        \"direccion\": { \"type\": \"string\" },\r",
															"        \"latitud\": { \"type\": \"number\" },\r",
															"        \"longitud\": { \"type\": \"number\" },\r",
															"        \"categoria_id\": { \"type\": \"number\" },\r",
															"        \"ciudad_id\": { \"type\": \"number\" },\r",
															"        \"imagenDTOList\": { \"type\": \"array\",\r",
															"                           \"items\": [{\r",
															"                             \"type\": \"object\",\r",
															"                             \"properties\": {\r",
															"                                \"id\": { \"type\": \"number\" },\r",
															"                                \"url_img_producto\": { \"type\": \"string\" },\r",
															"                                \"titulo_img_producto\": { \"type\": \"string\" },\r",
															"                            }\r",
															"                                    }] \r",
															"                        },\r",
															"        \"caracteristicasDTOList\":{ \"type\": \"array\",\r",
															"                           \"items\": [{\r",
															"                             \"type\": \"object\",\r",
															"                             \"properties\": {\r",
															"                                    \"id\": { \"type\": \"number\" },\r",
															"                                    \"titulo\": { \"type\": \"string\" },\r",
															"                                     \"nombre_icono\": { \"type\": \"string\" },\r",
															"                                   }\r",
															"                                    }] \r",
															"                        },\r",
															"    }\r",
															"};\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"    pm.test(\"Validate schema\", () => {\r",
															"    pm.expect(responseJson[pm.info.iteration]).to.have.jsonSchema(schema);\r",
															"});\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"  \r",
															"    pm.test(\"Validar atributo categoria_id como una de las cuatro categorias solicitadas\", function () {\r",
															"    \r",
															"    pm.expect(responseJson[pm.info.iteration].categoria_id).to.be.oneOf([1, 2, 3, 4]);\r",
															"});\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"    pm.test(\"Validar atributo imagenDTOList como lista no vacia\", function () {\r",
															"    \r",
															"    pm.expect(responseJson[pm.info.iteration].imagenDTOList).to.be.an('array');\r",
															"    pm.expect(responseJson[pm.info.iteration].imagenDTOList.length).to.not.equal(0);\r",
															"  \r",
															"});\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"    pm.test(\"Validar atributo caracteristicasDTOList como lista no vacia\", function () {\r",
															"    \r",
															"    pm.expect(responseJson[pm.info.iteration].caracteristicasDTOList).to.be.an('array');\r",
															"    pm.expect(responseJson[pm.info.iteration].caracteristicasDTOList.length).to.not.equal(0);\r",
															"  \r",
															"});\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"    pm.test(\"Se espera que los elementos dentro de la respuesta sean objetos\", function () {\r",
															"    \r",
															"    pm.expect(responseJson[pm.info.iteration]).to.be.an('object');\r",
															"});\r",
															"}\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{URL_PRODUCTOS}}/porCiudad/{{IDCIUDAD_GETPRODUCTOS}}",
													"host": [
														"{{URL_PRODUCTOS}}"
													],
													"path": [
														"porCiudad",
														"{{IDCIUDAD_GETPRODUCTOS}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Obtener productos por id ciudad exception",
									"item": [
										{
											"name": "Peticion Get productos por Ciudad exception",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"El código de status es 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type header está presente\", () => {\r",
															"  pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type header es application/json\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Length header está presente\", () => {\r",
															"  pm.response.to.have.header(\"Content-Length\");\r",
															"});\r",
															"\r",
															"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
															"  pm.response.to.have.body(\"No se encontraron productos de ésa ciudad\");\r",
															"});\r",
															"\r",
															"pm.test(\"La respuesta es un status Not Found\", () => {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{URL_PRODUCTOS}}/porCiudad/{{IDFOREXCEPTION}}",
													"host": [
														"{{URL_PRODUCTOS}}"
													],
													"path": [
														"porCiudad",
														"{{IDFOREXCEPTION}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Obtener productos por id categoria",
							"item": [
								{
									"name": "Obtener productos por id categoria OK",
									"item": [
										{
											"name": "Peticion Get productos por id categoria",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"La respuesta es un status OK\", () => {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type header está presente\", () => {\r",
															"  pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type header es application/json\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
															"});\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"   \r",
															"pm.test(\"El ID de la ciudad en cada producto es el mismo que el solicitado en la petición\", () => {\r",
															"  pm.expect(responseJson[pm.info.iteration].ciudad_id).to.eql(parseInt(pm.collectionVariables.get(\"IDCATEGORIA_GETPRODUCTOS\")));\r",
															"});\r",
															"\r",
															"}\r",
															"\r",
															"pm.test(\"Se espera que la respuesta sea un array\", () => {\r",
															"   \r",
															"  pm.expect(responseJson).to.be.an(\"array\");\r",
															"   \r",
															"});\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"   pm.test(\"Validar atributo id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"id\");\r",
															"\r",
															"});\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"   \r",
															"pm.test(\"Validar atributo titulo\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"titulo\");\r",
															"});\r",
															"\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"   \r",
															"pm.test(\"Validar atributo descripcion\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"descripcion\");\r",
															"});\r",
															"\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"   \r",
															"pm.test(\"Validar atributo titulo_descripcion\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"titulo_descripcion\");\r",
															"});\r",
															"\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"   \r",
															"pm.test(\"Validar atributo direccion\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"direccion\");\r",
															"});\r",
															"\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"   \r",
															"pm.test(\"Validar atributo latitud\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"latitud\");\r",
															"});\r",
															"\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"   \r",
															"pm.test(\"Validar atributo longitud\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"longitud\");\r",
															"});\r",
															"\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"   \r",
															"pm.test(\"Validar atributo categoria_id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"categoria_id\");\r",
															"});\r",
															"\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"   \r",
															"pm.test(\"Validar atributo ciudad_id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"ciudad_id\");\r",
															"});\r",
															"\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"   \r",
															"pm.test(\"Validar atributo imagenDTOList\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"imagenDTOList\");\r",
															"});\r",
															"\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"   \r",
															"pm.test(\"Validar atributo caracteristicasDTOList\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"caracteristicasDTOList\");\r",
															"});\r",
															"\r",
															"}\r",
															"\r",
															"const schema = {\r",
															"    \"type\": \"object\",\r",
															"    \"properties\": {\r",
															"        \"id\": { \"type\": \"number\" },\r",
															"        \"titulo\": { \"type\": \"string\" },\r",
															"        \"titulo_descripcion\": { \"type\": \"string\" },\r",
															"        \"direccion\": { \"type\": \"string\" },\r",
															"        \"latitud\": { \"type\": \"number\" },\r",
															"        \"longitud\": { \"type\": \"number\" },\r",
															"        \"categoria_id\": { \"type\": \"number\" },\r",
															"        \"ciudad_id\": { \"type\": \"number\" },\r",
															"        \"imagenDTOList\": { \"type\": \"array\",\r",
															"                           \"items\": [{\r",
															"                             \"type\": \"object\",\r",
															"                             \"properties\": {\r",
															"                                \"id\": { \"type\": \"number\" },\r",
															"                                \"url_img_producto\": { \"type\": \"string\" },\r",
															"                                \"titulo_img_producto\": { \"type\": \"string\" },\r",
															"                            }\r",
															"                                    }] \r",
															"                        },\r",
															"        \"caracteristicasDTOList\":{ \"type\": \"array\",\r",
															"                           \"items\": [{\r",
															"                             \"type\": \"object\",\r",
															"                             \"properties\": {\r",
															"                                    \"id\": { \"type\": \"number\" },\r",
															"                                    \"titulo\": { \"type\": \"string\" },\r",
															"                                     \"nombre_icono\": { \"type\": \"string\" },\r",
															"                                   }\r",
															"                                    }] \r",
															"                        },\r",
															"    }\r",
															"};\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"    pm.test(\"Validate schema\", () => {\r",
															"    pm.expect(responseJson[pm.info.iteration]).to.have.jsonSchema(schema);\r",
															"});\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"  \r",
															"    pm.test(\"Validar atributo categoria_id como una de las cuatro categorias solicitadas\", function () {\r",
															"    \r",
															"    pm.expect(responseJson[pm.info.iteration].categoria_id).to.be.oneOf([1, 2, 3, 4]);\r",
															"});\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"    pm.test(\"Validar atributo imagenDTOList como lista no vacia\", function () {\r",
															"    \r",
															"    pm.expect(responseJson[pm.info.iteration].imagenDTOList).to.be.an('array');\r",
															"    pm.expect(responseJson[pm.info.iteration].imagenDTOList.length).to.not.equal(0);\r",
															"  \r",
															"});\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"    pm.test(\"Validar atributo caracteristicasDTOList como lista no vacia\", function () {\r",
															"    \r",
															"    pm.expect(responseJson[pm.info.iteration].caracteristicasDTOList).to.be.an('array');\r",
															"    pm.expect(responseJson[pm.info.iteration].caracteristicasDTOList.length).to.not.equal(0);\r",
															"  \r",
															"});\r",
															"}\r",
															"\r",
															"for (let i = 0; i < responseJson.length; i++) {\r",
															"    pm.test(\"Se espera que los elementos dentro de la respuesta sean objetos\", function () {\r",
															"    \r",
															"    pm.expect(responseJson[pm.info.iteration]).to.be.an('object');\r",
															"});\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{URL_PRODUCTOS}}/porCategoria/{{IDCATEGORIA_GETPRODUCTOS}}",
													"host": [
														"{{URL_PRODUCTOS}}"
													],
													"path": [
														"porCategoria",
														"{{IDCATEGORIA_GETPRODUCTOS}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Obtener productos por id categoria exception",
									"item": [
										{
											"name": "Peticion Get productos por Categoria exception",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"El código de status es 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type header está presente\", () => {\r",
															"  pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type header es application/json\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Length header está presente\", () => {\r",
															"  pm.response.to.have.header(\"Content-Length\");\r",
															"});\r",
															"\r",
															"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
															"  pm.response.to.have.body(\"No se encontraron productos con ésa categoria\");\r",
															"});\r",
															"\r",
															"pm.test(\"La respuesta es un status Not Found\", () => {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{URL_PRODUCTOS}}/porCategoria/{{IDFOREXCEPTION}}",
													"host": [
														"{{URL_PRODUCTOS}}"
													],
													"path": [
														"porCategoria",
														"{{IDFOREXCEPTION}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Obtener productos por disponibilidad",
							"item": [
								{
									"name": "Obtener productos por disponibilidad OK",
									"item": [
										{
											"name": "Obtener productos por disponibilidad",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"La respuesta es un status OK\", () => {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
															"});",
															"",
															"pm.test(\"Se espera que la respuesta sea un array\", () => {",
															"   ",
															"  pm.expect(responseJson).to.be.an(\"array\");",
															"   ",
															"});",
															"",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   pm.test(\"Validar atributo id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"id\");",
															"",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo titulo\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"titulo\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo descripcion\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"descripcion\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo titulo_descripcion\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"titulo_descripcion\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo direccion\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"direccion\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo latitud\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"latitud\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo longitud\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"longitud\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo categoria_id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"categoria_id\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo ciudad_id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"ciudad_id\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo imagenDTOList\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"imagenDTOList\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo caracteristicasDTOList\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"caracteristicasDTOList\");",
															"});",
															"",
															"}",
															"",
															"const schema = {",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"        \"id\": { \"type\": \"number\" },",
															"        \"titulo\": { \"type\": \"string\" },",
															"        \"titulo_descripcion\": { \"type\": \"string\" },",
															"        \"direccion\": { \"type\": \"string\" },",
															"        \"latitud\": { \"type\": \"number\" },",
															"        \"longitud\": { \"type\": \"number\" },",
															"        \"categoria_id\": { \"type\": \"number\" },",
															"        \"ciudad_id\": { \"type\": \"number\" },",
															"        \"imagenDTOList\": { \"type\": \"array\",",
															"                           \"items\": [{",
															"                             \"type\": \"object\",",
															"                             \"properties\": {",
															"                                \"id\": { \"type\": \"number\" },",
															"                                \"url_img_producto\": { \"type\": \"string\" },",
															"                                \"titulo_img_producto\": { \"type\": \"string\" },",
															"                            }",
															"                                    }] ",
															"                        },",
															"        \"caracteristicasDTOList\":{ \"type\": \"array\",",
															"                           \"items\": [{",
															"                             \"type\": \"object\",",
															"                             \"properties\": {",
															"                                    \"id\": { \"type\": \"number\" },",
															"                                    \"titulo\": { \"type\": \"string\" },",
															"                                     \"nombre_icono\": { \"type\": \"string\" },",
															"                                   }",
															"                                    }] ",
															"                        },",
															"    }",
															"};",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validate schema\", () => {",
															"    pm.expect(responseJson[pm.info.iteration]).to.have.jsonSchema(schema);",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"  ",
															"    pm.test(\"Validar atributo categoria_id como una de las cuatro categorias solicitadas\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].categoria_id).to.be.oneOf([1, 2, 3, 4]);",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validar atributo imagenDTOList como lista no vacia\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].imagenDTOList).to.be.an('array');",
															"    pm.expect(responseJson[pm.info.iteration].imagenDTOList.length).to.not.equal(0);",
															"  ",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validar atributo caracteristicasDTOList como lista no vacia\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].caracteristicasDTOList).to.be.an('array');",
															"    pm.expect(responseJson[pm.info.iteration].caracteristicasDTOList.length).to.not.equal(0);",
															"  ",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Se espera que los elementos dentro de la respuesta sean objetos\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration]).to.be.an('object');",
															"});",
															"}",
															"",
															"",
															"  ",
															"pm.test(\"Validar que la lista incluya el producto IDPOST3_PRODUCTO que está disponible en el rango de fechas solicitado\", function () {",
															"    var jsonData = pm.response.json();",
															"    let foundID = jsonData.map(item => item.id);",
															"    pm.expect((pm.collectionVariables.get(\"IDPOST3_PRODUCTO\"))).to.oneOf(foundID);",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"fechaInicioReserva\": \"{{FECHA_INICIO_RESERVA_PRODUCTO1}}\",\n    \"fechaFinReserva\":  \"{{FECHA_FIN_RESERVA_PRODUCTO1}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL_PRODUCTOS}}/disponibles/porFecha",
													"host": [
														"{{URL_PRODUCTOS}}"
													],
													"path": [
														"disponibles",
														"porFecha"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Obtener productos por disponibilidad exception",
									"item": [
										{
											"name": "Obtener productos por disponibilidad  exception 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Validar que la lista NO incluya el producto IDPOST4_PRODUCTO que NO está disponible en el rango de fechas solicitado\", function () {",
															"    var jsonData = pm.response.json();",
															"    let foundID = jsonData.map(item => item.id);",
															"    pm.expect((pm.collectionVariables.get(\"IDPOST4_PRODUCTO\"))).to.not.oneOf(foundID);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"fechaInicioReserva\": \"{{FECHA_INICIO_RESERVA_PRODUCTO1}}\",\n    \"fechaFinReserva\":  \"{{FECHA_FIN_RESERVA_PRODUCTO1}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL_PRODUCTOS}}/disponibles/porFecha",
													"host": [
														"{{URL_PRODUCTOS}}"
													],
													"path": [
														"disponibles",
														"porFecha"
													]
												}
											},
											"response": []
										},
										{
											"name": "Obtener productos por disponibilidad exception 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"fechaInicioReserva\": \"{{FECHA_INICIO_RESERVA_EXCEPTION}}\",\n    \"fechaFinReserva\":  \"{{FECHA_FIN_RESERVA_EXCEPTION}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL_PRODUCTOS}}/disponibles/porFecha",
													"host": [
														"{{URL_PRODUCTOS}}"
													],
													"path": [
														"disponibles",
														"porFecha"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Buscar productos por disponibilidad e id ciudad",
							"item": [
								{
									"name": "Buscar productos por disponibilidad e id ciudad OK",
									"item": [
										{
											"name": "Buscar productos por disponibilidad e id ciudad OK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"La respuesta es un status OK\", () => {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
															"});",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"El ID de la ciudad en cada producto es el mismo que el solicitado en la petición\", () => {",
															"  pm.expect(responseJson[pm.info.iteration].ciudad_id).to.eql(3);",
															"});",
															"",
															"}",
															"",
															"pm.test(\"Se espera que la respuesta sea un array\", () => {",
															"   ",
															"  pm.expect(responseJson).to.be.an(\"array\");",
															"   ",
															"});",
															"",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   pm.test(\"Validar atributo id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"id\");",
															"",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo titulo\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"titulo\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo descripcion\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"descripcion\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo titulo_descripcion\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"titulo_descripcion\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo direccion\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"direccion\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo latitud\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"latitud\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo longitud\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"longitud\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo categoria_id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"categoria_id\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo ciudad_id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"ciudad_id\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo imagenDTOList\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"imagenDTOList\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo caracteristicasDTOList\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"caracteristicasDTOList\");",
															"});",
															"",
															"}",
															"",
															"const schema = {",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"        \"id\": { \"type\": \"number\" },",
															"        \"titulo\": { \"type\": \"string\" },",
															"        \"titulo_descripcion\": { \"type\": \"string\" },",
															"        \"direccion\": { \"type\": \"string\" },",
															"        \"latitud\": { \"type\": \"number\" },",
															"        \"longitud\": { \"type\": \"number\" },",
															"        \"categoria_id\": { \"type\": \"number\" },",
															"        \"ciudad_id\": { \"type\": \"number\" },",
															"        \"imagenDTOList\": { \"type\": \"array\",",
															"                           \"items\": [{",
															"                             \"type\": \"object\",",
															"                             \"properties\": {",
															"                                \"id\": { \"type\": \"number\" },",
															"                                \"url_img_producto\": { \"type\": \"string\" },",
															"                                \"titulo_img_producto\": { \"type\": \"string\" },",
															"                            }",
															"                                    }] ",
															"                        },",
															"        \"caracteristicasDTOList\":{ \"type\": \"array\",",
															"                           \"items\": [{",
															"                             \"type\": \"object\",",
															"                             \"properties\": {",
															"                                    \"id\": { \"type\": \"number\" },",
															"                                    \"titulo\": { \"type\": \"string\" },",
															"                                     \"nombre_icono\": { \"type\": \"string\" },",
															"                                   }",
															"                                    }] ",
															"                        },",
															"    }",
															"};",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validate schema\", () => {",
															"    pm.expect(responseJson[pm.info.iteration]).to.have.jsonSchema(schema);",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"  ",
															"    pm.test(\"Validar atributo categoria_id como una de las cuatro categorias solicitadas\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].categoria_id).to.be.oneOf([1, 2, 3, 4]);",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validar atributo imagenDTOList como lista no vacia\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].imagenDTOList).to.be.an('array');",
															"    pm.expect(responseJson[pm.info.iteration].imagenDTOList.length).to.not.equal(0);",
															"  ",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validar atributo caracteristicasDTOList como lista no vacia\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].caracteristicasDTOList).to.be.an('array');",
															"    pm.expect(responseJson[pm.info.iteration].caracteristicasDTOList.length).to.not.equal(0);",
															"  ",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Se espera que los elementos dentro de la respuesta sean objetos\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration]).to.be.an('object');",
															"});",
															"}",
															"",
															"pm.test(\"Validar que la lista incluya el producto IDPOST3_PRODUCTO que está disponible en el rango de fechas solicitado\", function () {",
															"    var jsonData = pm.response.json();",
															"    let foundID = jsonData.map(item => item.id);",
															"    pm.expect((pm.collectionVariables.get(\"IDPOST3_PRODUCTO\"))).to.oneOf(foundID);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id_ciudad\": 3,\n    \"fechaInicioReserva\": \"{{FECHA_INICIO_RESERVA_PRODUCTO1}}\",\n    \"fechaFinReserva\":  \"{{FECHA_FIN_RESERVA_PRODUCTO1}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL_PRODUCTOS}}/disponibles/porCiudadYFecha",
													"host": [
														"{{URL_PRODUCTOS}}"
													],
													"path": [
														"disponibles",
														"porCiudadYFecha"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Buscar productos por disponibilidad e id ciudad exception",
									"item": [
										{
											"name": "Buscar productos por disponibilidad e id ciudad exception",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"El código de status es 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
															"});",
															"",
															"pm.test(\"Content-Length header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Length\");",
															"});",
															"",
															"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
															"  pm.response.to.have.body(\"No se encontraron productos disponibles en ése rango de fechas\");",
															"});",
															"",
															"pm.test(\"La respuesta es un status Not Found\", () => {",
															"    pm.response.to.have.status(\"Not Found\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id_ciudad\": {{ID_CIUDAD_DISPONIBILIDAD_EXCEPTION}},\n    \"fechaInicioReserva\": \"{{FECHA_INICIO_RESERVA_PRODUCTO1}}\",\n    \"fechaFinReserva\": \"{{FECHA_FIN_RESERVA_PRODUCTO1}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL_PRODUCTOS}}/disponibles/porCiudadYFecha",
													"host": [
														"{{URL_PRODUCTOS}}"
													],
													"path": [
														"disponibles",
														"porCiudadYFecha"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Buscar productos favoritos por usuario id",
							"item": [
								{
									"name": "Buscar productos favoritos por usuario id OK",
									"item": [
										{
											"name": "Buscar productos favoritos por usuario id OK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"La respuesta es un status OK\", () => {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
															"});",
															"",
															"pm.test(\"Se espera que la respuesta sea un array\", () => {",
															"   ",
															"  pm.expect(responseJson).to.be.an(\"array\");",
															"   ",
															"});",
															"",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   pm.test(\"Validar atributo id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"id\");",
															"",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo titulo\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"titulo\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo descripcion\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"descripcion\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo titulo_descripcion\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"titulo_descripcion\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo direccion\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"direccion\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo latitud\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"latitud\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo longitud\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"longitud\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo categoria_id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"categoria_id\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo ciudad_id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"ciudad_id\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo imagenDTOList\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"imagenDTOList\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo caracteristicasDTOList\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"caracteristicasDTOList\");",
															"});",
															"",
															"}",
															"",
															"const schema = {",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"        \"id\": { \"type\": \"number\" },",
															"        \"titulo\": { \"type\": \"string\" },",
															"        \"titulo_descripcion\": { \"type\": \"string\" },",
															"        \"direccion\": { \"type\": \"string\" },",
															"        \"latitud\": { \"type\": \"number\" },",
															"        \"longitud\": { \"type\": \"number\" },",
															"        \"categoria_id\": { \"type\": \"number\" },",
															"        \"ciudad_id\": { \"type\": \"number\" },",
															"        \"imagenDTOList\": { \"type\": \"array\",",
															"                           \"items\": [{",
															"                             \"type\": \"object\",",
															"                             \"properties\": {",
															"                                \"id\": { \"type\": \"number\" },",
															"                                \"url_img_producto\": { \"type\": \"string\" },",
															"                                \"titulo_img_producto\": { \"type\": \"string\" },",
															"                            }",
															"                                    }] ",
															"                        },",
															"        \"caracteristicasDTOList\":{ \"type\": \"array\",",
															"                           \"items\": [{",
															"                             \"type\": \"object\",",
															"                             \"properties\": {",
															"                                    \"id\": { \"type\": \"number\" },",
															"                                    \"titulo\": { \"type\": \"string\" },",
															"                                     \"nombre_icono\": { \"type\": \"string\" },",
															"                                   }",
															"                                    }] ",
															"                        },",
															"    }",
															"};",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validate schema\", () => {",
															"    pm.expect(responseJson[pm.info.iteration]).to.have.jsonSchema(schema);",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"  ",
															"    pm.test(\"Validar atributo categoria_id como una de las cuatro categorias solicitadas\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].categoria_id).to.be.oneOf([1, 2, 3, 4]);",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validar atributo imagenDTOList como lista no vacia\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].imagenDTOList).to.be.an('array');",
															"    pm.expect(responseJson[pm.info.iteration].imagenDTOList.length).to.not.equal(0);",
															"  ",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validar atributo caracteristicasDTOList como lista no vacia\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].caracteristicasDTOList).to.be.an('array');",
															"    pm.expect(responseJson[pm.info.iteration].caracteristicasDTOList.length).to.not.equal(0);",
															"  ",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Se espera que los elementos dentro de la respuesta sean objetos\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration]).to.be.an('object');",
															"});",
															"}",
															"",
															"pm.test(\"Validar que la lista incluya el producto IDPOST3_PRODUCTO que el usuario ID_POST_USUARIO_PRODUCTO ha agregado a favoritos\", function () {",
															"    var jsonData = pm.response.json();",
															"    let foundID = jsonData.map(item => item.id);",
															"    pm.expect((pm.collectionVariables.get(\"IDPOST3_PRODUCTO\"))).to.oneOf(foundID);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{URL_PRODUCTOS}}/favoritosPorIdUsuario/{{ID_POST_USUARIO_PRODUCTO}}",
													"host": [
														"{{URL_PRODUCTOS}}"
													],
													"path": [
														"favoritosPorIdUsuario",
														"{{ID_POST_USUARIO_PRODUCTO}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Buscar productos favoritos por usuario id exception",
									"item": [
										{
											"name": "Buscar productos favoritos por usuario id exception 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"El código de status es 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
															"});",
															"",
															"pm.test(\"Content-Length header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Length\");",
															"});",
															"",
															"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
															"  pm.response.to.have.body(\"No se ha encontrado el usuario con el id indicado\");",
															"});",
															"",
															"pm.test(\"La respuesta es un status Not Found\", () => {",
															"    pm.response.to.have.status(\"Not Found\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{URL_PRODUCTOS}}/favoritosPorIdUsuario/{{IDFOREXCEPTION}}",
													"host": [
														"{{URL_PRODUCTOS}}"
													],
													"path": [
														"favoritosPorIdUsuario",
														"{{IDFOREXCEPTION}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Buscar productos favoritos por usuario id exception 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"El código de status es 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
															"});",
															"",
															"pm.test(\"Content-Length header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Length\");",
															"});",
															"",
															"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
															"  pm.response.to.have.body(\"El usuario no ha agregado ningún producto a sus favoritos\");",
															"});",
															"",
															"pm.test(\"La respuesta es un status Not Found\", () => {",
															"    pm.response.to.have.status(\"Not Found\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{URL_PRODUCTOS}}/favoritosPorIdUsuario/{{ID_POST2_USUARIO_PRODUCTO}}",
													"host": [
														"{{URL_PRODUCTOS}}"
													],
													"path": [
														"favoritosPorIdUsuario",
														"{{ID_POST2_USUARIO_PRODUCTO}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Put - Modificar producto",
					"item": [
						{
							"name": "Modificar producto OK",
							"item": [
								{
									"name": "Modificar producto",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{       \"id\": {{IDPOST_PRODUCTO}},\r\n        \"titulo\": \"Casona\",\r\n        \"titulo_descripcion\": \"{{PUT_DESCRIPCION}}\",\r\n        \"descripcion\": \"Casona\",\r\n        \"direccion\":\"Calle Imaginaria 123\",\r\n        \"latitud\":-8.5,\r\n        \"longitud\":-8.5,\r\n        \"categoria_id\":4,\r\n        \"ciudad_id\":3,\r\n        \"politicaListDTO\": [\r\n        {\r\n            \"id\": 264,\r\n            \"descripcion\": \"No fumar\",\r\n            \"tipo_politica_id\": 1\r\n        },\r\n        {\r\n            \"id\": 265,\r\n            \"descripcion\": \"Con 10 días de anticipacion\",\r\n            \"tipo_politica_id\": 2\r\n        },\r\n        {\r\n            \"id\": 266,\r\n            \"descripcion\": \"Usar barbijo\",\r\n            \"tipo_politica_id\": 3\r\n        }\r\n    ],\r\n    \"imagenDTOList\": [\r\n        {\r\n            \"id\": 166,\r\n            \"url_img_producto\": \"https://t-cf.bstatic.com/xdata/images/hotel/max1024x768/166442884.jpg?k=f038e53f71b03089fec79040cc5504bbc2ddf1d5769325d855baf665fc8fa67e&o=&hp=1\",\r\n            \"titulo_img_producto\": \"Vista interior\"\r\n        },\r\n        {\r\n            \"id\": 167,\r\n            \"url_img_producto\": \"https://t-cf.bstatic.com/xdata/images/hotel/max1024x768/166442884.jpg?k=f038e53f71b03089fec79040cc5504bbc2ddf1d5769325d855baf665fc8fa67e&o=&hp=1\",\r\n            \"titulo_img_producto\": \"Vista camas\"\r\n        },\r\n        {\r\n            \"id\": 168,\r\n            \"url_img_producto\": \"https://t-cf.bstatic.com/xdata/images/hotel/max1024x768/166442884.jpg?k=f038e53f71b03089fec79040cc5504bbc2ddf1d5769325d855baf665fc8fa67e&o=&hp=1\",\r\n            \"titulo_img_producto\": \"Vista cocina\"\r\n        },\r\n        {\r\n            \"id\": 169,\r\n            \"url_img_producto\": \"https://t-cf.bstatic.com/xdata/images/hotel/max1024x768/166442884.jpg?k=f038e53f71b03089fec79040cc5504bbc2ddf1d5769325d855baf665fc8fa67e&o=&hp=1\",\r\n            \"titulo_img_producto\": \"Vista camas\"\r\n        },\r\n        {\r\n            \"id\": 170,\r\n            \"url_img_producto\": \"https://t-cf.bstatic.com/xdata/images/hotel/max1024x768/166442884.jpg?k=f038e53f71b03089fec79040cc5504bbc2ddf1d5769325d855baf665fc8fa67e&o=&hp=1\",\r\n            \"titulo_img_producto\": \"Vista camas\"\r\n        }\r\n    ],\r\n    \"caracteristicasDTOList\": [\r\n        {\r\n            \"id\": 174,\r\n            \"titulo\": \"WiFi\",\r\n            \"nombre_icono\": \"WiFi\"\r\n        },\r\n        {\r\n            \"id\": 175,\r\n            \"titulo\": \"Cocina\",\r\n            \"nombre_icono\": \"Cocina\"\r\n        },\r\n        {\r\n            \"id\": 176,\r\n            \"titulo\": \"Aire acondicionado\",\r\n            \"nombre_icono\": \"airConditioner\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_PRODUCTOS}}/editar",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modificar producto script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto que indica que fue actualizado el producto\", function () {\r",
													"  pm.response.to.have.body(\"UPDATED\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status OK\", () => {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{IDPOST2_PRODUCTO}},\r\n    \"titulo\": \"Hotel Bariloche\",\r\n    \"titulo_descripcion\": \"{{PUT_DESCRIPCION}}\",\r\n    \"descripcion\": \"El hotel mejor ubicado en Bariloche\",\r\n    \"direccion\": \"Calle Imaginaria 123\",\r\n    \"latitud\": -8.5,\r\n    \"longitud\": -8.5,\r\n    \"politicaListDTO\": [\r\n        {\r\n            \"id\": 264,\r\n            \"descripcion\": \"No fumar\",\r\n            \"tipo_politica_id\": 1\r\n        },\r\n        {\r\n            \"id\": 265,\r\n            \"descripcion\": \"Con 10 días de anticipacion\",\r\n            \"tipo_politica_id\": 2\r\n        },\r\n        {\r\n            \"id\": 266,\r\n            \"descripcion\": \"Usar barbijo\",\r\n            \"tipo_politica_id\": 3\r\n        }\r\n    ],\r\n    \"categoria_id\": 4,\r\n    \"ciudad_id\": 3,\r\n    \"imagenDTOList\": [\r\n        {\r\n            \"id\": 166,\r\n            \"url_img_producto\": \"https://t-cf.bstatic.com/xdata/images/hotel/max1024x768/166442884.jpg?k=f038e53f71b03089fec79040cc5504bbc2ddf1d5769325d855baf665fc8fa67e&o=&hp=1\",\r\n            \"titulo_img_producto\": \"Vista interior\"\r\n        },\r\n        {\r\n            \"id\": 167,\r\n            \"url_img_producto\": \"https://t-cf.bstatic.com/xdata/images/hotel/max1024x768/166442884.jpg?k=f038e53f71b03089fec79040cc5504bbc2ddf1d5769325d855baf665fc8fa67e&o=&hp=1\",\r\n            \"titulo_img_producto\": \"Vista camas\"\r\n        },\r\n        {\r\n            \"id\": 168,\r\n            \"url_img_producto\": \"https://t-cf.bstatic.com/xdata/images/hotel/max1024x768/166442884.jpg?k=f038e53f71b03089fec79040cc5504bbc2ddf1d5769325d855baf665fc8fa67e&o=&hp=1\",\r\n            \"titulo_img_producto\": \"Vista cocina\"\r\n        },\r\n        {\r\n            \"id\": 169,\r\n            \"url_img_producto\": \"https://t-cf.bstatic.com/xdata/images/hotel/max1024x768/166442884.jpg?k=f038e53f71b03089fec79040cc5504bbc2ddf1d5769325d855baf665fc8fa67e&o=&hp=1\",\r\n            \"titulo_img_producto\": \"Vista camas\"\r\n        },\r\n        {\r\n            \"id\": 170,\r\n            \"url_img_producto\": \"https://t-cf.bstatic.com/xdata/images/hotel/max1024x768/166442884.jpg?k=f038e53f71b03089fec79040cc5504bbc2ddf1d5769325d855baf665fc8fa67e&o=&hp=1\",\r\n            \"titulo_img_producto\": \"Vista camas\"\r\n        }\r\n    ],\r\n    \"caracteristicasDTOList\": [\r\n        {\r\n            \"id\": 174,\r\n            \"titulo\": \"WiFi\",\r\n            \"nombre_icono\": \"WiFi\"\r\n        },\r\n        {\r\n            \"id\": 175,\r\n            \"titulo\": \"Cocina\",\r\n            \"nombre_icono\": \"Cocina\"\r\n        },\r\n        {\r\n            \"id\": 176,\r\n            \"titulo\": \"Aire acondicionado\",\r\n            \"nombre_icono\": \"airConditioner\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_PRODUCTOS}}/editar",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Modificar producto exception",
							"item": [
								{
									"name": "Modificar producto exception 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"La respuesta es un status Bad Request\", () => {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"El producto debe tener asignada una ciudad y una categoria\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{       \"id\": {{IDPOST_PRODUCTO}},\r\n        \"titulo\": \"Casona\",\r\n        \"titulo_descripcion\": \"{{PUT_DESCRIPCION}}\",\r\n        \"descripcion\": \"Casona\",\r\n        \"puntaje\":8,\r\n        \"direccion\":\"Calle Imaginaria 123\",\r\n        \"latitud\":-8.5,\r\n        \"longitud\":-8.5,\r\n        \"politicaListDTO\": [\r\n            {\"descripcion\": \"No fumar\",\r\n            \"tipo_politica_id\":1},\r\n            {\"descripcion\": \"Con 10 días de anticipacion\",\r\n            \"tipo_politica_id\":2},\r\n            {\"descripcion\": \"Usar barbijo\",\r\n            \"tipo_politica_id\":3}\r\n        ],\r\n        \"categoria_id\":null,\r\n        \"ciudad_id\":3,\r\n        \"reservaDTOList\": [\r\n            {\"fechaInicioReserva\": \"2022-08-03\",\r\n            \"fechaFinReserva\":\"2022-08-08\"},\r\n            {\"fechaInicioReserva\": \"2022-08-15\",\r\n            \"fechaFinReserva\":\"2022-08-20\"},\r\n            {\"fechaInicioReserva\": \"2022-08-25\",\r\n            \"fechaFinReserva\":\"2022-08-30\"}\r\n        ],\r\n        \"imagenDTOList\": [\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista interior\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista cocina\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"}\r\n        ],\r\n        \"caracteristicasDTOList\": [\r\n            {\"titulo\": \"WiFi\",\r\n            \"nombre_icono\":\"WiFi\"},\r\n            {\"titulo\": \"Cocina\",\r\n            \"nombre_icono\":\"Cocina\"},\r\n            {\"titulo\": \"Aire acondicionado\",\r\n            \"nombre_icono\":\"airConditioner\"}\r\n        ]\r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_PRODUCTOS}}/editar",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modificar producto exception 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"La respuesta es un status Bad Request\", () => {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"El producto debe tener asignada una ciudad y una categoria\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{       \"id\": {{IDPOST_PRODUCTO}},\r\n        \"titulo\": \"Casona\",\r\n        \"titulo_descripcion\": \"{{PUT_DESCRIPCION}}\",\r\n        \"descripcion\": \"Casona\",\r\n        \"puntaje\":8,\r\n        \"direccion\":\"Calle Imaginaria 123\",\r\n        \"latitud\":-8.5,\r\n        \"longitud\":-8.5,\r\n        \"politicaListDTO\": [\r\n            {\"descripcion\": \"No fumar\",\r\n            \"tipo_politica_id\":1},\r\n            {\"descripcion\": \"Con 10 días de anticipacion\",\r\n            \"tipo_politica_id\":2},\r\n            {\"descripcion\": \"Usar barbijo\",\r\n            \"tipo_politica_id\":3}\r\n        ],\r\n        \"categoria_id\":3,\r\n        \"ciudad_id\":null,\r\n        \"reservaDTOList\": [\r\n            {\"fechaInicioReserva\": \"2022-08-03\",\r\n            \"fechaFinReserva\":\"2022-08-08\"},\r\n            {\"fechaInicioReserva\": \"2022-08-15\",\r\n            \"fechaFinReserva\":\"2022-08-20\"},\r\n            {\"fechaInicioReserva\": \"2022-08-25\",\r\n            \"fechaFinReserva\":\"2022-08-30\"}\r\n        ],\r\n        \"imagenDTOList\": [\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista interior\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista cocina\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"}\r\n        ],\r\n        \"caracteristicasDTOList\": [\r\n            {\"titulo\": \"WiFi\",\r\n            \"nombre_icono\":\"WiFi\"},\r\n            {\"titulo\": \"Cocina\",\r\n            \"nombre_icono\":\"Cocina\"},\r\n            {\"titulo\": \"Aire acondicionado\",\r\n            \"nombre_icono\":\"airConditioner\"}\r\n        ]\r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_PRODUCTOS}}/editar",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modificar producto exception 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se ha encontrado el producto con ese id\" + pm.collectionVariables.get(\"IDFOREXCEPTION\") );\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"   pm.response.to.have.status(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{       \"id\": {{IDFOREXCEPTION}},\r\n        \"titulo\": \"Casona\",\r\n        \"titulo_descripcion\": \"{{PUT_DESCRIPCION}}\",\r\n        \"descripcion\": \"Casona\",\r\n        \"puntaje\":8,\r\n        \"direccion\":\"Calle Imaginaria 123\",\r\n        \"latitud\":-8.5,\r\n        \"longitud\":-8.5,\r\n        \"politicaListDTO\": [\r\n            {\"descripcion\": \"No fumar\",\r\n            \"tipo_politica_id\":1},\r\n            {\"descripcion\": \"Con 10 días de anticipacion\",\r\n            \"tipo_politica_id\":2},\r\n            {\"descripcion\": \"Usar barbijo\",\r\n            \"tipo_politica_id\":3}\r\n        ],\r\n        \"categoria_id\":4,\r\n        \"ciudad_id\":3,\r\n        \"reservaDTOList\": [\r\n            {\"fechaInicioReserva\": \"2022-08-03\",\r\n            \"fechaFinReserva\":\"2022-08-08\"},\r\n            {\"fechaInicioReserva\": \"2022-08-15\",\r\n            \"fechaFinReserva\":\"2022-08-20\"},\r\n            {\"fechaInicioReserva\": \"2022-08-25\",\r\n            \"fechaFinReserva\":\"2022-08-30\"}\r\n        ],\r\n        \"imagenDTOList\": [\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista interior\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista cocina\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"}\r\n        ],\r\n        \"caracteristicasDTOList\": [\r\n            {\"titulo\": \"WiFi\",\r\n            \"nombre_icono\":\"WiFi\"},\r\n            {\"titulo\": \"Cocina\",\r\n            \"nombre_icono\":\"Cocina\"},\r\n            {\"titulo\": \"Aire acondicionado\",\r\n            \"nombre_icono\":\"airConditioner\"}\r\n        ]\r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_PRODUCTOS}}/editar",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Delete - Eliminar producto",
					"item": [
						{
							"name": "Eliminar producto OK",
							"item": [
								{
									"name": "Eliminar producto",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_PRODUCTOS}}/eliminar/{{IDPOST_PRODUCTO}}",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"eliminar",
												"{{IDPOST_PRODUCTO}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Eliminar producto script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto que indica que fue borrado el producto\", function () {\r",
													"  pm.response.to.have.body(\"DELETED\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_PRODUCTOS}}/eliminar/{{IDPOST2_PRODUCTO}}",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"eliminar",
												"{{IDPOST2_PRODUCTO}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Eliminar producto exception",
							"item": [
								{
									"name": "Eliminar producto exception",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_PRODUCTOS}}/eliminar/{{IDFOREXCEPTION}}",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"eliminar",
												"{{IDFOREXCEPTION}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Eliminar producto exception script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se pudo encontrar el producto a eliminar\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_PRODUCTOS}}/eliminar/{{IDFOREXCEPTION}}",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"eliminar",
												"{{IDFOREXCEPTION}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Aux Copy",
					"item": [
						{
							"name": "Eliminar usuario 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nombre\": \"usuarioprod1\",\n    \"apellido\": \"testingproducto1\",\n    \"email\": \"usuarioprod1@mail.com\",\n    \"password\": \"123456H\",\n    \"ciudad\": null,\n    \"activo\": 0,\n    \"nombre_rol\": \"ROLE_USER\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_USUARIOS}}/eliminar/{{ID_POST_USUARIO_PRODUCTO}}",
									"host": [
										"{{URL_USUARIOS}}"
									],
									"path": [
										"eliminar",
										"{{ID_POST_USUARIO_PRODUCTO}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar usuario 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nombre\": \"usuarioprod2\",\n    \"apellido\": \"testingproducto2\",\n    \"email\": \"usuarioprod2@mail.com\",\n    \"password\": \"123456H\",\n    \"ciudad\": null,\n    \"activo\": 0,\n    \"nombre_rol\": \"ROLE_USER\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_USUARIOS}}/eliminar/{{ID_POST2_USUARIO_PRODUCTO}}",
									"host": [
										"{{URL_USUARIOS}}"
									],
									"path": [
										"eliminar",
										"{{ID_POST2_USUARIO_PRODUCTO}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar producto 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"titulo\": \"Casona\",\r\n        \"titulo_descripcion\": \"{{POST_DESCRIPCION}}\",\r\n        \"descripcion\": \"Casona\",\r\n        \"direccion\":\"Calle Imaginaria 123\",\r\n        \"latitud\":-8.5,\r\n        \"longitud\":-8.5,\r\n        \"politicaListDTO\": [\r\n            {\"descripcion\": \"No fumar\",\r\n            \"tipo_politica_id\":1},\r\n            {\"descripcion\": \"Con 10 días de anticipacion\",\r\n            \"tipo_politica_id\":2},\r\n            {\"descripcion\": \"Usar barbijo\",\r\n            \"tipo_politica_id\":3}\r\n        ],\r\n        \"categoria_id\":4,\r\n        \"ciudad_id\":3,\r\n        \"imagenDTOList\": [\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista interior\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista cocina\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"}\r\n        ],\r\n        \"caracteristicasDTOList\": [\r\n            {\"titulo\": \"WiFi\",\r\n            \"nombre_icono\":\"WiFi\"},\r\n            {\"titulo\": \"Cocina\",\r\n            \"nombre_icono\":\"Cocina\"},\r\n            {\"titulo\": \"Aire acondicionado\",\r\n            \"nombre_icono\":\"airConditioner\"}\r\n        ]\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_PRODUCTOS}}/eliminar/{{IDPOST3_PRODUCTO}}",
									"host": [
										"{{URL_PRODUCTOS}}"
									],
									"path": [
										"eliminar",
										"{{IDPOST3_PRODUCTO}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar producto 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"titulo\": \"Casona\",\r\n        \"titulo_descripcion\": \"{{POST_DESCRIPCION}}\",\r\n        \"descripcion\": \"Casona\",\r\n        \"direccion\":\"Calle Imaginaria 123\",\r\n        \"latitud\":-8.5,\r\n        \"longitud\":-8.5,\r\n        \"politicaListDTO\": [\r\n            {\"descripcion\": \"No fumar\",\r\n            \"tipo_politica_id\":1},\r\n            {\"descripcion\": \"Con 10 días de anticipacion\",\r\n            \"tipo_politica_id\":2},\r\n            {\"descripcion\": \"Usar barbijo\",\r\n            \"tipo_politica_id\":3}\r\n        ],\r\n        \"categoria_id\":4,\r\n        \"ciudad_id\":3,\r\n        \"imagenDTOList\": [\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista interior\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista cocina\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"}\r\n        ],\r\n        \"caracteristicasDTOList\": [\r\n            {\"titulo\": \"WiFi\",\r\n            \"nombre_icono\":\"WiFi\"},\r\n            {\"titulo\": \"Cocina\",\r\n            \"nombre_icono\":\"Cocina\"},\r\n            {\"titulo\": \"Aire acondicionado\",\r\n            \"nombre_icono\":\"airConditioner\"}\r\n        ]\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_PRODUCTOS}}/eliminar/{{IDPOST4_PRODUCTO}}",
									"host": [
										"{{URL_PRODUCTOS}}"
									],
									"path": [
										"eliminar",
										"{{IDPOST4_PRODUCTO}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Ciudades Testing",
			"item": [
				{
					"name": "Post - Agregar ciudad",
					"item": [
						{
							"name": "Agregar ciudad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Setear el ID de la ciudad posteada\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"   pm.collectionVariables.set(\"IDPOST2_CIUDAD\", jsonData);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nombre\": \"{{POST_CIUDAD_NOMBRE}}\",\r\n    \"provincia\": \"{{POST_CIUDAD_PROVINCIA}}\",\r\n    \"pais\": \"{{POST_CIUDAD_PAIS}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_CIUDADES}}/agregar",
									"host": [
										"{{URL_CIUDADES}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar ciudad script tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"console.log(jsonData)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header es application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Testear que el tipo de respuesta sea un el id (tipo number)\", () => {\r",
											"    \r",
											"    pm.expect(jsonData).to.be.a(\"number\");\r",
											"  \r",
											"});\r",
											"\r",
											"pm.test(\"La respuesta es un status OK\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Setear el ID de la ciudad posteada\", () => {\r",
											"    \r",
											"   pm.collectionVariables.set(\"IDPOST_CIUDAD\", jsonData);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nombre\": \"{{POST_CIUDAD_NOMBRE}}\",\r\n    \"provincia\": \"{{POST_CIUDAD_PROVINCIA}}\",\r\n    \"pais\": \"{{POST_CIUDAD_PAIS}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_CIUDADES}}/agregar",
									"host": [
										"{{URL_CIUDADES}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar ciudad exception script tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"El código de status es 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header es application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Length header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
											"  pm.response.to.have.body(\"No se puede agregar una ciudad con campos nulos o vacíos\");\r",
											"});\r",
											"\r",
											"pm.test(\"La respuesta es un status Bad Request\", () => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nombre\": \"{{POST_CIUDAD_NOMBRE}}\",\r\n    \"provincia\": \"{{POST_CIUDAD_PROVINCIA}}\",\r\n    \"pais\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_CIUDADES}}/agregar",
									"host": [
										"{{URL_CIUDADES}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get - Obtener ciudad",
					"item": [
						{
							"name": "Obtener todas las ciudades",
							"item": [
								{
									"name": "Obtener todas las ciudades",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_CIUDADES}}/todas",
											"host": [
												"{{URL_CIUDADES}}"
											],
											"path": [
												"todas"
											]
										}
									},
									"response": []
								},
								{
									"name": "Obtener todas  las ciudades script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo id\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo nombre\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"nombre\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo provincia\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"provincia\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo pais\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pais\");\r",
													"});\r",
													"\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo nombre\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].nombre).to.be.a('string');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo provincia\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].provincia).to.be.a('string');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo pais\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].pais).to.be.a('string');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo id\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].id).to.be.a('number');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Se espera que los elementos dentro de la respuesta sean objetos\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration]).to.be.an('object');\r",
													"});\r",
													"}\r",
													"\r",
													"pm.test(\"Se espera que la respuesta sea un array\", () => {\r",
													"   \r",
													"  pm.expect(responseJson).to.be.an(\"array\");\r",
													"   \r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_CIUDADES}}/todas",
											"host": [
												"{{URL_CIUDADES}}"
											],
											"path": [
												"todas"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Obtener ciudad por id",
							"item": [
								{
									"name": "Obtener ciudad por id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo id\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo nombre\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"nombre\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo provincia\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"provincia\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo pais\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pais\");\r",
													"});\r",
													"\r",
													"pm.test(\"El id está presente y es un numero\", () => {\r",
													"   \r",
													"    pm.expect(responseJson.id).to.be.a('number');\r",
													"        \r",
													"});\r",
													"\r",
													"pm.test(\"El ID es el mismo que el obtenido al hacer el post de la ciudad previamente\", () => {\r",
													"  pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get(\"IDPOST_CIUDAD\")));\r",
													"});\r",
													"\r",
													"pm.test(\"El nombre es un string\", () => {\r",
													"      pm.expect(responseJson.nombre).to.be.a('string');\r",
													"       \r",
													"});\r",
													"\r",
													"pm.test(\"El nombre de la ciudad es el mismo que el enviado al hacer el post de la ciudad previamente\", () => {\r",
													"  pm.expect(responseJson.nombre).to.eql(pm.collectionVariables.get(\"POST_CIUDAD_NOMBRE\"));\r",
													"});\r",
													"\r",
													"pm.test(\"La provincia es un string\", () => {\r",
													"      pm.expect(responseJson.provincia).to.be.a('string');\r",
													"       \r",
													"});\r",
													"\r",
													"pm.test(\"La provincia es la misma que la enviada al hacer el post de la ciudad previamente\", () => {\r",
													"  pm.expect(responseJson.provincia).to.eql(pm.collectionVariables.get(\"POST_CIUDAD_PROVINCIA\"));\r",
													"});\r",
													"\r",
													"pm.test(\"El pais es un string\", () => {\r",
													"      pm.expect(responseJson.pais).to.be.a('string');\r",
													"       \r",
													"});\r",
													"\r",
													"pm.test(\"El pais es el mismo que el enviado al hacer el post de la ciudad previamente\", () => {\r",
													"  pm.expect(responseJson.pais).to.eql(pm.collectionVariables.get(\"POST_CIUDAD_PAIS\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_CIUDADES}}/{{IDPOST_CIUDAD}}",
											"host": [
												"{{URL_CIUDADES}}"
											],
											"path": [
												"{{IDPOST_CIUDAD}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Obtener ciudad por id exception",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se pudo encontrar la ciudad con el id indicado\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_CIUDADES}}/{{IDFOREXCEPTION}}",
											"host": [
												"{{URL_CIUDADES}}"
											],
											"path": [
												"{{IDFOREXCEPTION}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Put - Modificar ciudad",
					"item": [
						{
							"name": "Modificar ciudad OK",
							"item": [
								{
									"name": "Modificar ciudad",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{IDPOST_CIUDAD}},\r\n    \"nombre\": \"{{PUT_CIUDAD_NOMBRE}}\",\r\n    \"provincia\": \"{{POST_CIUDAD_PROVINCIA}}\",\r\n    \"pais\": \"{{POST_CIUDAD_PAIS}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_CIUDADES}}/editar",
											"host": [
												"{{URL_CIUDADES}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modificar ciudad script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto que indica que fue actualizada la ciudad\", function () {\r",
													"  pm.response.to.have.body(\"UPDATED\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status OK\", () => {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{IDPOST2_CIUDAD}},\r\n    \"nombre\": \"{{PUT_CIUDAD_NOMBRE}}\",\r\n    \"provincia\": \"{{POST_CIUDAD_PROVINCIA}}\",\r\n    \"pais\": \"{{POST_CIUDAD_PAIS}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_CIUDADES}}/editar",
											"host": [
												"{{URL_CIUDADES}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Modificar ciudad exception",
							"item": [
								{
									"name": "Modificar ciudad exception",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{IDFOREXCEPTION}},\r\n    \"nombre\": \"{{PUT_CIUDAD_NOMBRE}}\",\r\n    \"provincia\": \"{{POST_CIUDAD_PROVINCIA}}\",\r\n    \"pais\": \"{{POST_CIUDAD_PAIS}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_CIUDADES}}/editar",
											"host": [
												"{{URL_CIUDADES}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modificar ciudad exception script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se pudo encontrar la ciudad para editar\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"   pm.response.to.have.status(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{IDFOREXCEPTION}},\r\n    \"nombre\": \"{{PUT_CIUDAD_NOMBRE}}\",\r\n    \"provincia\": \"{{POST_CIUDAD_PROVINCIA}}\",\r\n    \"pais\": \"{{POST_CIUDAD_PAIS}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_CIUDADES}}/editar",
											"host": [
												"{{URL_CIUDADES}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Delete - Eliminar ciudad",
					"item": [
						{
							"name": "Eliminar ciudad OK",
							"item": [
								{
									"name": "Eliminar ciudad",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_CIUDADES}}/eliminar/{{IDPOST_CIUDAD}}",
											"host": [
												"{{URL_CIUDADES}}"
											],
											"path": [
												"eliminar",
												"{{IDPOST_CIUDAD}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Eliminar ciudad script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto que indica que fue borrada la ciudad\", function () {\r",
													"  pm.response.to.have.body(\"DELETED\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_CIUDADES}}/eliminar/{{IDPOST2_CIUDAD}}",
											"host": [
												"{{URL_CIUDADES}}"
											],
											"path": [
												"eliminar",
												"{{IDPOST2_CIUDAD}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Eliminar ciudad exception",
							"item": [
								{
									"name": "Eliminar ciudad exception",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_CIUDADES}}/eliminar/{{IDFOREXCEPTION}}",
											"host": [
												"{{URL_CIUDADES}}"
											],
											"path": [
												"eliminar",
												"{{IDFOREXCEPTION}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Eliminar ciudad exception script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se pudo encontrar la ciudad a eliminar\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_CIUDADES}}/eliminar/{{IDPOST_CIUDAD}}",
											"host": [
												"{{URL_CIUDADES}}"
											],
											"path": [
												"eliminar",
												"{{IDPOST_CIUDAD}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Reacciones Testing",
			"item": [
				{
					"name": "Aux Inicio",
					"item": [
						{
							"name": "Agregar usuario 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Setear el ID del usuario posteado\", () => {",
											"    const jsonData = pm.response.json();",
											"   pm.collectionVariables.set(\"ID_POST_USUARIO_REACCION\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nombre\": \"usuario1\",\n    \"apellido\": \"testingreacciones1\",\n    \"email\": \"usuario1@mail.com\",\n    \"password\": \"123456H\",\n    \"nombre_rol\": \"ROLE_USER\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_USUARIOS}}/agregar",
									"host": [
										"{{URL_USUARIOS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar producto 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Setear el ID del producto posteado\", () => {",
											"    const jsonData = pm.response.json();",
											"   pm.collectionVariables.set(\"ID_POST_PRODUCTO_REACCION\", jsonData);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"titulo\": \"Producto Reacciones Testing\",\n  \"titulo_descripcion\": \"Alojate en el corazón de Mendoza\",\n  \"descripcion\": \"El Huentala Hotel está situado a solo 600 metros de la plaza de la Independencia y ofrece pileta, gimnasio, habitaciones elegantes con conexión de wifi gratis y TV por cable, restaurante y bebidas de bienvenida.\\nLas habitaciones para no fumadores del Hotel Huentala presentan una decoración en tonos suaves y disponen de aire acondicionado y escritorio.\\nEl Huentala Hotel se encuentra a 2,5 km del parque de San Martín y a 850 metros de la terminal de micros y ofrece recepción 24 horas.\",\n  \"direccion\": \"Primitivo De La Reta, 1007\",\n  \"latitud\": -32.89178474778404,\n  \"longitud\": -68.83809148832445,\n  \"politicaListDTO\": [\n    { \"descripcion\": \"No fumar\", \"tipo_politica_id\": 1 },\n    { \"descripcion\": \"No se permiten mascotas\", \"tipo_politica_id\": 1 },\n    { \"descripcion\": \"Check-in: 15:00 horas\", \"tipo_politica_id\": 1 },\n    { \"descripcion\": \"Check-out: 11:00 horas\", \"tipo_politica_id\": 1 },\n    {\n      \"descripcion\": \"Se aplican las pautas de distanciamiento social y normas de higiene para prevenir contagios por coronavirus\",\n      \"tipo_politica_id\": 2\n    },\n    { \"descripcion\": \"Detector de humo\", \"tipo_politica_id\": 2 },\n    { \"descripcion\": \"Alarma\", \"tipo_politica_id\": 2 },\n    {\n      \"descripcion\": \"Si cancelas dentro de las 48 horas previas al comienzo de tu reserva abonarás como penalidad el valor de una noche.\",\n      \"tipo_politica_id\": 3\n    }\n  ],\n  \"categoria_id\": 1,\n  \"ciudad_id\": 1,\n  \"imagenDTOList\": [\n    {\n      \"url_img_producto\": \"https://img-g2.s3.amazonaws.com/productos/005-001.jpg\",\n      \"titulo_img_producto\": \"Habitación doble\"\n    },\n    {\n      \"url_img_producto\": \"https://img-g2.s3.amazonaws.com/productos/005-002.jpg\",\n      \"titulo_img_producto\": \"Living del hotel y sala común\"\n    },\n    {\n      \"url_img_producto\": \"https://img-g2.s3.amazonaws.com/productos/005-003.jpg\",\n      \"titulo_img_producto\": \"Pileta del hotel\"\n    },\n    {\n      \"url_img_producto\": \"https://img-g2.s3.amazonaws.com/productos/005-004.jpg\",\n      \"titulo_img_producto\": \"Ascensor y vestíbulo del hotel\"\n    },\n    {\n      \"url_img_producto\": \"https://img-g2.s3.amazonaws.com/productos/005-005.jpg\",\n      \"titulo_img_producto\": \"Habitación con living\"\n    }\n  ],\n  \"caracteristicasDTOList\": [\n    { \"titulo\": \"Aire Acondicionado\", \"nombre_icono\": \"airConditioner\" },\n    { \"titulo\": \"Gimnasio\", \"nombre_icono\": \"gym\" },\n    { \"titulo\": \"Wifi\", \"nombre_icono\": \"wifi\" },\n    { \"titulo\": \"Television\", \"nombre_icono\": \"television\" },\n    { \"titulo\": \"Piscina\", \"nombre_icono\": \"swim\" },\n    { \"titulo\": \"Recepción 24 Horas\", \"nombre_icono\": \"reception\" }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_PRODUCTOS}}/agregar",
									"host": [
										"{{URL_PRODUCTOS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar usuario 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Setear el ID del usuario posteado\", () => {",
											"    const jsonData = pm.response.json();",
											"   pm.collectionVariables.set(\"ID_POST2_USUARIO_REACCION\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nombre\": \"usuario2\",\n    \"apellido\": \"testingreacciones2\",\n    \"email\": \"usuario2@mail.com\",\n    \"password\": \"123456H\",\n    \"nombre_rol\": \"ROLE_USER\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_USUARIOS}}/agregar",
									"host": [
										"{{URL_USUARIOS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar producto 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Setear el ID del producto posteado\", () => {",
											"    const jsonData = pm.response.json();",
											"   pm.collectionVariables.set(\"ID_POST2_PRODUCTO_REACCION\", jsonData);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"titulo\": \"Producto Reacciones Testing 2\",\n  \"titulo_descripcion\": \"Alojate en el corazón de Mendoza\",\n  \"descripcion\": \"El Huentala Hotel está situado a solo 600 metros de la plaza de la Independencia y ofrece pileta, gimnasio, habitaciones elegantes con conexión de wifi gratis y TV por cable, restaurante y bebidas de bienvenida.\\nLas habitaciones para no fumadores del Hotel Huentala presentan una decoración en tonos suaves y disponen de aire acondicionado y escritorio.\\nEl Huentala Hotel se encuentra a 2,5 km del parque de San Martín y a 850 metros de la terminal de micros y ofrece recepción 24 horas.\",\n  \"direccion\": \"Primitivo De La Reta, 1007\",\n  \"latitud\": -32.89178474778404,\n  \"longitud\": -68.83809148832445,\n  \"politicaListDTO\": [\n    { \"descripcion\": \"No fumar\", \"tipo_politica_id\": 1 },\n    { \"descripcion\": \"No se permiten mascotas\", \"tipo_politica_id\": 1 },\n    { \"descripcion\": \"Check-in: 15:00 horas\", \"tipo_politica_id\": 1 },\n    { \"descripcion\": \"Check-out: 11:00 horas\", \"tipo_politica_id\": 1 },\n    {\n      \"descripcion\": \"Se aplican las pautas de distanciamiento social y normas de higiene para prevenir contagios por coronavirus\",\n      \"tipo_politica_id\": 2\n    },\n    { \"descripcion\": \"Detector de humo\", \"tipo_politica_id\": 2 },\n    { \"descripcion\": \"Alarma\", \"tipo_politica_id\": 2 },\n    {\n      \"descripcion\": \"Si cancelas dentro de las 48 horas previas al comienzo de tu reserva abonarás como penalidad el valor de una noche.\",\n      \"tipo_politica_id\": 3\n    }\n  ],\n  \"categoria_id\": 1,\n  \"ciudad_id\": 1,\n  \"imagenDTOList\": [\n    {\n      \"url_img_producto\": \"https://img-g2.s3.amazonaws.com/productos/005-001.jpg\",\n      \"titulo_img_producto\": \"Habitación doble\"\n    },\n    {\n      \"url_img_producto\": \"https://img-g2.s3.amazonaws.com/productos/005-002.jpg\",\n      \"titulo_img_producto\": \"Living del hotel y sala común\"\n    },\n    {\n      \"url_img_producto\": \"https://img-g2.s3.amazonaws.com/productos/005-003.jpg\",\n      \"titulo_img_producto\": \"Pileta del hotel\"\n    },\n    {\n      \"url_img_producto\": \"https://img-g2.s3.amazonaws.com/productos/005-004.jpg\",\n      \"titulo_img_producto\": \"Ascensor y vestíbulo del hotel\"\n    },\n    {\n      \"url_img_producto\": \"https://img-g2.s3.amazonaws.com/productos/005-005.jpg\",\n      \"titulo_img_producto\": \"Habitación con living\"\n    }\n  ],\n  \"caracteristicasDTOList\": [\n    { \"titulo\": \"Aire Acondicionado\", \"nombre_icono\": \"airConditioner\" },\n    { \"titulo\": \"Gimnasio\", \"nombre_icono\": \"gym\" },\n    { \"titulo\": \"Wifi\", \"nombre_icono\": \"wifi\" },\n    { \"titulo\": \"Television\", \"nombre_icono\": \"television\" },\n    { \"titulo\": \"Piscina\", \"nombre_icono\": \"swim\" },\n    { \"titulo\": \"Recepción 24 Horas\", \"nombre_icono\": \"reception\" }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_PRODUCTOS}}/agregar",
									"host": [
										"{{URL_PRODUCTOS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Post - Agregar Reacción",
					"item": [
						{
							"name": "Agregar reacción OK",
							"item": [
								{
									"name": "Agregar reacción",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Setear el ID de la reaccion posteada\", () => {",
													"    const jsonData = pm.response.json();",
													"   pm.collectionVariables.set(\"ID_POST2_REACCION\", jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"favorito\": true,\n    \"producto_id\": {{ID_POST_PRODUCTO_REACCION}},\n    \"usuario_id\": {{ID_POST_USUARIO_REACCION}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{LOCAL_URL_REACCIONES}}/agregar",
											"host": [
												"{{LOCAL_URL_REACCIONES}}"
											],
											"path": [
												"agregar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Agregar reacción script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"console.log(jsonData)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type header es application/json\", () => {",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"});",
													"",
													"pm.test(\"Testear que el tipo de respuesta sea un el id (tipo number)\", () => {",
													"    ",
													"    pm.expect(jsonData).to.be.a(\"number\");",
													"  ",
													"});",
													"",
													"pm.test(\"La respuesta es un status OK\", () => {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"pm.test(\"Setear el ID de la reacción posteada\", () => {",
													"    ",
													"   pm.collectionVariables.set(\"ID_POST_REACCION\", jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"favorito\": true,\n    \"producto_id\": {{ID_POST2_PRODUCTO_REACCION}},\n    \"usuario_id\": {{ID_POST2_USUARIO_REACCION}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{LOCAL_URL_REACCIONES}}/agregar",
											"host": [
												"{{LOCAL_URL_REACCIONES}}"
											],
											"path": [
												"agregar"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Agregar reacción exception",
							"item": [
								{
									"name": "Agregar reacción exception 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Content-Type header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type header es application/json\", () => {",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
													"});",
													"",
													"",
													"pm.test(\"Content-Length header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Length\");",
													"});",
													"",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
													"  pm.response.to.have.body(\"El usuario ya ha agregado este producto a favoritos\");",
													"});",
													"",
													"pm.test(\"La respuesta es un status Bad Request\", () => {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"favorito\": true,\n    \"producto_id\": {{ID_POST2_PRODUCTO_REACCION}},\n    \"usuario_id\": {{ID_POST2_USUARIO_REACCION}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{LOCAL_URL_REACCIONES}}/agregar",
											"host": [
												"{{LOCAL_URL_REACCIONES}}"
											],
											"path": [
												"agregar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Agregar reacción exception 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Content-Type header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type header es application/json\", () => {",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
													"});",
													"",
													"",
													"pm.test(\"Content-Length header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Length\");",
													"});",
													"",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
													"  pm.response.to.have.body(\"Una reacción debe tener un id de usuario y un id de producto asignado\");",
													"});",
													"",
													"pm.test(\"La respuesta es un status Bad Request\", () => {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"favorito\": true,\n    \"producto_id\": {{ID_POST2_PRODUCTO_REACCION}},\n    \"usuario_id\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{LOCAL_URL_REACCIONES}}/agregar",
											"host": [
												"{{LOCAL_URL_REACCIONES}}"
											],
											"path": [
												"agregar"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Get - Obtener reacción",
					"item": [
						{
							"name": "Obtener todas las reacciones",
							"item": [
								{
									"name": "Obtener todas las reacciones OK",
									"item": [
										{
											"name": "Obtener todas las reacciones",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_REACCIONES}}/todas",
													"host": [
														"{{LOCAL_URL_REACCIONES}}"
													],
													"path": [
														"todas"
													]
												}
											},
											"response": []
										},
										{
											"name": "Obtener todas las reacciones script tests",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"La respuesta es un status OK\", () => {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
															"});",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   pm.test(\"Validar atributo id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"id\");",
															"",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo favorito\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"favorito\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo usuario_id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"usuario_id\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo producto_id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"producto_id\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validar atributo id\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].id).to.be.a('number');",
															"  ",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"  ",
															"    pm.test(\"Validar atributo favorito como true o false\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].favorito).to.be.oneOf([true, false]);",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validar atributo favorito\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].favorito).to.be.a('boolean');",
															"  ",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validar atributo usuario_id\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].usuario_id).to.be.a('number');",
															"  ",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validar atributo producto_id\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].producto_id).to.be.a('number');",
															"  ",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Se espera que los elementos dentro de la respuesta sean objetos\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration]).to.be.an('object');",
															"});",
															"}",
															"",
															"pm.test(\"Se espera que la respuesta sea un array\", () => {",
															"   ",
															"  pm.expect(responseJson).to.be.an(\"array\");",
															"   ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_REACCIONES}}/todas",
													"host": [
														"{{LOCAL_URL_REACCIONES}}"
													],
													"path": [
														"todas"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Obtener todas las reacciones exception",
									"item": []
								}
							]
						},
						{
							"name": "Obtener reacción por id",
							"item": [
								{
									"name": "Obtener reacción por id OK",
									"item": [
										{
											"name": "Obtener reacción por id",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_REACCIONES}}/{{ID_POST_REACCION}}",
													"host": [
														"{{LOCAL_URL_REACCIONES}}"
													],
													"path": [
														"{{ID_POST_REACCION}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Obtener reacción por id script tests",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"La respuesta es un status OK\", () => {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
															"});",
															"",
															"   pm.test(\"Validar atributo id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"id\");",
															"",
															"});",
															"",
															"pm.test(\"Validar atributo favorito\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"favorito\");",
															"});",
															"",
															"pm.test(\"Validar atributo usuario_id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"usuario_id\");",
															"});",
															"",
															"pm.test(\"Validar atributo producto_id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"producto_id\");",
															"});",
															"",
															"pm.test(\"Validar atributo id como number\", function () {",
															"    ",
															"    pm.expect(responseJson.id).to.be.a('number');",
															"  ",
															"});",
															"",
															"pm.test(\"Validar atributo favorito como boolean\", function () {",
															"    ",
															"    pm.expect(responseJson.favorito).to.be.a('boolean');",
															"  ",
															"});",
															"",
															"pm.test(\"Validar atributo favorito como boolean\", function () {",
															"    ",
															"    pm.expect(responseJson.favorito).to.be.oneOf([true, false]);",
															"  ",
															"});",
															"",
															" pm.test(\"Validar atributo usuario_id\", function () {",
															"    ",
															"    pm.expect(responseJson.usuario_id).to.be.a('number');",
															"  ",
															"});",
															"",
															"  pm.test(\"Validar atributo producto_id\", function () {",
															"    ",
															"    pm.expect(responseJson.producto_id).to.be.a('number');",
															"  ",
															"});",
															"",
															"pm.test(\"El ID es el mismo que el obtenido al hacer el post de la reaccion previamente\", () => {",
															"  pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get(\"ID_POST2_REACCION\")));",
															"});",
															"",
															"pm.test(\"El ID de usuario es el mismo que el ingresado al hacer el post de la reaccion previamente\", () => {",
															"  pm.expect(responseJson.usuario_id).to.eql(parseInt(pm.collectionVariables.get(\"ID_POST_USUARIO_REACCION\")));",
															"});",
															"",
															"pm.test(\"El ID de producto es el mismo que el ingresado al hacer el post de la reaccion previamente\", () => {",
															"  pm.expect(responseJson.producto_id).to.eql(parseInt(pm.collectionVariables.get(\"ID_POST_PRODUCTO_REACCION\")));",
															"});",
															"",
															"pm.test(\"Se espera que el elemento de respuesta sea un objeto\", function () {",
															"    ",
															"    pm.expect(responseJson).to.be.an('object');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_REACCIONES}}/{{ID_POST2_REACCION}}",
													"host": [
														"{{LOCAL_URL_REACCIONES}}"
													],
													"path": [
														"{{ID_POST2_REACCION}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Obtener reacción por id exception",
									"item": [
										{
											"name": "Obtener reacción por id exception",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"El código de status es 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
															"});",
															"",
															"pm.test(\"Content-Length header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Length\");",
															"});",
															"",
															"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
															"  pm.response.to.have.body(\"No se pudo encontrar la reacción con el ID indicado\");",
															"});",
															"",
															"pm.test(\"La respuesta es un status Not Found\", () => {",
															"    pm.response.to.have.status(\"Not Found\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_REACCIONES}}/{{ID_EXCEPTION}}",
													"host": [
														"{{LOCAL_URL_REACCIONES}}"
													],
													"path": [
														"{{ID_EXCEPTION}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Obtener todas las reacciones por id usuario",
							"item": [
								{
									"name": "Obtener todas las reacciones por id usuario OK",
									"item": [
										{
											"name": "Obtener reacciones por id de usuario",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_REACCIONES}}/porUsuario/{{ID_POST_USUARIO_REACCION}}",
													"host": [
														"{{LOCAL_URL_REACCIONES}}"
													],
													"path": [
														"porUsuario",
														"{{ID_POST_USUARIO_REACCION}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Obtener reacciones por id de usuario script tests",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"La respuesta es un status OK\", () => {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
															"});",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"El ID del usuario de cada producto es el mismo que el solicitado en la petición\", () => {",
															"  pm.expect(responseJson[pm.info.iteration].usuario_id).to.eql(parseInt(pm.collectionVariables.get(\"ID_POST2_USUARIO_REACCION\")));",
															"});",
															"",
															"}",
															"",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   pm.test(\"Validar atributo id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"id\");",
															"",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo favorito\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"favorito\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo usuario_id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"usuario_id\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo producto_id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"producto_id\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validar atributo id\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].id).to.be.a('number');",
															"  ",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"  ",
															"    pm.test(\"Validar atributo favorito como true o false\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].favorito).to.be.oneOf([true, false]);",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validar atributo favorito\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].favorito).to.be.a('boolean');",
															"  ",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validar atributo usuario_id\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].usuario_id).to.be.a('number');",
															"  ",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validar atributo producto_id\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].producto_id).to.be.a('number');",
															"  ",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validar que el id de usuario de todas las reacciones de la lista sea el solicitado al realizar la petición\", function () {",
															"    ",
															"     pm.expect(responseJson[pm.info.iteration].usuario_id).to.eql(parseInt(pm.collectionVariables.get(\"ID_POST2_USUARIO_REACCION\")));",
															"  ",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Se espera que los elementos dentro de la respuesta sean objetos\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration]).to.be.an('object');",
															"});",
															"}",
															"",
															"pm.test(\"Se espera que la respuesta sea un array\", () => {",
															"   ",
															"  pm.expect(responseJson).to.be.an(\"array\");",
															"   ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_REACCIONES}}/porUsuario/{{ID_POST2_USUARIO_REACCION}}",
													"host": [
														"{{LOCAL_URL_REACCIONES}}"
													],
													"path": [
														"porUsuario",
														"{{ID_POST2_USUARIO_REACCION}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Obtener todas las reacciones por id usuario exception",
									"item": [
										{
											"name": "Obtener reacciones por id de usuario exception",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"El código de status es 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
															"});",
															"",
															"pm.test(\"Content-Length header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Length\");",
															"});",
															"",
															"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
															"  pm.response.to.have.body(\"No se ha encontrado el usuario con el id indicado\");",
															"});",
															"",
															"pm.test(\"La respuesta es un status Not Found\", () => {",
															"    pm.response.to.have.status(\"Not Found\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_REACCIONES}}/porUsuario/{{ID_EXCEPTION}}",
													"host": [
														"{{LOCAL_URL_REACCIONES}}"
													],
													"path": [
														"porUsuario",
														"{{ID_EXCEPTION}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Obtener reacción por id de usuario y id producto",
							"item": [
								{
									"name": "Obtener reacción por id de usuario y id producto OK",
									"item": [
										{
											"name": "Obtener reacción por id de usuario y id de producto",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_REACCIONES}}/porProducto/{{ID_POST_PRODUCTO_REACCION}}/porUsuario/{{ID_POST_USUARIO_REACCION}}",
													"host": [
														"{{LOCAL_URL_REACCIONES}}"
													],
													"path": [
														"porProducto",
														"{{ID_POST_PRODUCTO_REACCION}}",
														"porUsuario",
														"{{ID_POST_USUARIO_REACCION}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Obtener reacción por id de usuario y id de producto script tests",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"La respuesta es un status OK\", () => {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
															"});",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Se espera que los elementos dentro de la respuesta sean objetos\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration]).to.be.an('object');",
															"});",
															"}",
															"",
															"pm.test(\"Validar atributo id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"id\");",
															"",
															"});",
															"",
															"pm.test(\"Validar atributo favorito\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"favorito\");",
															"});",
															"",
															"pm.test(\"Validar atributo usuario_id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"usuario_id\");",
															"});",
															"",
															"pm.test(\"Validar atributo producto_id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"producto_id\");",
															"});",
															"",
															"pm.test(\"Validar atributo id como number\", function () {",
															"    ",
															"    pm.expect(responseJson.id).to.be.a('number');",
															"  ",
															"});",
															"",
															"pm.test(\"Validar atributo favorito como boolean\", function () {",
															"    ",
															"    pm.expect(responseJson.favorito).to.be.a('boolean');",
															"  ",
															"});",
															"",
															"pm.test(\"Validar atributo favorito como boolean\", function () {",
															"    ",
															"    pm.expect(responseJson.favorito).to.be.oneOf([true, false]);",
															"  ",
															"});",
															"",
															" pm.test(\"Validar atributo usuario_id\", function () {",
															"    ",
															"    pm.expect(responseJson.usuario_id).to.be.a('number');",
															"  ",
															"});",
															"",
															"  pm.test(\"Validar atributo producto_id\", function () {",
															"    ",
															"    pm.expect(responseJson.producto_id).to.be.a('number');",
															"  ",
															"});",
															"",
															"pm.test(\"El ID de reacción es el mismo que el obtenido al hacer el post de la reacción previamente\", () => {",
															"  pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get(\"ID_POST_REACCION\")));",
															"});",
															"",
															"pm.test(\"El ID de producto es el solicitado\", () => {",
															"  pm.expect(responseJson.producto_id).to.eql(parseInt(pm.collectionVariables.get(\"ID_POST2_PRODUCTO_REACCION\")));",
															"});",
															"",
															"pm.test(\"El ID de usuario es el solicitado\", () => {",
															"  pm.expect(responseJson.usuario_id).to.eql(parseInt(pm.collectionVariables.get(\"ID_POST2_USUARIO_REACCION\")));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_REACCIONES}}/porProducto/{{ID_POST2_PRODUCTO_REACCION}}/porUsuario/{{ID_POST2_USUARIO_REACCION}}",
													"host": [
														"{{LOCAL_URL_REACCIONES}}"
													],
													"path": [
														"porProducto",
														"{{ID_POST2_PRODUCTO_REACCION}}",
														"porUsuario",
														"{{ID_POST2_USUARIO_REACCION}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Obtener reacción por id de usuario y id producto exception",
									"item": [
										{
											"name": "Obtener reacción por id de usuario y id de producto exception 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"El código de status es 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
															"});",
															"",
															"pm.test(\"Content-Length header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Length\");",
															"});",
															"",
															"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
															"  pm.response.to.have.body(\"No se ha encontrado el usuario con el ID indicado\");",
															"});",
															"",
															"pm.test(\"La respuesta es un status Not Found\", () => {",
															"    pm.response.to.have.status(\"Not Found\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_REACCIONES}}/porProducto/{{ID_POST_PRODUCTO_REACCION}}/porUsuario/{{ID_EXCEPTION}}",
													"host": [
														"{{LOCAL_URL_REACCIONES}}"
													],
													"path": [
														"porProducto",
														"{{ID_POST_PRODUCTO_REACCION}}",
														"porUsuario",
														"{{ID_EXCEPTION}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Obtener reacción por id de usuario y id de producto exception 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"El código de status es 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
															"});",
															"",
															"pm.test(\"Content-Length header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Length\");",
															"});",
															"",
															"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
															"  pm.response.to.have.body(\"No se ha encontrado el producto con el ID indicado\");",
															"});",
															"",
															"pm.test(\"La respuesta es un status Not Found\", () => {",
															"    pm.response.to.have.status(\"Not Found\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_REACCIONES}}/porProducto/{{ID_EXCEPTION}}/porUsuario/{{ID_POST_USUARIO_REACCION}}",
													"host": [
														"{{LOCAL_URL_REACCIONES}}"
													],
													"path": [
														"porProducto",
														"{{ID_EXCEPTION}}",
														"porUsuario",
														"{{ID_POST_USUARIO_REACCION}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Put - Modificar reaccion",
					"item": [
						{
							"name": "Modificar reacción OK",
							"item": [
								{
									"name": "Modificar reacción",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{ID_POST_REACCION}},\n    \"favorito\":false,\n    \"producto_id\": {{ID_POST2_PRODUCTO_REACCION}},\n    \"usuario_id\":{{ID_POST2_USUARIO_REACCION}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{LOCAL_URL_REACCIONES}}/editar",
											"host": [
												"{{LOCAL_URL_REACCIONES}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modificar reacción script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type header es application/json\", () => {",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
													"});",
													"",
													"pm.test(\"Body de respuesta es un texto que indica que fue actualizada la reacción\", function () {",
													"  pm.response.to.have.body(\"UPDATED\");",
													"});",
													"",
													"pm.test(\"La respuesta es un status OK\", () => {",
													"    pm.response.to.have.status(\"OK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{ID_POST2_REACCION}},\n    \"favorito\": false,\n    \"producto_id\": {{ID_POST_PRODUCTO_REACCION}},\n    \"usuario_id\":{{ID_POST_USUARIO_REACCION}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{LOCAL_URL_REACCIONES}}/editar",
											"host": [
												"{{LOCAL_URL_REACCIONES}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Modificar reacción exception",
							"item": [
								{
									"name": "Modificar reacción exception 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Content-Type header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type header es application/json\", () => {",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
													"});",
													"",
													"pm.test(\"Content-Length header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Length\");",
													"});",
													"",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
													"  pm.response.to.have.body(\"No se pudo encontrar la reacción para editar\");",
													"});",
													"",
													"pm.test(\"La respuesta es un status Not Found\", () => {",
													"    pm.response.to.have.status(\"Not Found\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{ID_EXCEPTION}},\n    \"favorito\":false,\n    \"producto_id\": {{ID_POST2_PRODUCTO_REACCION}},\n    \"usuario_id\":{{ID_POST2_USUARIO_REACCION}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{LOCAL_URL_REACCIONES}}/editar",
											"host": [
												"{{LOCAL_URL_REACCIONES}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modificar reacción exception 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Content-Type header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type header es application/json\", () => {",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
													"});",
													"",
													"pm.test(\"Content-Length header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Length\");",
													"});",
													"",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
													"  pm.response.to.have.body(\"La reacción a editar debe tener asignado un producto y un usuario\");",
													"});",
													"",
													"pm.test(\"La respuesta es un status Bad Request\", () => {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{ID_POST_REACCION}},\n    \"favorito\":false,\n    \"producto_id\": {{ID_POST2_PRODUCTO_REACCION}},\n    \"usuario_id\":null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{LOCAL_URL_REACCIONES}}/editar",
											"host": [
												"{{LOCAL_URL_REACCIONES}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modificar reacción exception 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Content-Type header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type header es application/json\", () => {",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
													"});",
													"",
													"pm.test(\"Content-Length header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Length\");",
													"});",
													"",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
													"  pm.response.to.have.body(\"La reacción a editar debe tener asignado un producto y un usuario\");",
													"});",
													"",
													"pm.test(\"La respuesta es un status Bad Request\", () => {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{ID_POST_REACCION}},\n    \"favorito\":false,\n    \"producto_id\": null,\n    \"usuario_id\":{{ID_POST2_USUARIO_REACCION}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{LOCAL_URL_REACCIONES}}/editar",
											"host": [
												"{{LOCAL_URL_REACCIONES}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Delete - Eliminar reacción",
					"item": [
						{
							"name": "Eliminar reacción por id",
							"item": [
								{
									"name": "Eliminar reacción por id OK",
									"item": [
										{
											"name": "Eliminar reacción por id script tests",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"El código de status es 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
															"});",
															"",
															"pm.test(\"Body de respuesta es un texto que indica que fue borrada la reacción\", function () {",
															"  pm.response.to.have.body(\"DELETED\");",
															"});",
															"",
															"pm.test(\"La respuesta es un status OK\", () => {",
															"  pm.response.to.have.status(\"OK\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_REACCIONES}}/eliminar/{{ID_POST2_REACCION}}",
													"host": [
														"{{LOCAL_URL_REACCIONES}}"
													],
													"path": [
														"eliminar",
														"{{ID_POST2_REACCION}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Eliminar reacción por id exception",
									"item": [
										{
											"name": "Eliminar reacción por id exception",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"El código de status es 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
															"});",
															"",
															"pm.test(\"Content-Length header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Length\");",
															"});",
															"",
															"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
															"  pm.response.to.have.body(\"No se pudo encontrar la reacción a eliminar\");",
															"});",
															"",
															"pm.test(\"La respuesta es un status Not Found\", () => {",
															"    pm.response.to.have.status(\"Not Found\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_REACCIONES}}/eliminar/{{ID_EXCEPTION}}",
													"host": [
														"{{LOCAL_URL_REACCIONES}}"
													],
													"path": [
														"eliminar",
														"{{ID_EXCEPTION}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Eliminar reacción por id de usuario e id de producto",
							"item": [
								{
									"name": "Eliminar reacción por id de usuario e id de producto OK",
									"item": [
										{
											"name": "Eliminar reacción por id de usuario e id de producto",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"El código de status es 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
															"});",
															"",
															"pm.test(\"Body de respuesta es un texto que indica que fue borrada la reacción\", function () {",
															"  pm.response.to.have.body(\"DELETED\");",
															"});",
															"",
															"pm.test(\"La respuesta es un status OK\", () => {",
															"  pm.response.to.have.status(\"OK\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_REACCIONES}}/eliminar/porProducto/{{ID_POST2_PRODUCTO_REACCION}}/porUsuario/{{ID_POST2_USUARIO_REACCION}}",
													"host": [
														"{{LOCAL_URL_REACCIONES}}"
													],
													"path": [
														"eliminar",
														"porProducto",
														"{{ID_POST2_PRODUCTO_REACCION}}",
														"porUsuario",
														"{{ID_POST2_USUARIO_REACCION}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Eliminar reacción por id de usuario e id de producto exception",
									"item": [
										{
											"name": "Eliminar reacción por id de usuario e id de producto exception",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"El código de status es 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
															"});",
															"",
															"pm.test(\"Content-Length header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Length\");",
															"});",
															"",
															"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
															"  pm.response.to.have.body(\"No se ha encontrado el producto con el ID indicado\");",
															"});",
															"",
															"pm.test(\"La respuesta es un status Not Found\", () => {",
															"    pm.response.to.have.status(\"Not Found\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_REACCIONES}}/eliminar/porProducto/{{ID_EXCEPTION}}/porUsuario/{{ID_POST2_USUARIO_REACCION}}",
													"host": [
														"{{LOCAL_URL_REACCIONES}}"
													],
													"path": [
														"eliminar",
														"porProducto",
														"{{ID_EXCEPTION}}",
														"porUsuario",
														"{{ID_POST2_USUARIO_REACCION}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Eliminar reacción por id de usuario e id de producto exception Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"El código de status es 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
															"});",
															"",
															"pm.test(\"Content-Length header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Length\");",
															"});",
															"",
															"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
															"  pm.response.to.have.body(\"No se ha encontrado el usuario con el ID indicado\");",
															"});",
															"",
															"pm.test(\"La respuesta es un status Not Found\", () => {",
															"    pm.response.to.have.status(\"Not Found\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_REACCIONES}}/eliminar/porProducto/{{ID_POST2_PRODUCTO_REACCION}}/porUsuario/{{ID_EXCEPTION}}",
													"host": [
														"{{LOCAL_URL_REACCIONES}}"
													],
													"path": [
														"eliminar",
														"porProducto",
														"{{ID_POST2_PRODUCTO_REACCION}}",
														"porUsuario",
														"{{ID_EXCEPTION}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Aux Final",
					"item": [
						{
							"name": "Eliminar usuario 1",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL_USUARIOS}}/eliminar/{{ID_POST_USUARIO_REACCION}}",
									"host": [
										"{{URL_USUARIOS}}"
									],
									"path": [
										"eliminar",
										"{{ID_POST_USUARIO_REACCION}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar producto 1",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL_PRODUCTOS}}/eliminar/{{ID_POST_PRODUCTO_REACCION}}",
									"host": [
										"{{URL_PRODUCTOS}}"
									],
									"path": [
										"eliminar",
										"{{ID_POST_PRODUCTO_REACCION}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar producto 2",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL_PRODUCTOS}}/eliminar/{{ID_POST2_PRODUCTO_REACCION}}",
									"host": [
										"{{URL_PRODUCTOS}}"
									],
									"path": [
										"eliminar",
										"{{ID_POST2_PRODUCTO_REACCION}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar usuario 2",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL_USUARIOS}}/eliminar/{{ID_POST2_USUARIO_REACCION}}",
									"host": [
										"{{URL_USUARIOS}}"
									],
									"path": [
										"eliminar",
										"{{ID_POST2_USUARIO_REACCION}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Puntuaciones Testing",
			"item": [
				{
					"name": "Aux Inicio",
					"item": [
						{
							"name": "Agregar usuario 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Setear el ID del usuario posteado\", () => {",
											"    const jsonData = pm.response.json();",
											"   pm.collectionVariables.set(\"ID_POST_USUARIO_PUNTUACION\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nombre\": \"usuario3\",\n    \"apellido\": \"testingpuntuaciones3\",\n    \"email\": \"usuario3@mail.com\",\n    \"password\": \"123456H\",\n    \"nombre_rol\": \"ROLE_USER\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_USUARIOS}}/agregar",
									"host": [
										"{{URL_USUARIOS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar producto 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Setear el ID del producto posteado\", () => {",
											"    const jsonData = pm.response.json();",
											"   pm.collectionVariables.set(\"ID_POST_PRODUCTO_PUNTUACION\", jsonData);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"titulo\": \"Producto Puntuaciones Testing\",\n  \"titulo_descripcion\": \"Alojate en el corazón de Mendoza\",\n  \"descripcion\": \"El Huentala Hotel está situado a solo 600 metros de la plaza de la Independencia y ofrece pileta, gimnasio, habitaciones elegantes con conexión de wifi gratis y TV por cable, restaurante y bebidas de bienvenida.\\nLas habitaciones para no fumadores del Hotel Huentala presentan una decoración en tonos suaves y disponen de aire acondicionado y escritorio.\\nEl Huentala Hotel se encuentra a 2,5 km del parque de San Martín y a 850 metros de la terminal de micros y ofrece recepción 24 horas.\",\n  \"direccion\": \"Primitivo De La Reta, 1007\",\n  \"latitud\": -32.89178474778404,\n  \"longitud\": -68.83809148832445,\n  \"politicaListDTO\": [\n    { \"descripcion\": \"No fumar\", \"tipo_politica_id\": 1 },\n    { \"descripcion\": \"No se permiten mascotas\", \"tipo_politica_id\": 1 },\n    { \"descripcion\": \"Check-in: 15:00 horas\", \"tipo_politica_id\": 1 },\n    { \"descripcion\": \"Check-out: 11:00 horas\", \"tipo_politica_id\": 1 },\n    {\n      \"descripcion\": \"Se aplican las pautas de distanciamiento social y normas de higiene para prevenir contagios por coronavirus\",\n      \"tipo_politica_id\": 2\n    },\n    { \"descripcion\": \"Detector de humo\", \"tipo_politica_id\": 2 },\n    { \"descripcion\": \"Alarma\", \"tipo_politica_id\": 2 },\n    {\n      \"descripcion\": \"Si cancelas dentro de las 48 horas previas al comienzo de tu reserva abonarás como penalidad el valor de una noche.\",\n      \"tipo_politica_id\": 3\n    }\n  ],\n  \"categoria_id\": 1,\n  \"ciudad_id\": 1,\n  \"imagenDTOList\": [\n    {\n      \"url_img_producto\": \"https://img-g2.s3.amazonaws.com/productos/005-001.jpg\",\n      \"titulo_img_producto\": \"Habitación doble\"\n    },\n    {\n      \"url_img_producto\": \"https://img-g2.s3.amazonaws.com/productos/005-002.jpg\",\n      \"titulo_img_producto\": \"Living del hotel y sala común\"\n    },\n    {\n      \"url_img_producto\": \"https://img-g2.s3.amazonaws.com/productos/005-003.jpg\",\n      \"titulo_img_producto\": \"Pileta del hotel\"\n    },\n    {\n      \"url_img_producto\": \"https://img-g2.s3.amazonaws.com/productos/005-004.jpg\",\n      \"titulo_img_producto\": \"Ascensor y vestíbulo del hotel\"\n    },\n    {\n      \"url_img_producto\": \"https://img-g2.s3.amazonaws.com/productos/005-005.jpg\",\n      \"titulo_img_producto\": \"Habitación con living\"\n    }\n  ],\n  \"caracteristicasDTOList\": [\n    { \"titulo\": \"Aire Acondicionado\", \"nombre_icono\": \"airConditioner\" },\n    { \"titulo\": \"Gimnasio\", \"nombre_icono\": \"gym\" },\n    { \"titulo\": \"Wifi\", \"nombre_icono\": \"wifi\" },\n    { \"titulo\": \"Television\", \"nombre_icono\": \"television\" },\n    { \"titulo\": \"Piscina\", \"nombre_icono\": \"swim\" },\n    { \"titulo\": \"Recepción 24 Horas\", \"nombre_icono\": \"reception\" }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_PRODUCTOS}}/agregar",
									"host": [
										"{{URL_PRODUCTOS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar usuario 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Setear el ID del usuario posteado\", () => {",
											"    const jsonData = pm.response.json();",
											"   pm.collectionVariables.set(\"ID_POST2_USUARIO_PUNTUACION\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nombre\": \"usuario4\",\n    \"apellido\": \"testingpuntuaciones4\",\n    \"email\": \"usuario4@mail.com\",\n    \"password\": \"123456H\",\n    \"nombre_rol\": \"ROLE_USER\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_USUARIOS}}/agregar",
									"host": [
										"{{URL_USUARIOS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar producto 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Setear el ID del producto posteado\", () => {",
											"    const jsonData = pm.response.json();",
											"   pm.collectionVariables.set(\"ID_POST2_PRODUCTO_PUNTUACION\", jsonData);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"titulo\": \"Producto Puntuaciones Testing 2\",\n  \"titulo_descripcion\": \"Alojate en el corazón de Mendoza\",\n  \"descripcion\": \"El Huentala Hotel está situado a solo 600 metros de la plaza de la Independencia y ofrece pileta, gimnasio, habitaciones elegantes con conexión de wifi gratis y TV por cable, restaurante y bebidas de bienvenida.\\nLas habitaciones para no fumadores del Hotel Huentala presentan una decoración en tonos suaves y disponen de aire acondicionado y escritorio.\\nEl Huentala Hotel se encuentra a 2,5 km del parque de San Martín y a 850 metros de la terminal de micros y ofrece recepción 24 horas.\",\n  \"direccion\": \"Primitivo De La Reta, 1007\",\n  \"latitud\": -32.89178474778404,\n  \"longitud\": -68.83809148832445,\n  \"politicaListDTO\": [\n    { \"descripcion\": \"No fumar\", \"tipo_politica_id\": 1 },\n    { \"descripcion\": \"No se permiten mascotas\", \"tipo_politica_id\": 1 },\n    { \"descripcion\": \"Check-in: 15:00 horas\", \"tipo_politica_id\": 1 },\n    { \"descripcion\": \"Check-out: 11:00 horas\", \"tipo_politica_id\": 1 },\n    {\n      \"descripcion\": \"Se aplican las pautas de distanciamiento social y normas de higiene para prevenir contagios por coronavirus\",\n      \"tipo_politica_id\": 2\n    },\n    { \"descripcion\": \"Detector de humo\", \"tipo_politica_id\": 2 },\n    { \"descripcion\": \"Alarma\", \"tipo_politica_id\": 2 },\n    {\n      \"descripcion\": \"Si cancelas dentro de las 48 horas previas al comienzo de tu reserva abonarás como penalidad el valor de una noche.\",\n      \"tipo_politica_id\": 3\n    }\n  ],\n  \"categoria_id\": 1,\n  \"ciudad_id\": 1,\n  \"imagenDTOList\": [\n    {\n      \"url_img_producto\": \"https://img-g2.s3.amazonaws.com/productos/005-001.jpg\",\n      \"titulo_img_producto\": \"Habitación doble\"\n    },\n    {\n      \"url_img_producto\": \"https://img-g2.s3.amazonaws.com/productos/005-002.jpg\",\n      \"titulo_img_producto\": \"Living del hotel y sala común\"\n    },\n    {\n      \"url_img_producto\": \"https://img-g2.s3.amazonaws.com/productos/005-003.jpg\",\n      \"titulo_img_producto\": \"Pileta del hotel\"\n    },\n    {\n      \"url_img_producto\": \"https://img-g2.s3.amazonaws.com/productos/005-004.jpg\",\n      \"titulo_img_producto\": \"Ascensor y vestíbulo del hotel\"\n    },\n    {\n      \"url_img_producto\": \"https://img-g2.s3.amazonaws.com/productos/005-005.jpg\",\n      \"titulo_img_producto\": \"Habitación con living\"\n    }\n  ],\n  \"caracteristicasDTOList\": [\n    { \"titulo\": \"Aire Acondicionado\", \"nombre_icono\": \"airConditioner\" },\n    { \"titulo\": \"Gimnasio\", \"nombre_icono\": \"gym\" },\n    { \"titulo\": \"Wifi\", \"nombre_icono\": \"wifi\" },\n    { \"titulo\": \"Television\", \"nombre_icono\": \"television\" },\n    { \"titulo\": \"Piscina\", \"nombre_icono\": \"swim\" },\n    { \"titulo\": \"Recepción 24 Horas\", \"nombre_icono\": \"reception\" }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_PRODUCTOS}}/agregar",
									"host": [
										"{{URL_PRODUCTOS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar producto 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Setear el ID del producto posteado\", () => {",
											"    const jsonData = pm.response.json();",
											"   pm.collectionVariables.set(\"ID_POST3_PRODUCTO_PUNTUACION\", jsonData);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"titulo\": \"Producto Puntuaciones Testing 3\",\n  \"titulo_descripcion\": \"Alojate en el corazón de Mendoza\",\n  \"descripcion\": \"El Huentala Hotel está situado a solo 600 metros de la plaza de la Independencia y ofrece pileta, gimnasio, habitaciones elegantes con conexión de wifi gratis y TV por cable, restaurante y bebidas de bienvenida.\\nLas habitaciones para no fumadores del Hotel Huentala presentan una decoración en tonos suaves y disponen de aire acondicionado y escritorio.\\nEl Huentala Hotel se encuentra a 2,5 km del parque de San Martín y a 850 metros de la terminal de micros y ofrece recepción 24 horas.\",\n  \"direccion\": \"Primitivo De La Reta, 1007\",\n  \"latitud\": -32.89178474778404,\n  \"longitud\": -68.83809148832445,\n  \"politicaListDTO\": [\n    { \"descripcion\": \"No fumar\", \"tipo_politica_id\": 1 },\n    { \"descripcion\": \"No se permiten mascotas\", \"tipo_politica_id\": 1 },\n    { \"descripcion\": \"Check-in: 15:00 horas\", \"tipo_politica_id\": 1 },\n    { \"descripcion\": \"Check-out: 11:00 horas\", \"tipo_politica_id\": 1 },\n    {\n      \"descripcion\": \"Se aplican las pautas de distanciamiento social y normas de higiene para prevenir contagios por coronavirus\",\n      \"tipo_politica_id\": 2\n    },\n    { \"descripcion\": \"Detector de humo\", \"tipo_politica_id\": 2 },\n    { \"descripcion\": \"Alarma\", \"tipo_politica_id\": 2 },\n    {\n      \"descripcion\": \"Si cancelas dentro de las 48 horas previas al comienzo de tu reserva abonarás como penalidad el valor de una noche.\",\n      \"tipo_politica_id\": 3\n    }\n  ],\n  \"categoria_id\": 1,\n  \"ciudad_id\": 1,\n  \"imagenDTOList\": [\n    {\n      \"url_img_producto\": \"https://img-g2.s3.amazonaws.com/productos/005-001.jpg\",\n      \"titulo_img_producto\": \"Habitación doble\"\n    },\n    {\n      \"url_img_producto\": \"https://img-g2.s3.amazonaws.com/productos/005-002.jpg\",\n      \"titulo_img_producto\": \"Living del hotel y sala común\"\n    },\n    {\n      \"url_img_producto\": \"https://img-g2.s3.amazonaws.com/productos/005-003.jpg\",\n      \"titulo_img_producto\": \"Pileta del hotel\"\n    },\n    {\n      \"url_img_producto\": \"https://img-g2.s3.amazonaws.com/productos/005-004.jpg\",\n      \"titulo_img_producto\": \"Ascensor y vestíbulo del hotel\"\n    },\n    {\n      \"url_img_producto\": \"https://img-g2.s3.amazonaws.com/productos/005-005.jpg\",\n      \"titulo_img_producto\": \"Habitación con living\"\n    }\n  ],\n  \"caracteristicasDTOList\": [\n    { \"titulo\": \"Aire Acondicionado\", \"nombre_icono\": \"airConditioner\" },\n    { \"titulo\": \"Gimnasio\", \"nombre_icono\": \"gym\" },\n    { \"titulo\": \"Wifi\", \"nombre_icono\": \"wifi\" },\n    { \"titulo\": \"Television\", \"nombre_icono\": \"television\" },\n    { \"titulo\": \"Piscina\", \"nombre_icono\": \"swim\" },\n    { \"titulo\": \"Recepción 24 Horas\", \"nombre_icono\": \"reception\" }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_PRODUCTOS}}/agregar",
									"host": [
										"{{URL_PRODUCTOS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Post - Agregar puntuación",
					"item": [
						{
							"name": "Agregar puntuación OK",
							"item": [
								{
									"name": "Agregar puntuación",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Setear el ID de la reaccion posteada\", () => {",
													"    const jsonData = pm.response.json();",
													"   pm.collectionVariables.set(\"ID_POST2_PUNTUACION\", jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"puntuacion\": {{PUNTUACION5}},\n    \"producto_id\": {{ID_POST_PRODUCTO_PUNTUACION}},\n    \"usuario_id\": {{ID_POST_USUARIO_PUNTUACION}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{LOCAL_URL_PUNTUACIONES}}/agregar",
											"host": [
												"{{LOCAL_URL_PUNTUACIONES}}"
											],
											"path": [
												"agregar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Agregar puntuación script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"console.log(jsonData)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type header es application/json\", () => {",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"});",
													"",
													"pm.test(\"Testear que el tipo de respuesta sea un el id (tipo number)\", () => {",
													"    ",
													"    pm.expect(jsonData).to.be.a(\"number\");",
													"  ",
													"});",
													"",
													"pm.test(\"La respuesta es un status OK\", () => {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"pm.test(\"Setear el ID de la puntuación posteada\", () => {",
													"    ",
													"   pm.collectionVariables.set(\"ID_POST_PUNTUACION\", jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"puntuacion\": {{PUNTUACION3}},\n    \"producto_id\": {{ID_POST2_PRODUCTO_PUNTUACION}},\n    \"usuario_id\": {{ID_POST2_USUARIO_PUNTUACION}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{LOCAL_URL_PUNTUACIONES}}/agregar",
											"host": [
												"{{LOCAL_URL_PUNTUACIONES}}"
											],
											"path": [
												"agregar"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Agregar puntuación exception",
							"item": [
								{
									"name": "Agregar puntuación exception 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Content-Type header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type header es application/json\", () => {",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
													"});",
													"",
													"",
													"pm.test(\"Content-Length header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Length\");",
													"});",
													"",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
													"  pm.response.to.have.body(\"El usuario ya ha agregado una puntuación para este producto\");",
													"});",
													"",
													"pm.test(\"La respuesta es un status Bad Request\", () => {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"puntuacion\": {{PUNTUACION3}} ,\n    \"producto_id\": {{ID_POST2_PRODUCTO_PUNTUACION}},\n    \"usuario_id\": {{ID_POST2_USUARIO_PUNTUACION}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{LOCAL_URL_PUNTUACIONES}}/agregar",
											"host": [
												"{{LOCAL_URL_PUNTUACIONES}}"
											],
											"path": [
												"agregar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Agregar puntuación exception 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Content-Type header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type header es application/json\", () => {",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
													"});",
													"",
													"",
													"pm.test(\"Content-Length header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Length\");",
													"});",
													"",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
													"  pm.response.to.have.body(\"La puntuación debe ser un número del 1 al 5\");",
													"});",
													"",
													"pm.test(\"La respuesta es un status Bad Request\", () => {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"puntuacion\": {{PUNTUACION_EXCEPTION1}},\n    \"producto_id\": {{ID_POST_PRODUCTO_PUNTUACION}},\n    \"usuario_id\":  {{ID_POST2_USUARIO_PUNTUACION}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{LOCAL_URL_PUNTUACIONES}}/agregar",
											"host": [
												"{{LOCAL_URL_PUNTUACIONES}}"
											],
											"path": [
												"agregar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Agregar puntuación exception 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Content-Type header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type header es application/json\", () => {",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
													"});",
													"",
													"",
													"pm.test(\"Content-Length header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Length\");",
													"});",
													"",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
													"  pm.response.to.have.body(\"La puntuación debe ser un número del 1 al 5\");",
													"});",
													"",
													"pm.test(\"La respuesta es un status Bad Request\", () => {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"puntuacion\": {{PUNTUACION_EXCEPTION2}},\n    \"producto_id\": {{ID_POST2_PRODUCTO_PUNTUACION}},\n    \"usuario_id\":  {{ID_POST_USUARIO_PUNTUACION}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{LOCAL_URL_PUNTUACIONES}}/agregar",
											"host": [
												"{{LOCAL_URL_PUNTUACIONES}}"
											],
											"path": [
												"agregar"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Get - Obtener puntuación",
					"item": [
						{
							"name": "Obtener todas las puntuaciones",
							"item": [
								{
									"name": "Obtener todas las puntuaciones OK",
									"item": [
										{
											"name": "Obtener todas las puntuaciones",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_PUNTUACIONES}}/todas",
													"host": [
														"{{LOCAL_URL_PUNTUACIONES}}"
													],
													"path": [
														"todas"
													]
												}
											},
											"response": []
										},
										{
											"name": "Obtener todas las puntuaciones script tests",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"La respuesta es un status OK\", () => {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
															"});",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   pm.test(\"Validar atributo id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"id\");",
															"",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo puntuacion\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"puntuacion\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo usuario_id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"usuario_id\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo producto_id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"producto_id\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validar atributo id\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].id).to.be.a('number');",
															"  ",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"  ",
															"    pm.test(\"Validar atributo puntuacion \", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].puntuacion).to.be.oneOf([1,2,3,4,5]);",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validar atributo puntuacion\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].puntuacion).to.be.a('number');",
															"  ",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validar atributo usuario_id\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].usuario_id).to.be.a('number');",
															"  ",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validar atributo producto_id\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].producto_id).to.be.a('number');",
															"  ",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Se espera que los elementos dentro de la respuesta sean objetos\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration]).to.be.an('object');",
															"});",
															"}",
															"",
															"pm.test(\"Se espera que la respuesta sea un array\", () => {",
															"   ",
															"  pm.expect(responseJson).to.be.an(\"array\");",
															"   ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_PUNTUACIONES}}/todas",
													"host": [
														"{{LOCAL_URL_PUNTUACIONES}}"
													],
													"path": [
														"todas"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Obtener todas las puntuaciones exception",
									"item": []
								}
							]
						},
						{
							"name": "Obtener puntuación por id",
							"item": [
								{
									"name": "Obtener puntuación por id OK",
									"item": [
										{
											"name": "Obtener puntuación por id",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_PUNTUACIONES}}/{{ID_POST_PUNTUACION}}",
													"host": [
														"{{LOCAL_URL_PUNTUACIONES}}"
													],
													"path": [
														"{{ID_POST_PUNTUACION}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Obtener puntuación por id script tests",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"La respuesta es un status OK\", () => {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
															"});",
															"",
															"   pm.test(\"Validar atributo id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"id\");",
															"",
															"});",
															"",
															"pm.test(\"Validar atributo puntuacion\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"puntuacion\");",
															"});",
															"",
															"pm.test(\"Validar atributo usuario_id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"usuario_id\");",
															"});",
															"",
															"pm.test(\"Validar atributo producto_id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"producto_id\");",
															"});",
															"",
															"pm.test(\"Validar atributo id como number\", function () {",
															"    ",
															"    pm.expect(responseJson.id).to.be.a('number');",
															"  ",
															"});",
															"",
															"pm.test(\"Validar atributo puntuacion como number\", function () {",
															"    ",
															"    pm.expect(responseJson.puntuacion).to.be.a('number');",
															"  ",
															"});",
															"",
															"pm.test(\"Validar atributo puntuacion como un numero del 1 al 5\", function () {",
															"    ",
															"    pm.expect(responseJson.puntuacion).to.be.oneOf([1,2,3,4,5]);",
															"  ",
															"});",
															"",
															" pm.test(\"Validar atributo usuario_id\", function () {",
															"    ",
															"    pm.expect(responseJson.usuario_id).to.be.a('number');",
															"  ",
															"});",
															"",
															"  pm.test(\"Validar atributo producto_id\", function () {",
															"    ",
															"    pm.expect(responseJson.producto_id).to.be.a('number');",
															"  ",
															"});",
															"",
															"pm.test(\"El ID es el mismo que el obtenido al hacer el post de la puntuacion previamente\", () => {",
															"  pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get(\"ID_POST2_PUNTUACION\")));",
															"});",
															"",
															"pm.test(\"El ID de producto es el mismo que el ingresado al hacer el post de la puntuacion previamente\", () => {",
															"  pm.expect(responseJson.producto_id).to.eql(parseInt(pm.collectionVariables.get(\"ID_POST_PRODUCTO_PUNTUACION\")));",
															"});",
															"",
															"pm.test(\"El ID de usuario es el mismo que el ingresado al hacer el post de la puntuacion previamente\", () => {",
															"  pm.expect(responseJson.usuario_id).to.eql(parseInt(pm.collectionVariables.get(\"ID_POST_USUARIO_PUNTUACION\")));",
															"});",
															"",
															"pm.test(\"La puntuacion es la misma que la ingresada al hacer el post de la puntuacion previamente\", () => {",
															"  pm.expect(responseJson.puntuacion).to.eql(parseInt(pm.collectionVariables.get(\"PUNTUACION5\")));",
															"});",
															"",
															"pm.test(\"Se espera que el elemento de respuesta sea un objeto\", function () {",
															"    ",
															"    pm.expect(responseJson).to.be.an('object');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_PUNTUACIONES}}/{{ID_POST2_PUNTUACION}}",
													"host": [
														"{{LOCAL_URL_PUNTUACIONES}}"
													],
													"path": [
														"{{ID_POST2_PUNTUACION}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Obtener puntuación por id exception",
									"item": [
										{
											"name": "Obtener puntuación por id exception",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"El código de status es 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
															"});",
															"",
															"pm.test(\"Content-Length header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Length\");",
															"});",
															"",
															"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
															"  pm.response.to.have.body(\"No se pudo encontrar la puntuacion con el ID indicado\");",
															"});",
															"",
															"pm.test(\"La respuesta es un status Not Found\", () => {",
															"    pm.response.to.have.status(\"Not Found\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_PUNTUACIONES}}/{{ID_EXCEPTION}}",
													"host": [
														"{{LOCAL_URL_PUNTUACIONES}}"
													],
													"path": [
														"{{ID_EXCEPTION}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Obtener todas las puntuaciones por id producto",
							"item": [
								{
									"name": "Obtener todas las  puntuaciones por id  producto OK",
									"item": [
										{
											"name": "Obtener  puntuaciones por id de producto",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_PUNTUACIONES}}/porProducto/{{ID_POST_PRODUCTO_PUNTUACION}}",
													"host": [
														"{{LOCAL_URL_PUNTUACIONES}}"
													],
													"path": [
														"porProducto",
														"{{ID_POST_PRODUCTO_PUNTUACION}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Obtener  puntuaciones por id de producto script tests",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"La respuesta es un status OK\", () => {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
															"});",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   pm.test(\"Validar atributo id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"id\");",
															"",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo puntuacion\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"puntuacion\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo usuario_id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"usuario_id\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"   ",
															"pm.test(\"Validar atributo producto_id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"producto_id\");",
															"});",
															"",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validar atributo id\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].id).to.be.a('number');",
															"  ",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"  ",
															"    pm.test(\"Validar atributo puntuacion \", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].puntuacion).to.be.oneOf([1,2,3,4,5]);",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validar atributo puntuacion\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].puntuacion).to.be.a('number');",
															"  ",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validar atributo usuario_id\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].usuario_id).to.be.a('number');",
															"  ",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validar atributo producto_id\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration].producto_id).to.be.a('number');",
															"  ",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Validar que el id de producto de todas las puntuaciones de la lista sea el solicitado al realizar la petición\", function () {",
															"    ",
															"     pm.expect(responseJson[pm.info.iteration].producto_id).to.eql(parseInt(pm.collectionVariables.get(\"ID_POST2_PRODUCTO_PUNTUACION\")));",
															"  ",
															"});",
															"}",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Se espera que los elementos dentro de la respuesta sean objetos\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration]).to.be.an('object');",
															"});",
															"}",
															"",
															"pm.test(\"Se espera que la respuesta sea un array\", () => {",
															"   ",
															"  pm.expect(responseJson).to.be.an(\"array\");",
															"   ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_PUNTUACIONES}}/porProducto/{{ID_POST2_PRODUCTO_PUNTUACION}}",
													"host": [
														"{{LOCAL_URL_PUNTUACIONES}}"
													],
													"path": [
														"porProducto",
														"{{ID_POST2_PRODUCTO_PUNTUACION}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Obtener todas las puntuaciones por id de producto exception",
									"item": [
										{
											"name": "Obtener puntuaciones por id de producto exception 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"El código de status es 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
															"});",
															"",
															"pm.test(\"Content-Length header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Length\");",
															"});",
															"",
															"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
															"  pm.response.to.have.body(\"No se ha encontrado el producto con el ID indicado\");",
															"});",
															"",
															"pm.test(\"La respuesta es un status Not Found\", () => {",
															"    pm.response.to.have.status(\"Not Found\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_PUNTUACIONES}}/porProducto/{{ID_EXCEPTION}}",
													"host": [
														"{{LOCAL_URL_PUNTUACIONES}}"
													],
													"path": [
														"porProducto",
														"{{ID_EXCEPTION}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Obtener puntuaciones por id de producto exception 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"El código de status es 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
															"});",
															"",
															"pm.test(\"Content-Length header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Length\");",
															"});",
															"",
															"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
															"  pm.response.to.have.body(\"El producto no ha recibido puntuaciones\");",
															"});",
															"",
															"pm.test(\"La respuesta es un status Not Found\", () => {",
															"    pm.response.to.have.status(\"Not Found\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_PUNTUACIONES}}/porProducto/{{ID_POST3_PRODUCTO_PUNTUACION}}",
													"host": [
														"{{LOCAL_URL_PUNTUACIONES}}"
													],
													"path": [
														"porProducto",
														"{{ID_POST3_PRODUCTO_PUNTUACION}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Obtener puntuación por id de usuario y id de producto",
							"item": [
								{
									"name": "Obtener puntuación por id de usuario y id de producto OK",
									"item": [
										{
											"name": "Obtener puntuación por id de usuario y id de producto OK",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_PUNTUACIONES}}/porProducto/{{ID_POST_PRODUCTO_PUNTUACION}}/porUsuario/{{ID_POST_USUARIO_PUNTUACION}}",
													"host": [
														"{{LOCAL_URL_PUNTUACIONES}}"
													],
													"path": [
														"porProducto",
														"{{ID_POST_PRODUCTO_PUNTUACION}}",
														"porUsuario",
														"{{ID_POST_USUARIO_PUNTUACION}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Obtener puntuación por id de usuario y id de producto script tests",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"La respuesta es un status OK\", () => {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
															"});",
															"",
															"for (let i = 0; i < responseJson.length; i++) {",
															"    pm.test(\"Se espera que los elementos dentro de la respuesta sean objetos\", function () {",
															"    ",
															"    pm.expect(responseJson[pm.info.iteration]).to.be.an('object');",
															"});",
															"}",
															"",
															"pm.test(\"Validar atributo id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"id\");",
															"",
															"});",
															"",
															"pm.test(\"Validar atributo puntuacion\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"puntuacion\");",
															"});",
															"",
															"pm.test(\"Validar atributo usuario_id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"usuario_id\");",
															"});",
															"",
															"pm.test(\"Validar atributo producto_id\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"producto_id\");",
															"});",
															"",
															"pm.test(\"Validar atributo id como number\", function () {",
															"    ",
															"    pm.expect(responseJson.id).to.be.a('number');",
															"  ",
															"});",
															"",
															"pm.test(\"Validar atributo puntuacion como number\", function () {",
															"    ",
															"    pm.expect(responseJson.puntuacion).to.be.a('number');",
															"  ",
															"});",
															"",
															"pm.test(\"Validar atributo puntuacion como un numero del 1 al 5\", function () {",
															"    ",
															"    pm.expect(responseJson.puntuacion).to.be.oneOf([1,2,3,4,5]);",
															"  ",
															"});",
															"",
															" pm.test(\"Validar atributo usuario_id\", function () {",
															"    ",
															"    pm.expect(responseJson.usuario_id).to.be.a('number');",
															"  ",
															"});",
															"",
															"  pm.test(\"Validar atributo producto_id\", function () {",
															"    ",
															"    pm.expect(responseJson.producto_id).to.be.a('number');",
															"  ",
															"});",
															"",
															"pm.test(\"El ID de puntuacion es el mismo que el obtenido al hacer el post de la puntuacion previamente\", () => {",
															"  pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get(\"ID_POST_PUNTUACION\")));",
															"});",
															"",
															"pm.test(\"El ID de producto es el solicitado\", () => {",
															"  pm.expect(responseJson.producto_id).to.eql(parseInt(pm.collectionVariables.get(\"ID_POST2_PRODUCTO_PUNTUACION\")));",
															"});",
															"",
															"pm.test(\"El ID de usuario es el solicitado\", () => {",
															"  pm.expect(responseJson.usuario_id).to.eql(parseInt(pm.collectionVariables.get(\"ID_POST2_USUARIO_PUNTUACION\")));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_PUNTUACIONES}}/porProducto/{{ID_POST2_PRODUCTO_PUNTUACION}}/porUsuario/{{ID_POST2_USUARIO_PUNTUACION}}",
													"host": [
														"{{LOCAL_URL_PUNTUACIONES}}"
													],
													"path": [
														"porProducto",
														"{{ID_POST2_PRODUCTO_PUNTUACION}}",
														"porUsuario",
														"{{ID_POST2_USUARIO_PUNTUACION}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Obtener puntuación por id de usuario y id de producto exception",
									"item": [
										{
											"name": "Obtener puntuación por id de usuario y id de producto exception 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"El código de status es 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
															"});",
															"",
															"pm.test(\"Content-Length header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Length\");",
															"});",
															"",
															"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
															"  pm.response.to.have.body(\"No se ha encontrado el usuario con el ID indicado\");",
															"});",
															"",
															"pm.test(\"La respuesta es un status Not Found\", () => {",
															"    pm.response.to.have.status(\"Not Found\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_PUNTUACIONES}}/porProducto/{{ID_POST_PRODUCTO_PUNTUACION}}/porUsuario/{{ID_EXCEPTION}}",
													"host": [
														"{{LOCAL_URL_PUNTUACIONES}}"
													],
													"path": [
														"porProducto",
														"{{ID_POST_PRODUCTO_PUNTUACION}}",
														"porUsuario",
														"{{ID_EXCEPTION}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Obtener puntuación por id de usuario y id de producto exception 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"El código de status es 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
															"});",
															"",
															"pm.test(\"Content-Length header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Length\");",
															"});",
															"",
															"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
															"  pm.response.to.have.body(\"No se ha encontrado el producto con el ID indicado\");",
															"});",
															"",
															"pm.test(\"La respuesta es un status Not Found\", () => {",
															"    pm.response.to.have.status(\"Not Found\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_PUNTUACIONES}}/porProducto/{{ID_EXCEPTION}}/porUsuario/{{ID_POST_USUARIO_PUNTUACION}}",
													"host": [
														"{{LOCAL_URL_PUNTUACIONES}}"
													],
													"path": [
														"porProducto",
														"{{ID_EXCEPTION}}",
														"porUsuario",
														"{{ID_POST_USUARIO_PUNTUACION}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Obtener puntuación por id de usuario y id de producto exception 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"El código de status es 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
															"});",
															"",
															"pm.test(\"Content-Length header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Length\");",
															"});",
															"",
															"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
															"  pm.response.to.have.body(\"El usuario no ha agregado una puntuación al producto con el ID solicitado\");",
															"});",
															"",
															"pm.test(\"La respuesta es un status Not Found\", () => {",
															"    pm.response.to.have.status(\"Not Found\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_PUNTUACIONES}}/porProducto/{{ID_POST3_PRODUCTO_PUNTUACION}}/porUsuario/{{ID_POST_USUARIO_PUNTUACION}}",
													"host": [
														"{{LOCAL_URL_PUNTUACIONES}}"
													],
													"path": [
														"porProducto",
														"{{ID_POST3_PRODUCTO_PUNTUACION}}",
														"porUsuario",
														"{{ID_POST_USUARIO_PUNTUACION}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Put - Modificar puntuación",
					"item": [
						{
							"name": "Modificar puntuación OK",
							"item": [
								{
									"name": "Modificar puntuación",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{ID_POST_PUNTUACION}},\n    \"puntuacion\":{{PUNTUACION5}},\n    \"producto_id\": {{ID_POST2_PRODUCTO_PUNTUACION}},\n    \"usuario_id\":{{ID_POST2_USUARIO_PUNTUACION}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{LOCAL_URL_PUNTUACIONES}}/editar",
											"host": [
												"{{LOCAL_URL_PUNTUACIONES}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modificar puntuación script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type header es application/json\", () => {",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
													"});",
													"",
													"pm.test(\"Body de respuesta es un texto que indica que fue actualizada la puntuación\", function () {",
													"  pm.response.to.have.body(\"UPDATED\");",
													"});",
													"",
													"pm.test(\"La respuesta es un status OK\", () => {",
													"    pm.response.to.have.status(\"OK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{ID_POST2_PUNTUACION}},\n    \"puntuacion\":{{PUNTUACION3}},\n    \"producto_id\": {{ID_POST_PRODUCTO_PUNTUACION}},\n    \"usuario_id\":{{ID_POST_USUARIO_PUNTUACION}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{LOCAL_URL_PUNTUACIONES}}/editar",
											"host": [
												"{{LOCAL_URL_PUNTUACIONES}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Modificar puntuación exception",
							"item": [
								{
									"name": "Modificar puntuación exception 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Content-Type header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type header es application/json\", () => {",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
													"});",
													"",
													"pm.test(\"Content-Length header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Length\");",
													"});",
													"",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
													"  pm.response.to.have.body(\"No se pudo encontrar la puntuacion para editar\");",
													"});",
													"",
													"pm.test(\"La respuesta es un status Not Found\", () => {",
													"    pm.response.to.have.status(\"Not Found\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{ID_EXCEPTION}},\n    \"puntuacion\": {{PUNTUACION5}},\n    \"producto_id\": {{ID_POST2_PRODUCTO_PUNTUACION}},\n    \"usuario_id\":{{ID_POST2_USUARIO_PUNTUACION}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{LOCAL_URL_PUNTUACIONES}}/editar",
											"host": [
												"{{LOCAL_URL_PUNTUACIONES}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modificar puntuación exception 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Content-Type header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type header es application/json\", () => {",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
													"});",
													"",
													"pm.test(\"Content-Length header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Length\");",
													"});",
													"",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
													"  pm.response.to.have.body(\"La puntuación debe tener asignado un producto y un usuario\");",
													"});",
													"",
													"pm.test(\"La respuesta es un status Bad Request\", () => {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{ID_POST_PUNTUACION}},\n    \"puntuacion\": {{PUNTUACION5}},\n    \"producto_id\": null,\n    \"usuario_id\":{{ID_POST2_USUARIO_PUNTUACION}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{LOCAL_URL_PUNTUACIONES}}/editar",
											"host": [
												"{{LOCAL_URL_PUNTUACIONES}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modificar puntuación exception 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Content-Type header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type header es application/json\", () => {",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
													"});",
													"",
													"pm.test(\"Content-Length header está presente\", () => {",
													"  pm.response.to.have.header(\"Content-Length\");",
													"});",
													"",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
													"  pm.response.to.have.body(\"La puntuación debe tener asignado un producto y un usuario\");",
													"});",
													"",
													"pm.test(\"La respuesta es un status Bad Request\", () => {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{ID_POST_PUNTUACION}},\n    \"puntuacion\": {{PUNTUACION5}},\n    \"producto_id\": {{ID_POST2_PRODUCTO_PUNTUACION}},\n    \"usuario_id\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{LOCAL_URL_PUNTUACIONES}}/editar",
											"host": [
												"{{LOCAL_URL_PUNTUACIONES}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Delete - Eliminar puntuación",
					"item": [
						{
							"name": "Eliminar puntuación por id",
							"item": [
								{
									"name": "Eliminar puntuación por id OK",
									"item": [
										{
											"name": "Eliminar puntuación por id script tests",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"El código de status es 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
															"});",
															"",
															"pm.test(\"Body de respuesta es un texto que indica que fue borrada la puntuación\", function () {",
															"  pm.response.to.have.body(\"DELETED\");",
															"});",
															"",
															"pm.test(\"La respuesta es un status OK\", () => {",
															"  pm.response.to.have.status(\"OK\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_PUNTUACIONES}}/eliminar/{{ID_POST2_PUNTUACION}}",
													"host": [
														"{{LOCAL_URL_PUNTUACIONES}}"
													],
													"path": [
														"eliminar",
														"{{ID_POST2_PUNTUACION}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Eliminar puntuación por id exception",
									"item": [
										{
											"name": "Eliminar puntuación por id exception",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"El código de status es 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
															"});",
															"",
															"pm.test(\"Content-Length header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Length\");",
															"});",
															"",
															"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
															"  pm.response.to.have.body(\"No se pudo encontrar la puntuación a eliminar\");",
															"});",
															"",
															"pm.test(\"La respuesta es un status Not Found\", () => {",
															"    pm.response.to.have.status(\"Not Found\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_PUNTUACIONES}}/eliminar/{{ID_EXCEPTION}}",
													"host": [
														"{{LOCAL_URL_PUNTUACIONES}}"
													],
													"path": [
														"eliminar",
														"{{ID_EXCEPTION}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Eliminar puntuación por id de usuario e id de producto",
							"item": [
								{
									"name": "Eliminar puntuación por id de usuario e id de producto OK",
									"item": [
										{
											"name": "Eliminar puntuación por id de usuario e id de producto",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"El código de status es 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
															"});",
															"",
															"pm.test(\"Body de respuesta es un texto que indica que fue borrada la puntuación\", function () {",
															"  pm.response.to.have.body(\"DELETED\");",
															"});",
															"",
															"pm.test(\"La respuesta es un status OK\", () => {",
															"  pm.response.to.have.status(\"OK\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_PUNTUACIONES}}/eliminar/porProducto/{{ID_POST2_PRODUCTO_PUNTUACION}}/porUsuario/{{ID_POST2_USUARIO_PUNTUACION}}",
													"host": [
														"{{LOCAL_URL_PUNTUACIONES}}"
													],
													"path": [
														"eliminar",
														"porProducto",
														"{{ID_POST2_PRODUCTO_PUNTUACION}}",
														"porUsuario",
														"{{ID_POST2_USUARIO_PUNTUACION}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Eliminar puntuación por id de usuario e id de producto exception",
									"item": [
										{
											"name": "Eliminar puntuación por id de usuario e id de producto exception",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"El código de status es 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
															"});",
															"",
															"pm.test(\"Content-Length header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Length\");",
															"});",
															"",
															"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
															"  pm.response.to.have.body(\"No se ha encontrado el producto con el ID indicado\");",
															"});",
															"",
															"pm.test(\"La respuesta es un status Not Found\", () => {",
															"    pm.response.to.have.status(\"Not Found\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_PUNTUACIONES}}/eliminar/porProducto/{{ID_EXCEPTION}}/porUsuario/{{ID_POST2_USUARIO_PUNTUACION}}",
													"host": [
														"{{LOCAL_URL_PUNTUACIONES}}"
													],
													"path": [
														"eliminar",
														"porProducto",
														"{{ID_EXCEPTION}}",
														"porUsuario",
														"{{ID_POST2_USUARIO_PUNTUACION}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Eliminar puntuación por id de usuario e id de producto exception Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"El código de status es 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Content-Type header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type header es application/json\", () => {",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
															"});",
															"",
															"pm.test(\"Content-Length header está presente\", () => {",
															"  pm.response.to.have.header(\"Content-Length\");",
															"});",
															"",
															"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {",
															"  pm.response.to.have.body(\"No se ha encontrado el usuario con el ID indicado\");",
															"});",
															"",
															"pm.test(\"La respuesta es un status Not Found\", () => {",
															"    pm.response.to.have.status(\"Not Found\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{LOCAL_URL_PUNTUACIONES}}/eliminar/porProducto/{{ID_POST2_PRODUCTO_PUNTUACION}}/porUsuario/{{ID_EXCEPTION}}",
													"host": [
														"{{LOCAL_URL_PUNTUACIONES}}"
													],
													"path": [
														"eliminar",
														"porProducto",
														"{{ID_POST2_PRODUCTO_PUNTUACION}}",
														"porUsuario",
														"{{ID_EXCEPTION}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Aux Final",
					"item": [
						{
							"name": "Eliminar usuario 1",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL_USUARIOS}}/eliminar/{{ID_POST_USUARIO_PUNTUACION}}",
									"host": [
										"{{URL_USUARIOS}}"
									],
									"path": [
										"eliminar",
										"{{ID_POST_USUARIO_PUNTUACION}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar producto 1",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL_PRODUCTOS}}/eliminar/{{ID_POST_PRODUCTO_PUNTUACION}}",
									"host": [
										"{{URL_PRODUCTOS}}"
									],
									"path": [
										"eliminar",
										"{{ID_POST_PRODUCTO_PUNTUACION}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar producto 2",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL_PRODUCTOS}}/eliminar/{{ID_POST2_PRODUCTO_PUNTUACION}}",
									"host": [
										"{{URL_PRODUCTOS}}"
									],
									"path": [
										"eliminar",
										"{{ID_POST2_PRODUCTO_PUNTUACION}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar usuario 2",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL_USUARIOS}}/eliminar/{{ID_POST2_USUARIO_PUNTUACION}}",
									"host": [
										"{{URL_USUARIOS}}"
									],
									"path": [
										"eliminar",
										"{{ID_POST2_USUARIO_PUNTUACION}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Usuarios Testing",
			"item": [
				{
					"name": "Post - Agregar usuario",
					"item": [
						{
							"name": "Agregar usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Setear el ID del usuario posteado\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"   pm.collectionVariables.set(\"IDPOST2_USUARIO\", jsonData.id);\r",
											"});\r",
											"\r",
											"pm.test(\"Setear el token del usuario posteado\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"   pm.collectionVariables.set(\"TOKENREGISTRO2_USUARIO\", jsonData.token_acceso_registro);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nombre\": \"AnaFidalgo\",\r\n  \"apellido\": \"Fidalgo\",\r\n  \"email\": \"ana.fidalgo@hotmail.com\",\r\n   \"password\": \"12345h\",\r\n   \"nombre_rol\": \"ROLE_USER\"\r\n   }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_USUARIOS}}/agregar",
									"host": [
										"{{URL_USUARIOS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": [
								{
									"name": "Agregar usuario",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nombre\": \"AnaFidalgo\",\r\n  \"apellido\": \"Fidalgo\",\r\n  \"email\": \"ana.fidalgo@hotmail.com\",\r\n   \"password\": \"12345h\",\r\n   \"nombre_rol\": \"ROLE_USER\"\r\n   }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_USUARIOS}}/agregar",
											"host": [
												"{{URL_USUARIOS}}"
											],
											"path": [
												"agregar"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Location",
											"value": "http://localhost:8080/usuarios/agregar"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Thu, 23 Jun 2022 13:37:47 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 7,\n    \"token_acceso_registro\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhbmEuZmlkYWxnb0Bob3RtYWlsLmNvbSIsInJvbGVzIjpbIlJPTEVfVVNFUiJdLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvdXN1YXJpb3MvYWdyZWdhciIsImV4cCI6MTY1NTk5NTA2NH0.ZCXivgH29f_W51I5au2X53wFMuqTWRuBwcN7PcBAyZU\"\n}"
								}
							]
						},
						{
							"name": "Loguear usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"console.log(jsonData)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header es application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Testear que el tipo de respuesta tenga un token)\", () => {\r",
											"    \r",
											"    pm.expect(jsonData.token_de_acceso).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"pm.test(\"La respuesta es un status OK\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Setear el token del usuario logueado\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"   pm.collectionVariables.set(\"TOKENLOGIN_USUARIO\", jsonData.token_de_acceso);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "email",
										"value": "ana@mail.com",
										"type": "text",
										"disabled": true
									},
									{
										"key": "password",
										"value": "123456H",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"value": "ana@mail.com",
											"type": "text"
										},
										{
											"key": "password",
											"value": "123456H",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_USUARIOS}}/login",
									"host": [
										"{{URL_USUARIOS}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Loguear usuario aws",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"console.log(jsonData)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header es application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Testear que el tipo de respuesta tenga un token)\", () => {\r",
											"    \r",
											"    pm.expect(jsonData.token_de_acceso).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"pm.test(\"La respuesta es un status OK\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Setear el token del usuario logueado\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"   pm.collectionVariables.set(\"TOKENLOGIN_USUARIO\", jsonData.token_de_acceso);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "email",
										"value": "ana@mail.com",
										"type": "text",
										"disabled": true
									},
									{
										"key": "password",
										"value": "123456H",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"value": "ana@mail.com",
											"type": "text"
										},
										{
											"key": "password",
											"value": "123456H",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://digitalbookingg2sprint3v2-env.eba-wfrhwq8z.us-east-1.elasticbeanstalk.com/usuarios/login",
									"protocol": "http",
									"host": [
										"digitalbookingg2sprint3v2-env",
										"eba-wfrhwq8z",
										"us-east-1",
										"elasticbeanstalk",
										"com"
									],
									"path": [
										"usuarios",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar usuario script tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"console.log(jsonData)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header es application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Testear que el tipo de respuesta sea un el id (tipo number)\", () => {\r",
											"    \r",
											"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
											"  \r",
											"});\r",
											"\r",
											"pm.test(\"Testear que el tipo de respuesta tenga un token)\", () => {\r",
											"    \r",
											"    pm.expect(jsonData.token_acceso_registro).to.be.a(\"string\");\r",
											"  \r",
											"});\r",
											"\r",
											"pm.test(\"La respuesta es un status Created\", () => {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Setear el ID del usuario posteado\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"   pm.collectionVariables.set(\"IDPOST_USUARIO\", jsonData.id);\r",
											"});\r",
											"\r",
											"pm.test(\"Setear el token del usuario posteado\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"   pm.collectionVariables.set(\"TOKENREGISTRO_USUARIO\", jsonData.token_acceso_registro);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nombre\": \"AnaFidalgo\",\r\n  \"apellido\": \"Fidalgo\",\r\n  \"email\": \"ana.fidalgo4@hotmail.com\",\r\n   \"password\": \"12345h\",\r\n   \"ciudad\": \"Buenos Aires\",\r\n   \"nombre_rol\": \"ROLE_USER\"\r\n   }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_USUARIOS}}/agregar",
									"host": [
										"{{URL_USUARIOS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar usuario exception script tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"El código de status es 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header es application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Length header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
											"  pm.response.to.have.body(\"Se ha encontrado un usuario con el email asignado. No se puede crear un usuario con el mismo email\");\r",
											"});\r",
											"\r",
											"pm.test(\"La respuesta es un status Bad Request\", () => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nombre\": \"AnaFidalgo\",\r\n  \"apellido\": \"Fidalgo\",\r\n  \"email\": \"ana.fidalgo@hotmail.com\",\r\n   \"password\": \"12345h\",\r\n   \"ciudad\": \"Buenos Aires\",\r\n   \"nombre_rol\": \"ROLE_USER\"\r\n   }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_USUARIOS}}/agregar",
									"host": [
										"{{URL_USUARIOS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar usuario exception script tests Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"El código de status es 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header es application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Length header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
											"  pm.response.to.have.body(\"No se puede guardar un usuario sin asignarle un rol\");\r",
											"});\r",
											"\r",
											"pm.test(\"La respuesta es un status Bad Request\", () => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nombre\": \"AnaFidalgo\",\r\n  \"apellido\": \"Fidalgo\",\r\n  \"email\": \"ana.fidalgo5@hotmail.com\",\r\n   \"password\": \"12345h\",\r\n   \"ciudad\": \"Buenos Aires\",\r\n   \"nombre_rol\": null\r\n   }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_USUARIOS}}/agregar",
									"host": [
										"{{URL_USUARIOS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get - Obtener usuario",
					"item": [
						{
							"name": "Obtener todos los usuarios",
							"item": [
								{
									"name": "Obtener todos los usuarios",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_USUARIOS}}/todos",
											"host": [
												"{{URL_USUARIOS}}"
											],
											"path": [
												"todos"
											]
										}
									},
									"response": []
								},
								{
									"name": "Obtener todos los usuarios script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo id\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo nombre\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"nombre\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo apellido\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"apellido\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo email\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"email\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo nombre_rol\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"nombre_rol\");\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"number\" },\r",
													"        \"nombre\": { \"type\": \"string\" },\r",
													"        \"apellido\": { \"type\": \"string\" },\r",
													"        \"email\": { \"type\": \"string\" },       \r",
													"        \"nombre_rol\": { \"type\": \"string\" }\r",
													"    }\r",
													"};\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validate schema\", () => {\r",
													"    pm.expect(responseJson[pm.info.iteration]).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"pm.test(\"Validar que los resultados estén ordenados por ID de menor a mayor\", () => {\r",
													"    const ascendente = responseJson.map(item => item.id).every((current, index, ids) => index === 0 || current >= ids[index-1]);\r",
													"    \r",
													"    pm.expect(ascendente).to.be.true;\r",
													"});\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo nombre\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].nombre).to.be.a('string');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo apellido\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].apellido).to.be.a('string');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo email\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].email).to.be.a('string');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo nombre_rol\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].nombre_rol).to.be.a('string');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo id\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].id).to.be.a('number');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Se espera que los elementos dentro de la respuesta sean objetos\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration]).to.be.an('object');\r",
													"});\r",
													"}\r",
													"\r",
													"pm.test(\"Se espera que la respuesta sea un array\", () => {\r",
													"   \r",
													"  pm.expect(responseJson).to.be.an(\"array\");\r",
													"   \r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_USUARIOS}}/todos",
											"host": [
												"{{URL_USUARIOS}}"
											],
											"path": [
												"todos"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Obtener usuario por id",
							"item": [
								{
									"name": "Obtener usuario por id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo id\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo nombre\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"nombre\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo apellido\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"apellido\");\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"number\" },\r",
													"        \"nombre\": { \"type\": \"string\" },\r",
													"        \"apellido\": { \"type\": \"string\" },\r",
													"        \"email\": { \"type\": \"string\" },\r",
													"        \"ciudad\": { \"type\": \"string\" },\r",
													"        \"nombre_rol\": { \"type\": \"string\" }\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"El id está presente y es un numero\", () => {\r",
													"   \r",
													"    pm.expect(responseJson.id).to.be.a('number');\r",
													"        \r",
													"});\r",
													"\r",
													"pm.test(\"El ID es el mismo que el obtenido al hacer el post de la ciudad previamente\", () => {\r",
													"  pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get(\"IDPOST_USUARIO\")));\r",
													"});\r",
													"\r",
													"pm.test(\"El nombre es un string\", () => {\r",
													"      pm.expect(responseJson.nombre).to.be.a('string');\r",
													"       \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_USUARIOS}}/{{IDPOST_USUARIO}}",
											"host": [
												"{{URL_USUARIOS}}"
											],
											"path": [
												"{{IDPOST_USUARIO}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Obtener usuario por id exception",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se ha encontrado el usuario con el id indicado\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_USUARIOS}}/{{IDFOREXCEPTION}}",
											"host": [
												"{{URL_USUARIOS}}"
											],
											"path": [
												"{{IDFOREXCEPTION}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Put - Modificar usuario",
					"item": [
						{
							"name": "Modificar usuario OK",
							"item": [
								{
									"name": "Modificar usuario",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{IDPOST_USUARIO}},\r\n    \"nombre\": \"AnaFidalgo\",\r\n    \"apellido\": \"Fidalgo\",\r\n    \"ciudad\": \"{{PUT_CIUDAD_NOMBRE}}\"\r\n    \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_USUARIOS}}/editar",
											"host": [
												"{{URL_USUARIOS}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modificar usuario script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto que indica que fue actualizado el usuario\", function () {\r",
													"  pm.response.to.have.body(\"UPDATED\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status OK\", () => {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{IDPOST2_USUARIO}},\r\n    \"ciudad\": \"{{PUT_CIUDAD_NOMBRE}}\"\r\n    \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_USUARIOS}}/editar",
											"host": [
												"{{URL_USUARIOS}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Modificar usuario exception",
							"item": [
								{
									"name": "Modificar usuario exception",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{IDFOREXCEPTION}},\r\n    \"nombre\": \"Ana\",\r\n    \"apellido\": \"Fidalgo\",\r\n    \"pais\": \"{{PUT_CIUDAD_NOMBRE}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_USUARIOS}}/editar",
											"host": [
												"{{URL_USUARIOS}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modificar usuario exception script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se ha encontrado el usuario con el id indicado\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"   pm.response.to.have.status(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{IDFOREXCEPTION}},\r\n    \"nombre\": \"Ana\",\r\n    \"apellido\": \"Fidalgo\",\r\n    \"pais\": \"{{PUT_CIUDAD_NOMBRE}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_USUARIOS}}/editar",
											"host": [
												"{{URL_USUARIOS}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modificar usuario exception script tests sin id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"Se debe conocer el id del usuario a actualizar\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Bad Request\", () => {\r",
													"   pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": null,\r\n    \"nombre\": \"Ana\",\r\n    \"apellido\": \"Fidalgo\",\r\n    \"pais\": \"{{PUT_CIUDAD_NOMBRE}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_USUARIOS}}/editar",
											"host": [
												"{{URL_USUARIOS}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Delete - Eliminar usuario",
					"item": [
						{
							"name": "Eliminar usuario OK",
							"item": [
								{
									"name": "Eliminar usuario",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_USUARIOS}}/eliminar/{{IDPOST_USUARIO}}",
											"host": [
												"{{URL_USUARIOS}}"
											],
											"path": [
												"eliminar",
												"{{IDPOST_USUARIO}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Eliminar usuario script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto que indica que fue borrada la ciudad\", function () {\r",
													"  pm.response.to.have.body(\"DELETED\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_USUARIOS}}/eliminar/{{IDPOST2_USUARIO}}",
											"host": [
												"{{URL_USUARIOS}}"
											],
											"path": [
												"eliminar",
												"{{IDPOST2_USUARIO}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Eliminar usuario exception",
							"item": [
								{
									"name": "Eliminar usuario exception",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_USUARIOS}}/eliminar/{{IDFOREXCEPTION}}",
											"host": [
												"{{URL_USUARIOS}}"
											],
											"path": [
												"eliminar",
												"{{IDFOREXCEPTION}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Eliminar usuario exception script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se ha encontrado el usuario con el id indicado\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_USUARIOS}}/eliminar/{{IDFOREXCEPTION}}",
											"host": [
												"{{URL_USUARIOS}}"
											],
											"path": [
												"eliminar",
												"{{IDFOREXCEPTION}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Reservas Testing",
			"item": [
				{
					"name": "Post - Agregar reserva",
					"item": [
						{
							"name": "Agregar reserva",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Setear el ID de la ciudad posteada\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"   pm.collectionVariables.set(\"IDPOST2_RESERVA\", jsonData);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TOKENLOGIN_USUARIO}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fechaInicioReserva\": \"{{INICIORESERVA_POST}}\",\r\n  \"fechaFinReserva\": \"{{FINRESERVA_POST}}\",\r\n  \"horaEstimadaDeLlegada\": \"15:00\",\r\n   \"mensajeUsuario\": \"Quiero reservar\",\r\n   \"vacunadoCovid\": true,\r\n   \"usuario_id\": 1,\r\n   \"producto_id\": 2\r\n \r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_RESERVAS}}/agregar",
									"host": [
										"{{URL_RESERVAS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar reserva exception script tests token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"El código de status es 400\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header es application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"La respuesta es un status Bad Request\", () => {\r",
											"    pm.response.to.have.status(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fechaInicioReserva\": \"2022-09-05\",\r\n  \"fechaFinReserva\": \"2022-09-05\",\r\n  \"horaEstimadaDeLlegada\": \"15:00\",\r\n   \"mensajeUsuario\": \"Quiero reservar\",\r\n   \"vacunadoCovid\": true,\r\n   \"usuario_id\": 1,\r\n   \"producto_id\": 2\r\n \r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_RESERVAS}}/agregar",
									"host": [
										"{{URL_RESERVAS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar reserva script tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"console.log(jsonData)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header es application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Testear que el tipo de respuesta sea un el id (tipo number)\", () => {\r",
											"    \r",
											"    pm.expect(jsonData).to.be.a(\"number\");\r",
											"  \r",
											"});\r",
											"\r",
											"pm.test(\"La respuesta es un status OK\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Setear el ID de la reserva posteada\", () => {\r",
											"    \r",
											"   pm.collectionVariables.set(\"IDPOST_RESERVA\", jsonData);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TOKENLOGIN_USUARIO}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fechaInicioReserva\": \"2022-09-15\",\r\n  \"fechaFinReserva\": \"2022-09-15\",\r\n  \"horaEstimadaDeLlegada\": \"15:00\",\r\n   \"mensajeUsuario\": \"Quiero reservar\",\r\n   \"vacunadoCovid\": true,\r\n   \"usuario_id\": 1,\r\n   \"producto_id\": 2\r\n \r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_RESERVAS}}/agregar",
									"host": [
										"{{URL_RESERVAS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar reserva exception script tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"El código de status es 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header es application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Length header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
											"  pm.response.to.have.body(\"El producto ya tiene reservas para ese rango de fechas\");\r",
											"});\r",
											"\r",
											"pm.test(\"La respuesta es un status Bad Request\", () => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TOKENLOGIN_USUARIO}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fechaInicioReserva\": \"{{INICIORESERVA_POST}}\",\r\n  \"fechaFinReserva\": \"{{FINRESERVA_POST}}\",\r\n  \"horaEstimadaDeLlegada\": \"15:00\",\r\n   \"mensajeUsuario\": \"Quiero reservar\",\r\n   \"vacunadoCovid\": true,\r\n   \"usuario_id\": 1,\r\n   \"producto_id\": 2\r\n \r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_RESERVAS}}/agregar",
									"host": [
										"{{URL_RESERVAS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar reserva exception script tests resource not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"El código de status es 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header es application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Length header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
											"  pm.response.to.have.body(\"Se debe conocer el id del producto a reservar y el id del usuario que reserva\");\r",
											"});\r",
											"\r",
											"pm.test(\"La respuesta es un status Bad Request\", () => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TOKENLOGIN_USUARIO}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fechaInicioReserva\": \"2022-09-05\",\r\n  \"fechaFinReserva\": \"2022-09-05\",\r\n  \"horaEstimadaDeLlegada\": \"15:00\",\r\n   \"mensajeUsuario\": \"Quiero reservar\",\r\n   \"vacunadoCovid\": true,\r\n   \"usuario_id\": null,\r\n   \"producto_id\": 2\r\n \r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_RESERVAS}}/agregar",
									"host": [
										"{{URL_RESERVAS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar reserva exception script tests  null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"El código de status es 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header es application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Length header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
											"  pm.response.to.have.body(\"Se debe conocer la fecha de inicio y la fecha de fin para la reserva\");\r",
											"});\r",
											"\r",
											"pm.test(\"La respuesta es un status Bad Request\", () => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TOKENLOGIN_USUARIO}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fechaInicioReserva\": null,\r\n  \"fechaFinReserva\": \"2022-09-05\",\r\n  \"horaEstimadaDeLlegada\": \"15:00\",\r\n   \"mensajeUsuario\": \"Quiero reservar\",\r\n   \"vacunadoCovid\": true,\r\n   \"usuario_id\": 1,\r\n   \"producto_id\": 2\r\n \r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_RESERVAS}}/agregar",
									"host": [
										"{{URL_RESERVAS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get - Obtener reserva",
					"item": [
						{
							"name": "Obtener todas las reservas",
							"item": [
								{
									"name": "Obtener todas las reservas",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_RESERVAS}}/todas",
											"host": [
												"{{URL_RESERVAS}}"
											],
											"path": [
												"todas"
											]
										}
									},
									"response": []
								},
								{
									"name": "Obtener todas  las reservas script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
													"});\r",
													"\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"number\" },\r",
													"        \"fechaInicioReserva\": { \"type\": \"string\" },\r",
													"        \"fechaFinReserva\": { \"type\": \"string\" },\r",
													"        \"producto_id\": { \"type\": \"number\" }\r",
													"    }\r",
													"};\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validate schema\", () => {\r",
													"    pm.expect(responseJson[pm.info.iteration]).to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"pm.test(\"Validar que los resultados estén ordenados por ID de menor a mayor\", () => {\r",
													"    const ascendente = responseJson.map(item => item.id).every((current, index, ids) => index === 0 || current >= ids[index-1]);\r",
													"    \r",
													"    pm.expect(ascendente).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Se espera que la respuesta sea un array\", () => {\r",
													"   \r",
													"  pm.expect(responseJson).to.be.an(\"array\");\r",
													"   \r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_RESERVAS}}/todas",
											"host": [
												"{{URL_RESERVAS}}"
											],
											"path": [
												"todas"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Obtener reserva por id",
							"item": [
								{
									"name": "Obtener reserva por id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"number\" },\r",
													"        \"fechaInicioReserva\": { \"type\": \"string\" },\r",
													"        \"fechaFinReserva\": { \"type\": \"string\" },\r",
													"        \"horaEstimadaDeLlegada\": { \"type\": \"string\" },\r",
													"        \"mensajeUsuario\": { \"type\": \"string\" },\r",
													"        \"vacunadoCovid\": { \"type\": \"boolean\" },\r",
													"        \"usuario_id\": { \"type\": \"number\" },\r",
													"        \"producto_id\": { \"type\": \"number\" },\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"El ID es el mismo que el obtenido al hacer el post de la ciudad previamente\", () => {\r",
													"  pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get(\"IDPOST_RESERVA\")));\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_RESERVAS}}/{{IDPOST_RESERVA}}",
											"host": [
												"{{URL_RESERVAS}}"
											],
											"path": [
												"{{IDPOST_RESERVA}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Obtener reserva por id  producto",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"number\" },\r",
													"        \"fechaInicioReserva\": { \"type\": \"string\" },\r",
													"        \"fechaFinReserva\": { \"type\": \"string\" }\r",
													"       \r",
													"    }\r",
													"};\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validate schema\", () => {\r",
													"    pm.expect(responseJson[pm.info.iteration]).to.have.jsonSchema(schema);\r",
													"});\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_RESERVAS}}/porProductoId/1",
											"host": [
												"{{URL_RESERVAS}}"
											],
											"path": [
												"porProductoId",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Obtener reserva por id  producto exception",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se encontraron reservas para el producto indicado\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_RESERVAS}}/porProductoId/10",
											"host": [
												"{{URL_RESERVAS}}"
											],
											"path": [
												"porProductoId",
												"10"
											]
										}
									},
									"response": []
								},
								{
									"name": "Obtener reserva por id  usuario",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"number\" },\r",
													"        \"fechaInicioReserva\": { \"type\": \"string\" },\r",
													"        \"fechaFinReserva\": { \"type\": \"string\" },\r",
													"        \"producto_id\": { \"type\": \"number\" }\r",
													"       \r",
													"    }\r",
													"};\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validate schema\", () => {\r",
													"    pm.expect(responseJson[pm.info.iteration]).to.have.jsonSchema(schema);\r",
													"});\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_RESERVAS}}/porUsuarioId/1",
											"host": [
												"{{URL_RESERVAS}}"
											],
											"path": [
												"porUsuarioId",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Obtener reserva por id  usuario  aws",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"number\" },\r",
													"        \"fechaInicioReserva\": { \"type\": \"string\" },\r",
													"        \"fechaFinReserva\": { \"type\": \"string\" },\r",
													"        \"producto_id\": { \"type\": \"number\" }\r",
													"       \r",
													"    }\r",
													"};\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validate schema\", () => {\r",
													"    pm.expect(responseJson[pm.info.iteration]).to.have.jsonSchema(schema);\r",
													"});\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://digitalbookingg2sprint3v2-env.eba-wfrhwq8z.us-east-1.elasticbeanstalk.com/reservas/porUsuarioId/1",
											"protocol": "http",
											"host": [
												"digitalbookingg2sprint3v2-env",
												"eba-wfrhwq8z",
												"us-east-1",
												"elasticbeanstalk",
												"com"
											],
											"path": [
												"reservas",
												"porUsuarioId",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Obtener reserva por id  usuario exception",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se encontraron reservas para el usuario indicado\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_RESERVAS}}/porUsuarioId/7",
											"host": [
												"{{URL_RESERVAS}}"
											],
											"path": [
												"porUsuarioId",
												"7"
											]
										}
									},
									"response": []
								},
								{
									"name": "Obtener reserva por id exception",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se ha encontrado la reserva con ese id\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_RESERVAS}}/{{IDFOREXCEPTION}}",
											"host": [
												"{{URL_RESERVAS}}"
											],
											"path": [
												"{{IDFOREXCEPTION}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Put - Modificar reserva",
					"item": [
						{
							"name": "Modificar reserva OK",
							"item": [
								{
									"name": "Modificar reserva",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{IDPOST2_RESERVA}},\r\n    \"fechaInicioReserva\": \"2022-10-03\",\r\n  \"fechaFinReserva\": \"2022-10-03\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_RESERVAS}}/editar",
											"host": [
												"{{URL_RESERVAS}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modificar reserva script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto que indica que fue actualizada la ciudad\", function () {\r",
													"  pm.response.to.have.body(\"UPDATED\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status OK\", () => {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{IDPOST_RESERVA}},\r\n    \"fechaInicioReserva\": \"2022-11-03\",\r\n  \"fechaFinReserva\": \"2022-11-03\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_RESERVAS}}/editar",
											"host": [
												"{{URL_RESERVAS}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Modificar reserva exception",
							"item": [
								{
									"name": "Modificar reserva exception",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"Para actualizar la reserva se debe conocer el id\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Bad Request\", () => {\r",
													"   pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": null,\r\n     \"fechaInicioReserva\": \"2022-11-05\",\r\n  \"fechaFinReserva\": \"2022-11-05\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_RESERVAS}}/editar",
											"host": [
												"{{URL_RESERVAS}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modificar reserva exception script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se ha encontrado la reserva con ése id para actualizar\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"   pm.response.to.have.status(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{IDFOREXCEPTION}},\r\n     \"fechaInicioReserva\": \"2022-11-05\",\r\n  \"fechaFinReserva\": \"2022-11-05\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_RESERVAS}}/editar",
											"host": [
												"{{URL_RESERVAS}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Delete - Eliminar reserva",
					"item": [
						{
							"name": "Eliminar reserva OK",
							"item": [
								{
									"name": "Eliminar reserva",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_RESERVAS}}/eliminar/{{IDPOST_RESERVA}}",
											"host": [
												"{{URL_RESERVAS}}"
											],
											"path": [
												"eliminar",
												"{{IDPOST_RESERVA}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Eliminar reserva script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto que indica que fue borrada la ciudad\", function () {\r",
													"  pm.response.to.have.body(\"DELETED\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_RESERVAS}}/eliminar/{{IDPOST2_RESERVA}}",
											"host": [
												"{{URL_RESERVAS}}"
											],
											"path": [
												"eliminar",
												"{{IDPOST2_RESERVA}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Eliminar reserva exception",
							"item": [
								{
									"name": "Eliminar reserva exception",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_RESERVAS}}/eliminar/{{IDFOREXCEPTION}}",
											"host": [
												"{{URL_RESERVAS}}"
											],
											"path": [
												"eliminar",
												"{{IDFOREXCEPTION}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Eliminar reserva exception script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se ha encontrado la reserva a elimnar\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_RESERVAS}}/eliminar/{{IDFOREXCEPTION}}",
											"host": [
												"{{URL_RESERVAS}}"
											],
											"path": [
												"eliminar",
												"{{IDFOREXCEPTION}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "IDPOST_CATEGORIA",
			"value": 6
		},
		{
			"key": "IDFOREXCEPTION",
			"value": "1500",
			"type": "string"
		},
		{
			"key": "IDPOST2_CATEGORIA",
			"value": 5,
			"type": "string"
		},
		{
			"key": "URL_CATEGORIAS",
			"value": "http://localhost:8080/categorias",
			"type": "string"
		},
		{
			"key": "POST_HOTELES_CATEGORIA",
			"value": "Hoteles",
			"type": "string"
		},
		{
			"key": "POST_DESCRIPCION",
			"value": "Descripcion post",
			"type": "string"
		},
		{
			"key": "PUT_DESCRIPCION",
			"value": "Descripcion modificada",
			"type": "string"
		},
		{
			"key": "URL_PRODUCTOS",
			"value": "http://localhost:8080/productos",
			"type": "string"
		},
		{
			"key": "IDPOST_PRODUCTO",
			"value": 33,
			"type": "string"
		},
		{
			"key": "IMGEJEMPLO_BUCKET",
			"value": "https://img-g2.s3.amazonaws.com/productos/001-001.jpg",
			"type": "string"
		},
		{
			"key": "IDPOST2_PRODUCTO",
			"value": 34,
			"type": "string"
		},
		{
			"key": "IDCIUDAD_GETPRODUCTOS",
			"value": "1",
			"type": "string"
		},
		{
			"key": "IDCATEGORIA_GETPRODUCTOS",
			"value": "1",
			"type": "string"
		},
		{
			"key": "IDPOST_CIUDAD",
			"value": 6,
			"type": "string"
		},
		{
			"key": "IDPOST2_CIUDAD",
			"value": 5,
			"type": "string"
		},
		{
			"key": "URL_CIUDADES",
			"value": "http://localhost:8080/ciudades",
			"type": "string"
		},
		{
			"key": "POST_CIUDAD_NOMBRE",
			"value": "Ushuaia",
			"type": "string"
		},
		{
			"key": "POST_CIUDAD_PROVINCIA",
			"value": "Tierra del Fuego",
			"type": "string"
		},
		{
			"key": "POST_CIUDAD_PAIS",
			"value": "Argentina",
			"type": "string"
		},
		{
			"key": "PUT_CIUDAD_NOMBRE",
			"value": "Río Grande",
			"type": "string"
		},
		{
			"key": "URL_SERVICIO_AWS",
			"value": "http://digitalbookingg2sprint3v2-env.eba-wfrhwq8z.us-east-1.elasticbeanstalk.com",
			"type": "string"
		},
		{
			"key": "URL_USUARIOS",
			"value": "http://localhost:8080/usuarios",
			"type": "string"
		},
		{
			"key": "IDPOST_USUARIO",
			"value": "4",
			"type": "string"
		},
		{
			"key": "IDPOST2_USUARIO",
			"value": "5",
			"type": "string"
		},
		{
			"key": "URL_RESERVAS",
			"value": "http://localhost:8080/reservas",
			"type": "string"
		},
		{
			"key": "IDPOST_RESERVA",
			"value": "7",
			"type": "string"
		},
		{
			"key": "IDPOST2_RESERVA",
			"value": "8",
			"type": "string"
		},
		{
			"key": "TOKENREGISTRO_USUARIO",
			"value": "registro",
			"type": "string"
		},
		{
			"key": "TOKENREGISTRO2_USUARIO",
			"value": "registro2",
			"type": "string"
		},
		{
			"key": "TOKENLOGIN_USUARIO",
			"value": "login",
			"type": "string"
		},
		{
			"key": "INICIORESERVA_POST",
			"value": "2022-09-03",
			"type": "string"
		},
		{
			"key": "FINRESERVA_POST",
			"value": "2022-09-03",
			"type": "string"
		},
		{
			"key": "LOCAL_URL_REACCIONES",
			"value": "http://localhost:8080/reacciones",
			"type": "string"
		},
		{
			"key": "ID_POST2_REACCION",
			"value": "37",
			"type": "string"
		},
		{
			"key": "ID_POST_REACCION",
			"value": "38",
			"type": "string"
		},
		{
			"key": "ID_POST_USUARIO_REACCION",
			"value": "8",
			"type": "string"
		},
		{
			"key": "ID_POST_PRODUCTO_REACCION",
			"value": "33",
			"type": "string"
		},
		{
			"key": "ID_POST2_USUARIO_REACCION",
			"value": "9",
			"type": "string"
		},
		{
			"key": "ID_POST2_PRODUCTO_REACCION",
			"value": "34",
			"type": "string"
		},
		{
			"key": "ID_EXCEPTION",
			"value": "1500",
			"type": "string"
		},
		{
			"key": "ID_POST_USUARIO_PUNTUACION",
			"value": ""
		},
		{
			"key": "ID_POST_PRODUCTO_PUNTUACION",
			"value": ""
		},
		{
			"key": "ID_POST2_USUARIO_PUNTUACION",
			"value": ""
		},
		{
			"key": "ID_POST2_PRODUCTO_PUNTUACION",
			"value": ""
		},
		{
			"key": "ID_POST3_PRODUCTO_PUNTUACION",
			"value": ""
		},
		{
			"key": "LOCAL_URL_PUNTUACIONES",
			"value": "http://localhost:8080/puntuaciones",
			"type": "string"
		},
		{
			"key": "ID_POST2_PUNTUACION",
			"value": ""
		},
		{
			"key": "PUNTUACION5",
			"value": "5",
			"type": "string"
		},
		{
			"key": "PUNTUACION3",
			"value": "3",
			"type": "string"
		},
		{
			"key": "ID_POST_PUNTUACION",
			"value": "17",
			"type": "string"
		},
		{
			"key": "PUNTUACION_EXCEPTION1",
			"value": "100",
			"type": "string"
		},
		{
			"key": "PUNTUACION_EXCEPTION2",
			"value": "1000",
			"type": "string"
		},
		{
			"key": "ID_POST_USUARIO_PRODUCTO",
			"value": "",
			"type": "string"
		},
		{
			"key": "TOKEN_POST_USUARIO_PRODUCTO",
			"value": "5",
			"type": "string"
		},
		{
			"key": "ID_POST2_USUARIO_PRODUCTO",
			"value": "",
			"type": "string"
		},
		{
			"key": "TOKEN_POST_USUARIO2_PRODUCTO",
			"value": "6",
			"type": "string"
		},
		{
			"key": "IDPOST3_PRODUCTO",
			"value": "5",
			"type": "string"
		},
		{
			"key": "IDPOST4_PRODUCTO",
			"value": "6",
			"type": "string"
		},
		{
			"key": "FECHA_INICIO_RESERVA_PRODUCTO1",
			"value": "2022-06-30",
			"type": "string"
		},
		{
			"key": "FECHA_FIN_RESERVA_PRODUCTO1",
			"value": "2022-07-05",
			"type": "string"
		},
		{
			"key": "FECHA_INICIO_RESERVA_PRODUCTO2",
			"value": "",
			"type": "string"
		},
		{
			"key": "FECHA_FIN_RESERVA_PRODUCTO2",
			"value": "",
			"type": "string"
		},
		{
			"key": "FECHA_INICIO_RESERVA_PRODUCTO_EXCEPTION",
			"value": "",
			"type": "string"
		},
		{
			"key": "FECHA_FIN_RESERVA_PRODUCTO_EXCEPTION",
			"value": "",
			"type": "string"
		},
		{
			"key": "ID_CIUDAD_DISPONIBILIDAD_EXCEPTION",
			"value": "5000",
			"type": "string"
		}
	]
}