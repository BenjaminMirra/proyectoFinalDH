{
	"info": {
		"_postman_id": "804f0994-fcec-47e9-a93a-a6cb8f7d89b0",
		"name": "ProyectoIntegradorGrupo2",
		"description": "Esta colección contiene los test pertinentes de realizar para probar el funcionamiento de las APIs del proyecto integrador.\n\nLa colección contiene subcarpetas que corresponden al testing de cada API de la aplicación. Y dentro de cada subcarpeta se encuentran los test de los métodos del endpoint.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18041092"
	},
	"item": [
		{
			"name": "Categorias Testing",
			"item": [
				{
					"name": "Post - Agregar categoria",
					"item": [
						{
							"name": "Agregar categoria",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Setear el ID de la categoria posteada\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"   pm.collectionVariables.set(\"IDPOST2_CATEGORIA\", jsonData);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"titulo\": \"{{POST_HOTELES_CATEGORIA}}\",\r\n        \"descripcion\": \"{{POST_DESCRIPCION}}\",\r\n        \"url_imagen\": \"https://images.unsplash.com/photo-1591088398332-8a7791972843?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1374\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_CATEGORIAS}}/agregar",
									"host": [
										"{{URL_CATEGORIAS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar categoria script tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"console.log(jsonData)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header es application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Testear que el tipo de respuesta sea un number\", () => {\r",
											"    \r",
											"    pm.expect(jsonData).to.be.a(\"number\");\r",
											"  \r",
											"});\r",
											"\r",
											"pm.test(\"La respuesta es un status OK\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Setear el ID de la categoria posteada\", () => {\r",
											"    \r",
											"   pm.collectionVariables.set(\"IDPOST_CATEGORIA\", jsonData);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n        \"titulo\": \"{{POST_HOTELES_CATEGORIA}}\",\r\n        \"descripcion\": \"{{POST_DESCRIPCION}}\",\r\n        \"url_imagen\": \"https://images.unsplash.com/photo-1591088398332-8a7791972843?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1374\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_CATEGORIAS}}/agregar",
									"host": [
										"{{URL_CATEGORIAS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar categoria exception script tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"El código de status es 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header es application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Length header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
											"  pm.response.to.have.body(\"No se puede agregar una categoria con campos nulos o vacíos\");\r",
											"});\r",
											"\r",
											"pm.test(\"La respuesta es un status Bad Request\", () => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"titulo\": \"{{POST_HOTELES_CATEGORIA}}\",\r\n        \"descripcion\": \"{{POST_DESCRIPCION}}\",\r\n        \"url_imagen\": \"\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_CATEGORIAS}}/agregar",
									"host": [
										"{{URL_CATEGORIAS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get - Obtener categorias",
					"item": [
						{
							"name": "Obtener todas las categorias",
							"item": [
								{
									"name": "Peticion Get todas",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_CATEGORIAS}}/todas",
											"host": [
												"{{URL_CATEGORIAS}}"
											],
											"path": [
												"todas"
											]
										}
									},
									"response": []
								},
								{
									"name": "Peticion Get todas script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo id\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo titulo\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"titulo\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo descripcion\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"descripcion\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo url_imagen\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"url_imagen\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar categoria Hoteles\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Hoteles\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar categoria Hostels\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Hostels\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar categoria Departamentos\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Departamentos\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Validar categoria Bed & Breakfast\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Bed & Breakfast\");\r",
													"});\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo titulo\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].titulo).to.be.a('string');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"  \r",
													"    pm.test(\"Validar atributo titulo como una de las cuatro categorias solicitadas\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].titulo).to.be.oneOf([\"Departamentos\", \"Hostels\", \"Hoteles\", \"Bed & Breakfast\"]);\r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo descripcion\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].descripcion).to.be.a('string');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo id\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].id).to.be.a('number');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"La url de la imagen es un string\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].url_imagen).to.be.a('string');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Se espera que los elementos dentro de la respuesta sean objetos\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration]).to.be.an('object');\r",
													"});\r",
													"}\r",
													"\r",
													"pm.test(\"Se espera que la respuesta sea un array\", () => {\r",
													"   \r",
													"  pm.expect(responseJson).to.be.an(\"array\");\r",
													"   \r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status OK\", () => {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_CATEGORIAS}}/todas",
											"host": [
												"{{URL_CATEGORIAS}}"
											],
											"path": [
												"todas"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Obtener categoria por id",
							"item": [
								{
									"name": "Obtener categoria por id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
													"});\r",
													"\r",
													"pm.test(\"El id está presente y es un numero\", () => {\r",
													"   \r",
													"    pm.expect(responseJson.id).to.be.a('number');\r",
													"        \r",
													"});\r",
													"\r",
													"pm.test(\"El ID es el mismo que el obtenido al hacer el post de la categoria previamente\", () => {\r",
													"  pm.expect(responseJson.id).to.eql(pm.collectionVariables.get(\"IDPOST_CATEGORIA\"));\r",
													"});\r",
													"\r",
													"pm.test(\"La url de la imagen es un string\", () => {\r",
													"    \r",
													"    pm.expect(responseJson.url_imagen).to.be.a('string');\r",
													"    \r",
													"});\r",
													"\r",
													"pm.test(\"El titulo es uno de los asignados para categorizar\", () => {\r",
													"   \r",
													"    pm.expect(responseJson.titulo).to.be.oneOf([\"Departamentos\", \"Hostels\", \"Hoteles\", \"Bed & Breakfast\"]);\r",
													"     \r",
													"});\r",
													"\r",
													"pm.test(\"El titulo es el mismo que el enviado al hacer el post de la categoria previamente\", () => {\r",
													"  pm.expect(responseJson.titulo).to.eql(pm.collectionVariables.get(\"POST_HOTELES_CATEGORIA\"));\r",
													"});\r",
													"\r",
													"pm.test(\"La descripcion es un string\", () => {\r",
													"      pm.expect(responseJson.descripcion).to.be.a('string');\r",
													"       \r",
													"});\r",
													"\r",
													"pm.test(\"La descripción es el mismo que el enviado al hacer el post de la categoria previamente\", () => {\r",
													"  pm.expect(responseJson.descripcion).to.eql(pm.collectionVariables.get(\"POST_DESCRIPCION\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_CATEGORIAS}}/{{IDPOST_CATEGORIA}}",
											"host": [
												"{{URL_CATEGORIAS}}"
											],
											"path": [
												"{{IDPOST_CATEGORIA}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Obtener categoria por id exception",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se pudo encontrar la categoria con el id indicado\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_CATEGORIAS}}/{{IDFOREXCEPTION}}",
											"host": [
												"{{URL_CATEGORIAS}}"
											],
											"path": [
												"{{IDFOREXCEPTION}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Put - Modificar categoria",
					"item": [
						{
							"name": "Modificar categoria OK",
							"item": [
								{
									"name": "Modificar categoria",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"id\": {{IDPOST_CATEGORIA}},\r\n        \"titulo\": \"Hoteles\",\r\n        \"descripcion\": \"{{PUT_DESCRIPCION}}\",\r\n        \"url_imagen\": \"https://images.unsplash.com/photo-1591088398332-8a7791972843?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1374\"\r\n     \r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_CATEGORIAS}}/editar",
											"host": [
												"{{URL_CATEGORIAS}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modificar categoria script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto que indica que fue actualizada la categoria\", function () {\r",
													"  pm.response.to.have.body(\"UPDATED\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status OK\", () => {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"id\": {{IDPOST2_CATEGORIA}},\r\n        \"titulo\": \"Hoteles\",\r\n        \"descripcion\": \"{{PUT_DESCRIPCION}}\",\r\n        \"url_imagen\": \"https://images.unsplash.com/photo-1591088398332-8a7791972843?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1374\" \r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_CATEGORIAS}}/editar",
											"host": [
												"{{URL_CATEGORIAS}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Modificar categoria exception",
							"item": [
								{
									"name": "Modificar categoria exception",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"id\": {{IDFOREXCEPTION}},\r\n        \"titulo\": \"Hoteles\",\r\n        \"descripcion\": \"Habitaciones con baño privado, Recepción 24 Hs, Servicio de Room Service, Lavandería y Valet Parking\",\r\n        \"url_imagen\": \"https://images.unsplash.com/photo-1591088398332-8a7791972843?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1374\" \r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_CATEGORIAS}}/editar",
											"host": [
												"{{URL_CATEGORIAS}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modificar categoria exception script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se pudo encontrar la categoria para editar\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"   pm.response.to.have.status(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"id\": {{IDFOREXCEPTION}},\r\n        \"titulo\": \"Hoteles\",\r\n        \"descripcion\": \"Habitaciones con baño privado, Recepción 24 Hs, Servicio de Room Service, Lavandería y Valet Parking\",\r\n        \"url_imagen\": \"https://images.unsplash.com/photo-1591088398332-8a7791972843?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1374\" \r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_CATEGORIAS}}/editar",
											"host": [
												"{{URL_CATEGORIAS}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Delete - Eliminar categoria",
					"item": [
						{
							"name": "Eliminar categoria OK",
							"item": [
								{
									"name": "Eliminar categoria",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_CATEGORIAS}}/{{IDPOST_CATEGORIA}}",
											"host": [
												"{{URL_CATEGORIAS}}"
											],
											"path": [
												"{{IDPOST_CATEGORIA}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Eliminar categoria script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto que indica que fue borrada la categoria\", function () {\r",
													"  pm.response.to.have.body(\"DELETED\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_CATEGORIAS}}/{{IDPOST2_CATEGORIA}}",
											"host": [
												"{{URL_CATEGORIAS}}"
											],
											"path": [
												"{{IDPOST2_CATEGORIA}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Eliminar categoria exception",
							"item": [
								{
									"name": "Eliminar categoria exception",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_CATEGORIAS}}/{{IDFOREXCEPTION}}",
											"host": [
												"{{URL_CATEGORIAS}}"
											],
											"path": [
												"{{IDFOREXCEPTION}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Eliminar categoria exception script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se pudo encontrar la categoria a eliminar\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_CATEGORIAS}}/{{IDFOREXCEPTION}}",
											"host": [
												"{{URL_CATEGORIAS}}"
											],
											"path": [
												"{{IDFOREXCEPTION}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Productos Testing",
			"item": [
				{
					"name": "Post - Agregar producto",
					"item": [
						{
							"name": "Agregar producto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Setear el ID del producto posteado\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"   pm.collectionVariables.set(\"IDPOST_PRODUCTO\", jsonData);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"titulo\": \"Casona\",\r\n        \"titulo_descripcion\": \"{{POST_DESCRIPCION}}\",\r\n        \"descripcion\": \"Casona\",\r\n        \"puntaje\":8,\r\n        \"direccion\":\"Calle Imaginaria 123\",\r\n        \"latitud\":-8.5,\r\n        \"longitud\":-8.5,\r\n        \"politicaListDTO\": [\r\n            {\"descripcion\": \"No fumar\",\r\n            \"tipo_politica_id\":1},\r\n            {\"descripcion\": \"Con 10 días de anticipacion\",\r\n            \"tipo_politica_id\":2},\r\n            {\"descripcion\": \"Usar barbijo\",\r\n            \"tipo_politica_id\":3}\r\n        ],\r\n        \"categoria_id\":4,\r\n        \"ciudad_id\":3,\r\n        \"reservaDTOList\": [\r\n            {\"fechaInicioReserva\": \"2022-08-03\",\r\n            \"fechaFinReserva\":\"2022-08-08\"},\r\n            {\"fechaInicioReserva\": \"2022-08-15\",\r\n            \"fechaFinReserva\":\"2022-08-20\"},\r\n            {\"fechaInicioReserva\": \"2022-08-25\",\r\n            \"fechaFinReserva\":\"2022-08-30\"}\r\n        ],\r\n        \"imagenDTOList\": [\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista interior\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista cocina\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"}\r\n        ],\r\n        \"caracteristicasDTOList\": [\r\n            {\"titulo\": \"WiFi\",\r\n            \"nombre_icono\":\"WiFi\"},\r\n            {\"titulo\": \"Cocina\",\r\n            \"nombre_icono\":\"Cocina\"},\r\n            {\"titulo\": \"Aire acondicionado\",\r\n            \"nombre_icono\":\"airConditioner\"}\r\n        ]\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_PRODUCTOS}}/agregar",
									"host": [
										"{{URL_PRODUCTOS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar producto script tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"console.log(jsonData)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header es application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Testear que el tipo de respuesta sea un number\", () => {\r",
											"    \r",
											"    pm.expect(jsonData).to.be.a(\"number\");\r",
											"  \r",
											"});\r",
											"\r",
											"pm.test(\"La respuesta es un status OK\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Setear el ID del producto posteado\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"   pm.collectionVariables.set(\"IDPOST2_PRODUCTO\", jsonData);\r",
											"});\r",
											"\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"number\"\r",
											"};\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"titulo\": \"Hotel Bariloche\",\r\n        \"titulo_descripcion\": \"{{POST_DESCRIPCION}}\",\r\n        \"descripcion\": \"El hotel mejor ubicado en Bariloche\",\r\n        \"puntaje\":8,\r\n        \"direccion\":\"Calle Imaginaria 123\",\r\n        \"latitud\":-8.5,\r\n        \"longitud\":-8.5,\r\n        \"politicaListDTO\": [\r\n            {\"descripcion\": \"No fumar\",\r\n            \"tipo_politica_id\":1},\r\n            {\"descripcion\": \"Con 10 días de anticipacion\",\r\n            \"tipo_politica_id\":2},\r\n            {\"descripcion\": \"Usar barbijo\",\r\n            \"tipo_politica_id\":3}\r\n        ],\r\n        \"categoria_id\":4,\r\n        \"ciudad_id\":3,\r\n        \"reservaDTOList\": [\r\n            {\"fechaInicioReserva\": \"2022-08-03\",\r\n            \"fechaFinReserva\":\"2022-08-08\"},\r\n            {\"fechaInicioReserva\": \"2022-08-15\",\r\n            \"fechaFinReserva\":\"2022-08-20\"},\r\n            {\"fechaInicioReserva\": \"2022-08-25\",\r\n            \"fechaFinReserva\":\"2022-08-30\"}\r\n        ],\r\n        \"imagenDTOList\": [\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista interior\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista cocina\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"}\r\n        ],\r\n        \"caracteristicasDTOList\": [\r\n            {\"titulo\": \"WiFi\",\r\n            \"nombre_icono\":\"WiFi\"},\r\n            {\"titulo\": \"Cocina\",\r\n            \"nombre_icono\":\"Cocina\"},\r\n            {\"titulo\": \"Aire acondicionado\",\r\n            \"nombre_icono\":\"airConditioner\"}\r\n        ]\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_PRODUCTOS}}/agregar",
									"host": [
										"{{URL_PRODUCTOS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar producto exception script tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"El código de status es 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header es application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Length header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
											"  pm.response.to.have.body(\"No se puede guardar un producto sin asignarle una ciudad y/o categoria\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"La respuesta es un status Bad Request\", () => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"titulo\": \"Hotel Bariloche\",\r\n        \"titulo_descripcion\": \"{{POST_DESCRIPCION}}\",\r\n        \"descripcion\": \"El hotel mejor ubicado en Bariloche\",\r\n        \"puntaje\":8,\r\n        \"direccion\":\"Calle Imaginaria 123\",\r\n        \"latitud\":-8.5,\r\n        \"longitud\":-8.5,\r\n        \"politicaListDTO\": [\r\n            {\"descripcion\": \"No fumar\",\r\n            \"tipo_politica_id\":1},\r\n            {\"descripcion\": \"Con 10 días de anticipacion\",\r\n            \"tipo_politica_id\":2},\r\n            {\"descripcion\": \"Usar barbijo\",\r\n            \"tipo_politica_id\":3}\r\n        ],\r\n        \"categoria_id\":null,\r\n        \"ciudad_id\":3,\r\n        \"reservaDTOList\": [\r\n            {\"fechaInicioReserva\": \"2022-08-03\",\r\n            \"fechaFinReserva\":\"2022-08-08\"},\r\n            {\"fechaInicioReserva\": \"2022-08-15\",\r\n            \"fechaFinReserva\":\"2022-08-20\"},\r\n            {\"fechaInicioReserva\": \"2022-08-25\",\r\n            \"fechaFinReserva\":\"2022-08-30\"}\r\n        ],\r\n        \"imagenDTOList\": [\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista interior\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista cocina\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"}\r\n        ],\r\n        \"caracteristicasDTOList\": [\r\n            {\"titulo\": \"WiFi\",\r\n            \"nombre_icono\":\"WiFi\"},\r\n            {\"titulo\": \"Cocina\",\r\n            \"nombre_icono\":\"Cocina\"},\r\n            {\"titulo\": \"Aire acondicionado\",\r\n            \"nombre_icono\":\"airConditioner\"}\r\n        ]\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_PRODUCTOS}}/agregar",
									"host": [
										"{{URL_PRODUCTOS}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get - Obtener productos",
					"item": [
						{
							"name": "Obtener todos los productos",
							"item": [
								{
									"name": "Peticion Get todos",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_PRODUCTOS}}/todos",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"todos"
											]
										}
									},
									"response": []
								},
								{
									"name": "Peticion Get todos script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status OK\", () => {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
													"});\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   pm.test(\"Validar atributo id\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"id\");\r",
													"\r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"pm.test(\"Validar atributo titulo\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"titulo\");\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"pm.test(\"Validar atributo descripcion\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"descripcion\");\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"pm.test(\"Validar atributo titulo_descripcion\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"titulo_descripcion\");\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"pm.test(\"Validar atributo puntaje\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"puntaje\");\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"pm.test(\"Validar atributo direccion\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"direccion\");\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"pm.test(\"Validar atributo latitud\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"latitud\");\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"pm.test(\"Validar atributo longitud\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"longitud\");\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"pm.test(\"Validar atributo politicaListDTO\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"politicaListDTO\");\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"pm.test(\"Validar atributo categoria_id\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"categoria_id\");\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"pm.test(\"Validar atributo ciudad_id\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"ciudad_id\");\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"pm.test(\"Validar atributo reservaDTOList\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"reservaDTOList\");\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"pm.test(\"Validar atributo imagenDTOList\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"imagenDTOList\");\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"    for (let i = 0; i < responseJson[pm.info.iteration].imagenDTOList.length; i++) {\r",
													"        pm.test(\"Validar atributo id\", function () {\r",
													"    \r",
													"        pm.expect(responseJson[pm.info.iteration].imagenDTOList[pm.info.iteration].id).to.be.a('number');\r",
													"  \r",
													"        });\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"    for (let i = 0; i < responseJson[pm.info.iteration].imagenDTOList.length; i++) {\r",
													"        pm.test(\"Validar atributo url_img_producto\", function () {\r",
													"    \r",
													"        pm.expect(responseJson[pm.info.iteration].imagenDTOList[pm.info.iteration].url_img_producto).to.be.a('string');\r",
													"  \r",
													"        });\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"    for (let i = 0; i < responseJson[pm.info.iteration].imagenDTOList.length; i++) {\r",
													"        pm.test(\"Validar atributo titulo_img_producto\", function () {\r",
													"    \r",
													"        pm.expect(responseJson[pm.info.iteration].imagenDTOList[pm.info.iteration].titulo_img_producto).to.be.a('string');\r",
													"  \r",
													"        });\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"pm.test(\"Validar atributo caracteristicasDTOList\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"caracteristicasDTOList\");\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"    for (let i = 0; i < responseJson[pm.info.iteration].caracteristicasDTOList.length; i++) {\r",
													"        pm.test(\"Validar atributo id\", function () {\r",
													"    \r",
													"        pm.expect(responseJson[pm.info.iteration].caracteristicasDTOList[pm.info.iteration].id).to.be.a('number');\r",
													"  \r",
													"        });\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"    for (let i = 0; i < responseJson[pm.info.iteration].caracteristicasDTOList.length; i++) {\r",
													"        pm.test(\"Validar atributo titulo\", function () {\r",
													"    \r",
													"        pm.expect(responseJson[pm.info.iteration].caracteristicasDTOList[pm.info.iteration].titulo).to.be.a('string');\r",
													"  \r",
													"        });\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"    for (let i = 0; i < responseJson[pm.info.iteration].caracteristicasDTOList.length; i++) {\r",
													"        pm.test(\"Validar atributo nombre_icono\", function () {\r",
													"    \r",
													"        pm.expect(responseJson[pm.info.iteration].caracteristicasDTOList[pm.info.iteration].nombre_icono).to.be.a('string');\r",
													"  \r",
													"        });\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo titulo como string\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].titulo).to.be.a('string');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"  \r",
													"    pm.test(\"Validar atributo categoria_id como una de las cuatro categorias solicitadas\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].categoria_id).to.be.oneOf([1, 2, 3, 4]);\r",
													"});\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo descripcion\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].descripcion).to.be.a('string');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo id\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].id).to.be.a('number');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo titulo_descripcion\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].titulo_descripcion).to.be.a('string');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo puntaje\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].puntaje).to.be.a('number');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo direccion\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].direccion).to.be.a('string');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo latitud\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].latitud).to.be.a('number');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo longitud\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].longitud).to.be.a('number');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo politicaListDTO como lista vacía\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].politicaListDTO).to.be.an('array');\r",
													"    pm.expect(responseJson[pm.info.iteration].politicaListDTO.length).to.be.equal(0);\r",
													"\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo ciudad_id\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].ciudad_id).to.be.a('number');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo reservaDTOList como lista vacía\", function () {\r",
													"    \r",
													"   pm.expect(responseJson[pm.info.iteration].reservaDTOList).to.be.an('array');\r",
													"    pm.expect(responseJson[pm.info.iteration].reservaDTOList.length).to.be.equal(0);\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo imagenDTOList como lista no vacia\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].imagenDTOList).to.be.an('array');\r",
													"    pm.expect(responseJson[pm.info.iteration].imagenDTOList.length).to.not.equal(0);\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo caracteristicasDTOList como lista no vacia\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].caracteristicasDTOList).to.be.an('array');\r",
													"    pm.expect(responseJson[pm.info.iteration].caracteristicasDTOList.length).to.not.equal(0);\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Se espera que los elementos dentro de la respuesta sean objetos\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration]).to.be.an('object');\r",
													"});\r",
													"}\r",
													"\r",
													"pm.test(\"Se espera que la respuesta sea un array\", () => {\r",
													"   \r",
													"  pm.expect(responseJson).to.be.an(\"array\");\r",
													"   \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_PRODUCTOS}}/todos",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"todos"
											]
										}
									},
									"response": []
								},
								{
									"name": "Peticion Get todos ordenados",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_PRODUCTOS}}/todos/ordenados",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"todos",
												"ordenados"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Obtener producto por id",
							"item": [
								{
									"name": "Obtener producto por id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status OK\", () => {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
													"});\r",
													"\r",
													"   pm.test(\"Validar atributo id\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"id\");\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo titulo\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"titulo\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo descripcion\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"descripcion\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo titulo_descripcion\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"titulo_descripcion\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo puntaje\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"puntaje\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo direccion\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"direccion\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo latitud\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"latitud\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo longitud\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"longitud\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo politicaListDTO\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"politicaListDTO\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo categoria_id\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"categoria_id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo ciudad_id\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"ciudad_id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo reservaDTOList\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"reservaDTOList\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo imagenDTOList\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"imagenDTOList\");\r",
													"});\r",
													"\r",
													"for (let i = 0; i < responseJson.imagenDTOList.length; i++) {\r",
													"        pm.test(\"Validar atributo id\", function () {\r",
													"    \r",
													"        pm.expect(responseJson.imagenDTOList[pm.info.iteration].id).to.be.a('number');\r",
													"  \r",
													"    });\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.imagenDTOList.length; i++) {\r",
													"        pm.test(\"Validar atributo url_img_producto\", function () {\r",
													"    \r",
													"        pm.expect(responseJson.imagenDTOList[pm.info.iteration].url_img_producto).to.be.a('string');\r",
													"  \r",
													"    });\r",
													"}\r",
													"\r",
													"\r",
													"for (let i = 0; i < responseJson.imagenDTOList.length; i++) {\r",
													"        pm.test(\"Validar atributo titulo_img_producto\", function () {\r",
													"    \r",
													"        pm.expect(responseJson.imagenDTOList[pm.info.iteration].titulo_img_producto).to.be.a('string');\r",
													"  \r",
													"    });\r",
													"}\r",
													"\r",
													"pm.test(\"Validar atributo caracteristicasDTOList\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"caracteristicasDTOList\");\r",
													"});\r",
													"\r",
													"\r",
													"for (let i = 0; i < responseJson.caracteristicasDTOList.length; i++) {\r",
													"        pm.test(\"Validar atributo id\", function () {\r",
													"    \r",
													"        pm.expect(responseJson.caracteristicasDTOList[pm.info.iteration].id).to.be.a('number');\r",
													"  \r",
													"        });\r",
													"    }\r",
													"\r",
													"for (let i = 0; i < responseJson.caracteristicasDTOList.length; i++) {\r",
													"        pm.test(\"Validar atributo titulo\", function () {\r",
													"    \r",
													"        pm.expect(responseJson.caracteristicasDTOList[pm.info.iteration].titulo).to.be.a('string');\r",
													"  \r",
													"        });\r",
													"    }\r",
													"\r",
													"\r",
													"for (let i = 0; i < responseJson.caracteristicasDTOList.length; i++) {\r",
													"        pm.test(\"Validar atributo nombre_icono\", function () {\r",
													"    \r",
													"        pm.expect(responseJson.caracteristicasDTOList[pm.info.iteration].nombre_icono).to.be.a('string');\r",
													"  \r",
													"        });\r",
													"}\r",
													"\r",
													"pm.test(\"Validar atributo titulo como string\", function () {\r",
													"    \r",
													"    pm.expect(responseJson.titulo).to.be.a('string');\r",
													"  \r",
													"});\r",
													"\r",
													"   pm.test(\"Validar atributo categoria_id como una de las cuatro categorias solicitadas\", function () {\r",
													"    \r",
													"    pm.expect(responseJson.categoria_id).to.be.oneOf([1, 2, 3, 4]);\r",
													"});\r",
													"\r",
													"\r",
													" pm.test(\"Validar atributo descripcion\", function () {\r",
													"    \r",
													"    pm.expect(responseJson.descripcion).to.be.a('string');\r",
													"  \r",
													"});\r",
													"\r",
													"  pm.test(\"Validar atributo id\", function () {\r",
													"    \r",
													"    pm.expect(responseJson.id).to.be.a('number');\r",
													"  \r",
													"});\r",
													"\r",
													"pm.test(\"El ID es el mismo que el obtenido al hacer el post del producto previamente\", () => {\r",
													"  pm.expect(responseJson.id).to.eql(pm.collectionVariables.get(\"IDPOST_PRODUCTO\"));\r",
													"});\r",
													"\r",
													"  pm.test(\"Validar atributo titulo_descripcion\", function () {\r",
													"    \r",
													"    pm.expect(responseJson.titulo_descripcion).to.be.a('string');\r",
													"  \r",
													"});\r",
													"\r",
													"   pm.test(\"Validar atributo puntaje\", function () {\r",
													"    \r",
													"    pm.expect(responseJson.puntaje).to.be.a('number');\r",
													"  \r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo direccion\", function () {\r",
													"    \r",
													"    pm.expect(responseJson.direccion).to.be.a('string');\r",
													"  \r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo latitud\", function () {\r",
													"    \r",
													"    pm.expect(responseJson.latitud).to.be.a('number');\r",
													"  \r",
													"});\r",
													"\r",
													" pm.test(\"Validar atributo longitud\", function () {\r",
													"    \r",
													"    pm.expect(responseJson.longitud).to.be.a('number');\r",
													"  \r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo politicaListDTO como lista no vacía\", function () {\r",
													"    \r",
													"    pm.expect(responseJson.politicaListDTO).to.be.an('array');\r",
													"    pm.expect(responseJson.politicaListDTO.length).to.not.equal(0);\r",
													"\r",
													"  \r",
													"});\r",
													"\r",
													"    pm.test(\"Validar atributo ciudad_id\", function () {\r",
													"    \r",
													"    pm.expect(responseJson.ciudad_id).to.be.a('number');\r",
													"  \r",
													"});\r",
													"\r",
													" pm.test(\"Validar atributo reservaDTOList como lista vacía\", function () {\r",
													"    \r",
													"   pm.expect(responseJson.reservaDTOList).to.be.an('array');\r",
													"    pm.expect(responseJson.reservaDTOList.length).to.not.equal(0);\r",
													"  \r",
													"});\r",
													"\r",
													" pm.test(\"Validar atributo imagenDTOList como lista no vacia\", function () {\r",
													"    \r",
													"    pm.expect(responseJson.imagenDTOList).to.be.an('array');\r",
													"    pm.expect(responseJson.imagenDTOList.length).to.not.equal(0);\r",
													"  \r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo caracteristicasDTOList como lista no vacia\", function () {\r",
													"    \r",
													"    pm.expect(responseJson.caracteristicasDTOList).to.be.an('array');\r",
													"    pm.expect(responseJson.caracteristicasDTOList.length).to.not.equal(0);\r",
													"  \r",
													"});\r",
													"\r",
													"pm.test(\"Se espera que el elemento de respuesta sea un objeto\", function () {\r",
													"    \r",
													"    pm.expect(responseJson).to.be.an('object');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_PRODUCTOS}}/{{IDPOST_PRODUCTO}}",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"{{IDPOST_PRODUCTO}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Obtener producto por id exception",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se ha encontrado el producto con el id\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_PRODUCTOS}}/{{IDFOREXCEPTION}}",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"{{IDFOREXCEPTION}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Obtener productos por ciudad",
							"item": [
								{
									"name": "Peticion Get productos por Ciudad",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status OK\", () => {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
													"});\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"pm.test(\"El ID de la ciudad en cada producto es el mismo que el solicitado en la petición\", () => {\r",
													"  pm.expect(responseJson[pm.info.iteration].ciudad_id).to.eql(parseInt(pm.collectionVariables.get(\"IDCIUDAD_GETPRODUCTOS\")));\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"pm.test(\"Se espera que la respuesta sea un array\", () => {\r",
													"   \r",
													"  pm.expect(responseJson).to.be.an(\"array\");\r",
													"   \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_PRODUCTOS}}/porCiudad/{{IDCIUDAD_GETPRODUCTOS}}",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"porCiudad",
												"{{IDCIUDAD_GETPRODUCTOS}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Peticion Get productos por Ciudad exception",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se encontraron productos de ésa ciudad\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_PRODUCTOS}}/porCiudad/{{IDFOREXCEPTION}}",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"porCiudad",
												"{{IDFOREXCEPTION}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Obtener productos por categoria",
							"item": [
								{
									"name": "Peticion Get productos por Categoria",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status OK\", () => {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
													"});\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"   \r",
													"pm.test(\"El ID de la ciudad en cada producto es el mismo que el solicitado en la petición\", () => {\r",
													"  pm.expect(responseJson[pm.info.iteration].ciudad_id).to.eql(parseInt(pm.collectionVariables.get(\"IDCATEGORIA_GETPRODUCTOS\")));\r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"pm.test(\"Se espera que la respuesta sea un array\", () => {\r",
													"   \r",
													"  pm.expect(responseJson).to.be.an(\"array\");\r",
													"   \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_PRODUCTOS}}/porCategoria/{{IDCATEGORIA_GETPRODUCTOS}}",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"porCategoria",
												"{{IDCATEGORIA_GETPRODUCTOS}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Peticion Get productos por Categoria exception",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se encontraron productos con ésa categoria\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_PRODUCTOS}}/porCategoria/{{IDFOREXCEPTION}}",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"porCategoria",
												"{{IDFOREXCEPTION}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Put - Modificar producto",
					"item": [
						{
							"name": "Modificar producto OK",
							"item": [
								{
									"name": "Modificar producto",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{       \"id\": {{IDPOST_PRODUCTO}},\r\n        \"titulo\": \"Casona\",\r\n        \"titulo_descripcion\": \"{{PUT_DESCRIPCION}}\",\r\n        \"descripcion\": \"Casona\",\r\n        \"puntaje\":8,\r\n        \"direccion\":\"Calle Imaginaria 123\",\r\n        \"latitud\":-8.5,\r\n        \"longitud\":-8.5,\r\n        \"politicaListDTO\": [\r\n            {\"descripcion\": \"No fumar\",\r\n            \"tipo_politica_id\":1},\r\n            {\"descripcion\": \"Con 10 días de anticipacion\",\r\n            \"tipo_politica_id\":2},\r\n            {\"descripcion\": \"Usar barbijo\",\r\n            \"tipo_politica_id\":3}\r\n        ],\r\n        \"categoria_id\":4,\r\n        \"ciudad_id\":3,\r\n        \"reservaDTOList\": [\r\n            {\"fechaInicioReserva\": \"2022-08-03\",\r\n            \"fechaFinReserva\":\"2022-08-08\"},\r\n            {\"fechaInicioReserva\": \"2022-08-15\",\r\n            \"fechaFinReserva\":\"2022-08-20\"},\r\n            {\"fechaInicioReserva\": \"2022-08-25\",\r\n            \"fechaFinReserva\":\"2022-08-30\"}\r\n        ],\r\n        \"imagenDTOList\": [\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista interior\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista cocina\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"}\r\n        ],\r\n        \"caracteristicasDTOList\": [\r\n            {\"titulo\": \"WiFi\",\r\n            \"nombre_icono\":\"WiFi\"},\r\n            {\"titulo\": \"Cocina\",\r\n            \"nombre_icono\":\"Cocina\"},\r\n            {\"titulo\": \"Aire acondicionado\",\r\n            \"nombre_icono\":\"airConditioner\"}\r\n        ]\r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_PRODUCTOS}}/editar",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modificar producto script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto que indica que fue actualizado el producto\", function () {\r",
													"  pm.response.to.have.body(\"UPDATED\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status OK\", () => {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{       \"id\": {{IDPOST2_PRODUCTO}},\r\n        \"titulo\": \"Hotel Bariloche\",\r\n        \"titulo_descripcion\": \"{{POST_DESCRIPCION}}\",\r\n        \"descripcion\": \"El hotel mejor ubicado en Bariloche\",\r\n        \"puntaje\":8,\r\n        \"direccion\":\"Calle Imaginaria 123\",\r\n        \"latitud\":-8.5,\r\n        \"longitud\":-8.5,\r\n        \"politicaListDTO\": [\r\n            {\"descripcion\": \"No fumar\",\r\n            \"tipo_politica_id\":1},\r\n            {\"descripcion\": \"Con 10 días de anticipacion\",\r\n            \"tipo_politica_id\":2},\r\n            {\"descripcion\": \"Usar barbijo\",\r\n            \"tipo_politica_id\":3}\r\n        ],\r\n        \"categoria_id\":4,\r\n        \"ciudad_id\":3,\r\n        \"reservaDTOList\": [\r\n            {\"fechaInicioReserva\": \"2022-08-03\",\r\n            \"fechaFinReserva\":\"2022-08-08\"},\r\n            {\"fechaInicioReserva\": \"2022-08-15\",\r\n            \"fechaFinReserva\":\"2022-08-20\"},\r\n            {\"fechaInicioReserva\": \"2022-08-25\",\r\n            \"fechaFinReserva\":\"2022-08-30\"}\r\n        ],\r\n        \"imagenDTOList\": [\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista interior\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista cocina\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"}\r\n        ],\r\n        \"caracteristicasDTOList\": [\r\n            {\"titulo\": \"WiFi\",\r\n            \"nombre_icono\":\"WiFi\"},\r\n            {\"titulo\": \"Cocina\",\r\n            \"nombre_icono\":\"Cocina\"},\r\n            {\"titulo\": \"Aire acondicionado\",\r\n            \"nombre_icono\":\"airConditioner\"}\r\n        ]\r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_PRODUCTOS}}/editar",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Modificar producto exception",
							"item": [
								{
									"name": "Modificar producto exception",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"La respuesta es un status Bad Request\", () => {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"El producto debe tener asignada una ciudad y una categoria\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{       \"id\": {{IDPOST_PRODUCTO}},\r\n        \"titulo\": \"Casona\",\r\n        \"titulo_descripcion\": \"{{PUT_DESCRIPCION}}\",\r\n        \"descripcion\": \"Casona\",\r\n        \"puntaje\":8,\r\n        \"direccion\":\"Calle Imaginaria 123\",\r\n        \"latitud\":-8.5,\r\n        \"longitud\":-8.5,\r\n        \"politicaListDTO\": [\r\n            {\"descripcion\": \"No fumar\",\r\n            \"tipo_politica_id\":1},\r\n            {\"descripcion\": \"Con 10 días de anticipacion\",\r\n            \"tipo_politica_id\":2},\r\n            {\"descripcion\": \"Usar barbijo\",\r\n            \"tipo_politica_id\":3}\r\n        ],\r\n        \"categoria_id\":null,\r\n        \"ciudad_id\":3,\r\n        \"reservaDTOList\": [\r\n            {\"fechaInicioReserva\": \"2022-08-03\",\r\n            \"fechaFinReserva\":\"2022-08-08\"},\r\n            {\"fechaInicioReserva\": \"2022-08-15\",\r\n            \"fechaFinReserva\":\"2022-08-20\"},\r\n            {\"fechaInicioReserva\": \"2022-08-25\",\r\n            \"fechaFinReserva\":\"2022-08-30\"}\r\n        ],\r\n        \"imagenDTOList\": [\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista interior\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista cocina\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"}\r\n        ],\r\n        \"caracteristicasDTOList\": [\r\n            {\"titulo\": \"WiFi\",\r\n            \"nombre_icono\":\"WiFi\"},\r\n            {\"titulo\": \"Cocina\",\r\n            \"nombre_icono\":\"Cocina\"},\r\n            {\"titulo\": \"Aire acondicionado\",\r\n            \"nombre_icono\":\"airConditioner\"}\r\n        ]\r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_PRODUCTOS}}/editar",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modificar producto exception script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se ha encontrado el producto con ese id\" + pm.collectionVariables.get(\"IDFOREXCEPTION\") );\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"   pm.response.to.have.status(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{       \"id\": {{IDFOREXCEPTION}},\r\n        \"titulo\": \"Casona\",\r\n        \"titulo_descripcion\": \"{{PUT_DESCRIPCION}}\",\r\n        \"descripcion\": \"Casona\",\r\n        \"puntaje\":8,\r\n        \"direccion\":\"Calle Imaginaria 123\",\r\n        \"latitud\":-8.5,\r\n        \"longitud\":-8.5,\r\n        \"politicaListDTO\": [\r\n            {\"descripcion\": \"No fumar\",\r\n            \"tipo_politica_id\":1},\r\n            {\"descripcion\": \"Con 10 días de anticipacion\",\r\n            \"tipo_politica_id\":2},\r\n            {\"descripcion\": \"Usar barbijo\",\r\n            \"tipo_politica_id\":3}\r\n        ],\r\n        \"categoria_id\":4,\r\n        \"ciudad_id\":3,\r\n        \"reservaDTOList\": [\r\n            {\"fechaInicioReserva\": \"2022-08-03\",\r\n            \"fechaFinReserva\":\"2022-08-08\"},\r\n            {\"fechaInicioReserva\": \"2022-08-15\",\r\n            \"fechaFinReserva\":\"2022-08-20\"},\r\n            {\"fechaInicioReserva\": \"2022-08-25\",\r\n            \"fechaFinReserva\":\"2022-08-30\"}\r\n        ],\r\n        \"imagenDTOList\": [\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista interior\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista cocina\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"},\r\n            {\"url_img_producto\": \"{{IMGEJEMPLO_BUCKET}}\",\r\n            \"titulo_img_producto\":\"Vista camas\"}\r\n        ],\r\n        \"caracteristicasDTOList\": [\r\n            {\"titulo\": \"WiFi\",\r\n            \"nombre_icono\":\"WiFi\"},\r\n            {\"titulo\": \"Cocina\",\r\n            \"nombre_icono\":\"Cocina\"},\r\n            {\"titulo\": \"Aire acondicionado\",\r\n            \"nombre_icono\":\"airConditioner\"}\r\n        ]\r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_PRODUCTOS}}/editar",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Delete - Eliminar producto",
					"item": [
						{
							"name": "Eliminar producto OK",
							"item": [
								{
									"name": "Eliminar producto",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_PRODUCTOS}}/eliminar/{{IDPOST_PRODUCTO}}",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"eliminar",
												"{{IDPOST_PRODUCTO}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Eliminar producto script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto que indica que fue borrado el producto\", function () {\r",
													"  pm.response.to.have.body(\"DELETED\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_PRODUCTOS}}/eliminar/{{IDPOST2_PRODUCTO}}",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"eliminar",
												"{{IDPOST2_PRODUCTO}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Eliminar producto exception",
							"item": [
								{
									"name": "Eliminar producto exception",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_PRODUCTOS}}/eliminar/{{IDFOREXCEPTION}}",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"eliminar",
												"{{IDFOREXCEPTION}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Eliminar producto exception script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se pudo encontrar el producto a eliminar\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_PRODUCTOS}}/eliminar/{{IDFOREXCEPTION}}",
											"host": [
												"{{URL_PRODUCTOS}}"
											],
											"path": [
												"eliminar",
												"{{IDFOREXCEPTION}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Ciudades Testing",
			"item": [
				{
					"name": "Post - Agregar ciudad",
					"item": [
						{
							"name": "Agregar ciudad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Setear el ID de la ciudad posteada\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"   pm.collectionVariables.set(\"IDPOST2_CIUDAD\", jsonData);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nombre\": \"{{POST_CIUDAD_NOMBRE}}\",\r\n    \"provincia\": \"{{POST_CIUDAD_PROVINCIA}}\",\r\n    \"pais\": \"{{POST_CIUDAD_PAIS}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_CIUDADES}}/agregar",
									"host": [
										"{{URL_CIUDADES}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar ciudad script tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"console.log(jsonData)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header es application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Testear que el tipo de respuesta sea un el id (tipo number)\", () => {\r",
											"    \r",
											"    pm.expect(jsonData).to.be.a(\"number\");\r",
											"  \r",
											"});\r",
											"\r",
											"pm.test(\"La respuesta es un status OK\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Setear el ID de la ciudad posteada\", () => {\r",
											"    \r",
											"   pm.collectionVariables.set(\"IDPOST_CIUDAD\", jsonData);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nombre\": \"{{POST_CIUDAD_NOMBRE}}\",\r\n    \"provincia\": \"{{POST_CIUDAD_PROVINCIA}}\",\r\n    \"pais\": \"{{POST_CIUDAD_PAIS}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_CIUDADES}}/agregar",
									"host": [
										"{{URL_CIUDADES}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agregar ciudad exception script tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"El código de status es 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header es application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Length header está presente\", () => {\r",
											"  pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
											"  pm.response.to.have.body(\"No se puede agregar una ciudad con campos nulos o vacíos\");\r",
											"});\r",
											"\r",
											"pm.test(\"La respuesta es un status Bad Request\", () => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nombre\": \"{{POST_CIUDAD_NOMBRE}}\",\r\n    \"provincia\": \"{{POST_CIUDAD_PROVINCIA}}\",\r\n    \"pais\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_CIUDADES}}/agregar",
									"host": [
										"{{URL_CIUDADES}}"
									],
									"path": [
										"agregar"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get - Obtener ciudad",
					"item": [
						{
							"name": "Obtener todas las ciudades",
							"item": [
								{
									"name": "Obtener todas las ciudades",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_CIUDADES}}/todas",
											"host": [
												"{{URL_CIUDADES}}"
											],
											"path": [
												"todas"
											]
										}
									},
									"response": []
								},
								{
									"name": "Obtener todas  las ciudades script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo id\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo nombre\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"nombre\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo provincia\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"provincia\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo pais\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pais\");\r",
													"});\r",
													"\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo nombre\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].nombre).to.be.a('string');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo provincia\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].provincia).to.be.a('string');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo pais\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].pais).to.be.a('string');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Validar atributo id\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration].id).to.be.a('number');\r",
													"  \r",
													"});\r",
													"}\r",
													"\r",
													"for (let i = 0; i < responseJson.length; i++) {\r",
													"    pm.test(\"Se espera que los elementos dentro de la respuesta sean objetos\", function () {\r",
													"    \r",
													"    pm.expect(responseJson[pm.info.iteration]).to.be.an('object');\r",
													"});\r",
													"}\r",
													"\r",
													"pm.test(\"Se espera que la respuesta sea un array\", () => {\r",
													"   \r",
													"  pm.expect(responseJson).to.be.an(\"array\");\r",
													"   \r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_CIUDADES}}/todas",
											"host": [
												"{{URL_CIUDADES}}"
											],
											"path": [
												"todas"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Obtener ciudad por id",
							"item": [
								{
									"name": "Obtener ciudad por id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo id\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo nombre\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"nombre\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo provincia\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"provincia\");\r",
													"});\r",
													"\r",
													"pm.test(\"Validar atributo pais\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pais\");\r",
													"});\r",
													"\r",
													"pm.test(\"El id está presente y es un numero\", () => {\r",
													"   \r",
													"    pm.expect(responseJson.id).to.be.a('number');\r",
													"        \r",
													"});\r",
													"\r",
													"pm.test(\"El ID es el mismo que el obtenido al hacer el post de la ciudad previamente\", () => {\r",
													"  pm.expect(responseJson.id).to.eql(pm.collectionVariables.get(\"IDPOST_CIUDAD\"));\r",
													"});\r",
													"\r",
													"pm.test(\"El nombre es un string\", () => {\r",
													"      pm.expect(responseJson.nombre).to.be.a('string');\r",
													"       \r",
													"});\r",
													"\r",
													"pm.test(\"El nombre de la ciudad es el mismo que el enviado al hacer el post de la ciudad previamente\", () => {\r",
													"  pm.expect(responseJson.nombre).to.eql(pm.collectionVariables.get(\"POST_CIUDAD_NOMBRE\"));\r",
													"});\r",
													"\r",
													"pm.test(\"La provincia es un string\", () => {\r",
													"      pm.expect(responseJson.provincia).to.be.a('string');\r",
													"       \r",
													"});\r",
													"\r",
													"pm.test(\"La provincia es la misma que la enviada al hacer el post de la ciudad previamente\", () => {\r",
													"  pm.expect(responseJson.provincia).to.eql(pm.collectionVariables.get(\"POST_CIUDAD_PROVINCIA\"));\r",
													"});\r",
													"\r",
													"pm.test(\"El pais es un string\", () => {\r",
													"      pm.expect(responseJson.pais).to.be.a('string');\r",
													"       \r",
													"});\r",
													"\r",
													"pm.test(\"El pais es el mismo que el enviado al hacer el post de la ciudad previamente\", () => {\r",
													"  pm.expect(responseJson.pais).to.eql(pm.collectionVariables.get(\"POST_CIUDAD_PAIS\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_CIUDADES}}/{{IDPOST_CIUDAD}}",
											"host": [
												"{{URL_CIUDADES}}"
											],
											"path": [
												"{{IDPOST_CIUDAD}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Obtener ciudad por id exception",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se pudo encontrar la ciudad con el id indicado\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL_CIUDADES}}/{{IDFOREXCEPTION}}",
											"host": [
												"{{URL_CIUDADES}}"
											],
											"path": [
												"{{IDFOREXCEPTION}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Put - Modificar ciudad",
					"item": [
						{
							"name": "Modificar ciudad OK",
							"item": [
								{
									"name": "Modificar ciudad",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{IDPOST_CIUDAD}},\r\n    \"nombre\": \"{{PUT_CIUDAD_NOMBRE}}\",\r\n    \"provincia\": \"{{POST_CIUDAD_PROVINCIA}}\",\r\n    \"pais\": \"{{POST_CIUDAD_PAIS}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_CIUDADES}}/editar",
											"host": [
												"{{URL_CIUDADES}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modificar ciudad script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto que indica que fue actualizada la ciudad\", function () {\r",
													"  pm.response.to.have.body(\"UPDATED\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status OK\", () => {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{IDPOST2_CIUDAD}},\r\n    \"nombre\": \"{{PUT_CIUDAD_NOMBRE}}\",\r\n    \"provincia\": \"{{POST_CIUDAD_PROVINCIA}}\",\r\n    \"pais\": \"{{POST_CIUDAD_PAIS}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_CIUDADES}}/editar",
											"host": [
												"{{URL_CIUDADES}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Modificar ciudad exception",
							"item": [
								{
									"name": "Modificar ciudad exception",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{IDFOREXCEPTION}},\r\n    \"nombre\": \"{{PUT_CIUDAD_NOMBRE}}\",\r\n    \"provincia\": \"{{POST_CIUDAD_PROVINCIA}}\",\r\n    \"pais\": \"{{POST_CIUDAD_PAIS}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_CIUDADES}}/editar",
											"host": [
												"{{URL_CIUDADES}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modificar ciudad exception script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se pudo encontrar la ciudad para editar\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"   pm.response.to.have.status(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{IDFOREXCEPTION}},\r\n    \"nombre\": \"{{PUT_CIUDAD_NOMBRE}}\",\r\n    \"provincia\": \"{{POST_CIUDAD_PROVINCIA}}\",\r\n    \"pais\": \"{{POST_CIUDAD_PAIS}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_CIUDADES}}/editar",
											"host": [
												"{{URL_CIUDADES}}"
											],
											"path": [
												"editar"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Delete - Eliminar ciudad",
					"item": [
						{
							"name": "Eliminar ciudad OK",
							"item": [
								{
									"name": "Eliminar ciudad",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_CIUDADES}}/eliminar/{{IDPOST_CIUDAD}}",
											"host": [
												"{{URL_CIUDADES}}"
											],
											"path": [
												"eliminar",
												"{{IDPOST_CIUDAD}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Eliminar ciudad script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto que indica que fue borrada la ciudad\", function () {\r",
													"  pm.response.to.have.body(\"DELETED\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_CIUDADES}}/eliminar/{{IDPOST2_CIUDAD}}",
											"host": [
												"{{URL_CIUDADES}}"
											],
											"path": [
												"eliminar",
												"{{IDPOST2_CIUDAD}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Eliminar ciudad exception",
							"item": [
								{
									"name": "Eliminar ciudad exception",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_CIUDADES}}/eliminar/{{IDFOREXCEPTION}}",
											"host": [
												"{{URL_CIUDADES}}"
											],
											"path": [
												"eliminar",
												"{{IDFOREXCEPTION}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Eliminar ciudad exception script tests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"El código de status es 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type header es application/json\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length header está presente\", () => {\r",
													"  pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body de respuesta es un texto con la descripcion del error\", function () {\r",
													"  pm.response.to.have.body(\"No se pudo encontrar la ciudad a eliminar\");\r",
													"});\r",
													"\r",
													"pm.test(\"La respuesta es un status Not Found\", () => {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_CIUDADES}}/eliminar/{{IDPOST_CIUDAD}}",
											"host": [
												"{{URL_CIUDADES}}"
											],
											"path": [
												"eliminar",
												"{{IDPOST_CIUDAD}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "IDPOST_CATEGORIA",
			"value": 13
		},
		{
			"key": "IDFOREXCEPTION",
			"value": "1500",
			"type": "string"
		},
		{
			"key": "IDPOST2_CATEGORIA",
			"value": 15,
			"type": "string"
		},
		{
			"key": "URL_CATEGORIAS",
			"value": "http://localhost:8080/categorias",
			"type": "string"
		},
		{
			"key": "POST_HOTELES_CATEGORIA",
			"value": "Hoteles",
			"type": "string"
		},
		{
			"key": "POST_DESCRIPCION",
			"value": "Descripcion post",
			"type": "string"
		},
		{
			"key": "PUT_DESCRIPCION",
			"value": "Descripcion modificada",
			"type": "string"
		},
		{
			"key": "URL_PRODUCTOS",
			"value": "http://localhost:8080/productos",
			"type": "string"
		},
		{
			"key": "IDPOST_PRODUCTO",
			"value": 33,
			"type": "string"
		},
		{
			"key": "IMGEJEMPLO_BUCKET",
			"value": "https://t-cf.bstatic.com/xdata/images/hotel/max1024x768/166442884.jpg?k=f038e53f71b03089fec79040cc5504bbc2ddf1d5769325d855baf665fc8fa67e&o=&hp=1",
			"type": "string"
		},
		{
			"key": "IDPOST2_PRODUCTO",
			"value": 35,
			"type": "string"
		},
		{
			"key": "IDCIUDAD_GETPRODUCTOS",
			"value": "1",
			"type": "string"
		},
		{
			"key": "IDCATEGORIA_GETPRODUCTOS",
			"value": "1",
			"type": "string"
		},
		{
			"key": "IDPOST_CIUDAD",
			"value": "5",
			"type": "string"
		},
		{
			"key": "IDPOST2_CIUDAD",
			"value": "6",
			"type": "string"
		},
		{
			"key": "URL_CIUDADES",
			"value": "http://localhost:8080/ciudades",
			"type": "string"
		},
		{
			"key": "POST_CIUDAD_NOMBRE",
			"value": "Ushuaia",
			"type": "string"
		},
		{
			"key": "POST_CIUDAD_PROVINCIA",
			"value": "Tierra del Fuego",
			"type": "string"
		},
		{
			"key": "POST_CIUDAD_PAIS",
			"value": "Argentina",
			"type": "string"
		},
		{
			"key": "PUT_CIUDAD_NOMBRE",
			"value": "Río Grande",
			"type": "string"
		}
	]
}